------------- NVBit (NVidia Binary Instrumentation Tool v1.5.4) Loaded --------------
NVBit core environment variables (mostly for nvbit-devs):
            NVDISASM = nvdisasm - override default nvdisasm found in PATH
            NOBANNER = 0 - if set, does not print this banner
---------------------------------------------------------------------------------
         INSTR_BEGIN = 0 - Beginning of the instruction interval where to apply instrumentation
           INSTR_END = 4294967295 - End of the instruction interval where to apply instrumentation
        KERNEL_BEGIN = 0 - Beginning of the kernel launch interval where to apply instrumentation
          KERNEL_END = 4294967295 - End of the kernel launch interval where to apply instrumentation
        TOOL_VERBOSE = 1 - Enable verbosity inside the tool
    COUNT_WARP_LEVEL = 1 - Count warp level or thread level instructions
    EXCLUDE_PRED_OFF = 0 - Exclude predicated off instruction from count
----------------------------------------------------------------------------------------------------
inspecting compute(double, double, int, double, double, double, double*, double, double, double, double, double, double, double) - num instrs 1000
Instr 0 @ 0x0 (0) - IMAD.MOV.U32 R1, RZ, RZ, c[0x0][0x28] ;
  has_guard_pred = 0
  opcode = IMAD.MOV.U32/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 1
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = CBANK
  is_neg/is_not/abs = 0/0/0
  size = 4
  id = 0
  has_imm_offset = 1
  imm_offset = 40
  has_reg_offset = 0
  reg_offset = 0
instruction size is 4
Instr 1 @ 0x10 (16) - MUFU.RCP64H R3, -1.0312994609502658696e-306 ;
  has_guard_pred = 0
  opcode = MUFU.RCP64H/MUFU
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 3
  prop = 
--op[1].type = IMM_DOUBLE
  is_neg/is_not/abs = 1/0/0
  size = 8
  value = -1.031299e-306
instruction size is 4
Instr 2 @ 0x20 (32) - IMAD.MOV.U32 R6, RZ, RZ, -0x34c6bd1a ;
  has_guard_pred = 0
  opcode = IMAD.MOV.U32/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 6
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = IMM_UINT64
  is_neg/is_not/abs = 1/0/0
  size = 8
  value = 0xffffffffcb3942e6
instruction size is 4
Instr 3 @ 0x30 (48) - IADD3 R1, R1, -0x38, RZ ;
  has_guard_pred = 0
  opcode = IADD3/IADD3
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 1
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 1
  prop = 
--op[2].type = IMM_UINT64
  is_neg/is_not/abs = 1/0/0
  size = 8
  value = 0xffffffffffffffc8
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
instruction size is 4
Instr 4 @ 0x40 (64) - IMAD.MOV.U32 R7, RZ, RZ, 0x672cac ;
  has_guard_pred = 0
  opcode = IMAD.MOV.U32/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 7
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x672cac
instruction size is 4
Instr 5 @ 0x50 (80) - IMAD.MOV.U32 R2, RZ, RZ, 0x1 ;
  has_guard_pred = 0
  opcode = IMAD.MOV.U32/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 2
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x1
instruction size is 4
Instr 6 @ 0x60 (96) - DFMA R4, R2, R6, 1 ;
  has_guard_pred = 0
  opcode = DFMA/DFMA
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 4
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 2
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 6
  prop = 
--op[3].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x1
instruction size is 4
Instr 7 @ 0x70 (112) - DFMA R4, R4, R4, R4 ;
  has_guard_pred = 0
  opcode = DFMA/DFMA
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 4
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 4
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 4
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 4
  prop = 
instruction size is 4
Instr 8 @ 0x80 (128) - DFMA R4, R2, R4, R2 ;
  has_guard_pred = 0
  opcode = DFMA/DFMA
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 4
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 2
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 4
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 2
  prop = 
instruction size is 4
Instr 9 @ 0x90 (144) - DMUL R2, R4, c[0x0][0x168] ;
  has_guard_pred = 0
  opcode = DMUL/DMUL
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 2
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 4
  prop = 
--op[2].type = CBANK
  is_neg/is_not/abs = 0/0/0
  size = 4
  id = 0
  has_imm_offset = 1
  imm_offset = 360
  has_reg_offset = 0
  reg_offset = 0
instruction size is 4
Instr 10 @ 0xa0 (160) - DFMA R6, R2, R6, c[0x0][0x168] ;
  has_guard_pred = 0
  opcode = DFMA/DFMA
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 6
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 2
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 6
  prop = 
--op[3].type = CBANK
  is_neg/is_not/abs = 0/0/0
  size = 4
  id = 0
  has_imm_offset = 1
  imm_offset = 360
  has_reg_offset = 0
  reg_offset = 0
instruction size is 4
Instr 11 @ 0xb0 (176) - DFMA R4, R4, R6, R2 ;
  has_guard_pred = 0
  opcode = DFMA/DFMA
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 4
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 4
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 6
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 2
  prop = 
instruction size is 4
Instr 12 @ 0xc0 (192) - IMAD.MOV.U32 R2, RZ, RZ, c[0x0][0x16c] ;
  has_guard_pred = 0
  opcode = IMAD.MOV.U32/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 2
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = CBANK
  is_neg/is_not/abs = 0/0/0
  size = 4
  id = 0
  has_imm_offset = 1
  imm_offset = 364
  has_reg_offset = 0
  reg_offset = 0
instruction size is 4
Instr 13 @ 0xd0 (208) - IMAD.MOV.U32 R3, RZ, RZ, c[0x0][0x164] ;
  has_guard_pred = 0
  opcode = IMAD.MOV.U32/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 3
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = CBANK
  is_neg/is_not/abs = 0/0/0
  size = 4
  id = 0
  has_imm_offset = 1
  imm_offset = 356
  has_reg_offset = 0
  reg_offset = 0
instruction size is 4
Instr 14 @ 0xe0 (224) - FSETP.GTU.AND P1, PT, |R2|, 6.4490557925156731238e-37, PT ;
  has_guard_pred = 0
  opcode = FSETP.GTU.AND/FSETP
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 1
--op[1].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 7
--op[2].type = REG
  is_neg/is_not/abs = 0/0/1
  size = 4
  num = 2
  prop = 
--op[3].type = IMM_DOUBLE
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 6.449056e-37
--op[4].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 7
instruction size is 4
Instr 15 @ 0xf0 (240) - IMAD.MOV.U32 R2, RZ, RZ, c[0x0][0x160] ;
  has_guard_pred = 0
  opcode = IMAD.MOV.U32/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 2
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = CBANK
  is_neg/is_not/abs = 0/0/0
  size = 4
  id = 0
  has_imm_offset = 1
  imm_offset = 352
  has_reg_offset = 0
  reg_offset = 0
instruction size is 4
Instr 16 @ 0x100 (256) - FFMA R0, RZ, -9.4750813535111133987e-39, R5 ;
  has_guard_pred = 0
  opcode = FFMA/FFMA
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 0
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = IMM_DOUBLE
  is_neg/is_not/abs = 1/0/0
  size = 8
  value = -9.475081e-39
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 5
  prop = 
instruction size is 4
Instr 17 @ 0x110 (272) - FSETP.GT.AND P0, PT, |R0|, 4.8978884574313168671e-40, PT ;
  has_guard_pred = 0
  opcode = FSETP.GT.AND/FSETP
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 0
--op[1].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 7
--op[2].type = REG
  is_neg/is_not/abs = 0/0/1
  size = 4
  num = 0
  prop = 
--op[3].type = IMM_DOUBLE
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 4.897888e-40
--op[4].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 7
instruction size is 4
Instr 18 @ 0x120 (288) - @P0 BRA P1, 0x1b0 ;
  has_guard_pred = 1
  guard_pred_num = 0
  guard_pred_negated = 0
  guard_pred_uniform = 0
  opcode = BRA/BRA
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 1
--op[1].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x1b0
instruction size is 4
Instr 19 @ 0x130 (304) - IMAD.MOV.U32 R24, RZ, RZ, c[0x0][0x168] ;
  has_guard_pred = 0
  opcode = IMAD.MOV.U32/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 24
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = CBANK
  is_neg/is_not/abs = 0/0/0
  size = 4
  id = 0
  has_imm_offset = 1
  imm_offset = 360
  has_reg_offset = 0
  reg_offset = 0
instruction size is 4
Instr 20 @ 0x140 (320) - MOV R10, 0x190 ;
  has_guard_pred = 0
  opcode = MOV/MOV
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 10
  prop = 
--op[1].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x190
instruction size is 4
Instr 21 @ 0x150 (336) - IMAD.MOV.U32 R25, RZ, RZ, c[0x0][0x16c] ;
  has_guard_pred = 0
  opcode = IMAD.MOV.U32/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 25
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = CBANK
  is_neg/is_not/abs = 0/0/0
  size = 4
  id = 0
  has_imm_offset = 1
  imm_offset = 364
  has_reg_offset = 0
  reg_offset = 0
instruction size is 4
Instr 22 @ 0x160 (352) - IMAD.MOV.U32 R22, RZ, RZ, -0x34c6bd1a ;
  has_guard_pred = 0
  opcode = IMAD.MOV.U32/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 22
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = IMM_UINT64
  is_neg/is_not/abs = 1/0/0
  size = 8
  value = 0xffffffffcb3942e6
instruction size is 4
Instr 23 @ 0x170 (368) - IMAD.MOV.U32 R23, RZ, RZ, -0x7f98d354 ;
  has_guard_pred = 0
  opcode = IMAD.MOV.U32/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 23
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = IMM_UINT64
  is_neg/is_not/abs = 1/0/0
  size = 8
  value = 0xffffffff80672cac
instruction size is 4
Instr 24 @ 0x180 (384) - CALL.REL.NOINC 0x2c00 ;
  has_guard_pred = 0
  opcode = CALL.REL.NOINC/CALL
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x2c00
instruction size is 4
Instr 25 @ 0x190 (400) - IMAD.MOV.U32 R4, RZ, RZ, R24 ;
  has_guard_pred = 0
  opcode = IMAD.MOV.U32/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 4
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 24
  prop = 
instruction size is 4
Instr 26 @ 0x1a0 (416) - IMAD.MOV.U32 R5, RZ, RZ, R25 ;
  has_guard_pred = 0
  opcode = IMAD.MOV.U32/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 5
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 25
  prop = 
instruction size is 4
Instr 27 @ 0x1b0 (432) - DSETP.GT.AND P0, PT, R4, c[0x0][0x160], PT ;
  has_guard_pred = 0
  opcode = DSETP.GT.AND/DSETP
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 0
--op[1].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 7
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 4
  prop = 
--op[3].type = CBANK
  is_neg/is_not/abs = 0/0/0
  size = 4
  id = 0
  has_imm_offset = 1
  imm_offset = 352
  has_reg_offset = 0
  reg_offset = 0
--op[4].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 7
instruction size is 4
Instr 28 @ 0x1c0 (448) - BSSY B0, 0x2b50 ;
  has_guard_pred = 0
  opcode = BSSY/BSSY
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0xb0
--op[1].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x2b50
instruction size is 4
Instr 29 @ 0x1d0 (464) - IADD3 R6, P6, R1, c[0x0][0x20], RZ ;
  has_guard_pred = 0
  opcode = IADD3/IADD3
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 6
  prop = 
--op[1].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 6
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 1
  prop = 
--op[3].type = CBANK
  is_neg/is_not/abs = 0/0/0
  size = 4
  id = 0
  has_imm_offset = 1
  imm_offset = 32
  has_reg_offset = 0
  reg_offset = 0
--op[4].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
instruction size is 4
Instr 30 @ 0x1e0 (480) - @!P0 BRA 0x2b40 ;
  has_guard_pred = 1
  guard_pred_num = 0
  guard_pred_negated = 1
  guard_pred_uniform = 0
  opcode = BRA/BRA
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x2b40
instruction size is 4
Instr 31 @ 0x1f0 (496) - IMAD.MOV.U32 R2, RZ, RZ, c[0x0][0x180] ;
  has_guard_pred = 0
  opcode = IMAD.MOV.U32/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 2
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = CBANK
  is_neg/is_not/abs = 0/0/0
  size = 4
  id = 0
  has_imm_offset = 1
  imm_offset = 384
  has_reg_offset = 0
  reg_offset = 0
instruction size is 4
Instr 32 @ 0x200 (512) - MOV R3, c[0x0][0x184] ;
  has_guard_pred = 0
  opcode = MOV/MOV
  memop = CONSTANT
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 3
  prop = 
--op[1].type = CBANK
  is_neg/is_not/abs = 0/0/0
  size = 4
  id = 0
  has_imm_offset = 1
  imm_offset = 388
  has_reg_offset = 0
  reg_offset = 0
instruction size is 4
Instr 33 @ 0x210 (528) - IMAD.MOV.U32 R10, RZ, RZ, 0x0 ;
  has_guard_pred = 0
  opcode = IMAD.MOV.U32/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 10
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x0
instruction size is 4
Instr 34 @ 0x220 (544) - IMAD.MOV.U32 R11, RZ, RZ, 0x3fd80000 ;
  has_guard_pred = 0
  opcode = IMAD.MOV.U32/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 11
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x3fd80000
instruction size is 4
Instr 35 @ 0x230 (560) - DADD R2, R2, c[0x2][0x0] ;
  has_guard_pred = 0
  opcode = DADD/DADD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 2
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 2
  prop = 
--op[2].type = CBANK
  is_neg/is_not/abs = 0/0/0
  size = 4
  id = 2
  has_imm_offset = 1
  imm_offset = 0
  has_reg_offset = 0
  reg_offset = 0
instruction size is 4
Instr 36 @ 0x240 (576) - MUFU.RSQ64H R5, R3 ;
  has_guard_pred = 0
  opcode = MUFU.RSQ64H/MUFU
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 5
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 3
  prop = 
instruction size is 4
Instr 37 @ 0x250 (592) - IADD3 R4, R3, -0x3500000, RZ ;
  has_guard_pred = 0
  opcode = IADD3/IADD3
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 4
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 3
  prop = 
--op[2].type = IMM_UINT64
  is_neg/is_not/abs = 1/0/0
  size = 8
  value = 0xfffffffffcb00000
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
instruction size is 4
Instr 38 @ 0x260 (608) - ISETP.GE.U32.AND P0, PT, R4, 0x7ca00000, PT ;
  has_guard_pred = 0
  opcode = ISETP.GE.U32.AND/ISETP
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 0
--op[1].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 7
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 4
  prop = 
--op[3].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x7ca00000
--op[4].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 7
instruction size is 4
Instr 39 @ 0x270 (624) - DMUL R8, R4, R4 ;
  has_guard_pred = 0
  opcode = DMUL/DMUL
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 8
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 4
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 4
  prop = 
instruction size is 4
Instr 40 @ 0x280 (640) - DFMA R8, R2, -R8, 1 ;
  has_guard_pred = 0
  opcode = DFMA/DFMA
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 8
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 2
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 1/0/0
  size = 4
  num = 8
  prop = 
--op[3].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x1
instruction size is 4
Instr 41 @ 0x290 (656) - DFMA R10, R8, R10, 0.5 ;
  has_guard_pred = 0
  opcode = DFMA/DFMA
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 10
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 8
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 10
  prop = 
--op[3].type = IMM_DOUBLE
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 5.000000e-01
instruction size is 4
Instr 42 @ 0x2a0 (672) - DMUL R8, R4, R8 ;
  has_guard_pred = 0
  opcode = DMUL/DMUL
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 8
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 4
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 8
  prop = 
instruction size is 4
Instr 43 @ 0x2b0 (688) - DFMA R8, R10, R8, R4 ;
  has_guard_pred = 0
  opcode = DFMA/DFMA
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 8
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 10
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 8
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 4
  prop = 
instruction size is 4
Instr 44 @ 0x2c0 (704) - DMUL R10, R2, R8 ;
  has_guard_pred = 0
  opcode = DMUL/DMUL
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 10
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 2
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 8
  prop = 
instruction size is 4
Instr 45 @ 0x2d0 (720) - IADD3 R15, R9, -0x100000, RZ ;
  has_guard_pred = 0
  opcode = IADD3/IADD3
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 15
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 9
  prop = 
--op[2].type = IMM_UINT64
  is_neg/is_not/abs = 1/0/0
  size = 8
  value = 0xfffffffffff00000
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
instruction size is 4
Instr 46 @ 0x2e0 (736) - IMAD.MOV.U32 R14, RZ, RZ, R8 ;
  has_guard_pred = 0
  opcode = IMAD.MOV.U32/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 14
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 8
  prop = 
instruction size is 4
Instr 47 @ 0x2f0 (752) - DFMA R12, R10, -R10, R2 ;
  has_guard_pred = 0
  opcode = DFMA/DFMA
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 12
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 10
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 1/0/0
  size = 4
  num = 10
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 2
  prop = 
instruction size is 4
Instr 48 @ 0x300 (768) - DFMA R22, R12, R14, R10 ;
  has_guard_pred = 0
  opcode = DFMA/DFMA
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 22
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 12
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 14
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 10
  prop = 
instruction size is 4
Instr 49 @ 0x310 (784) - @!P0 BRA 0x340 ;
  has_guard_pred = 1
  guard_pred_num = 0
  guard_pred_negated = 1
  guard_pred_uniform = 0
  opcode = BRA/BRA
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x340
instruction size is 4
Instr 50 @ 0x320 (800) - MOV R0, 0x340 ;
  has_guard_pred = 0
  opcode = MOV/MOV
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 0
  prop = 
--op[1].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x340
instruction size is 4
Instr 51 @ 0x330 (816) - CALL.REL.NOINC 0x3140 ;
  has_guard_pred = 0
  opcode = CALL.REL.NOINC/CALL
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x3140
instruction size is 4
Instr 52 @ 0x340 (832) - MUFU.RCP64H R3, R23 ;
  has_guard_pred = 0
  opcode = MUFU.RCP64H/MUFU
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 3
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 23
  prop = 
instruction size is 4
Instr 53 @ 0x350 (848) - IMAD.MOV.U32 R2, RZ, RZ, 0x1 ;
  has_guard_pred = 0
  opcode = IMAD.MOV.U32/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 2
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x1
instruction size is 4
Instr 54 @ 0x360 (864) - BSSY B1, 0x490 ;
  has_guard_pred = 0
  opcode = BSSY/BSSY
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0xb1
--op[1].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x490
instruction size is 4
Instr 55 @ 0x370 (880) - DFMA R4, R2, -R22, 1 ;
  has_guard_pred = 0
  opcode = DFMA/DFMA
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 4
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 2
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 1/0/0
  size = 4
  num = 22
  prop = 
--op[3].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x1
instruction size is 4
Instr 56 @ 0x380 (896) - DFMA R4, R4, R4, R4 ;
  has_guard_pred = 0
  opcode = DFMA/DFMA
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 4
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 4
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 4
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 4
  prop = 
instruction size is 4
Instr 57 @ 0x390 (912) - DFMA R2, R2, R4, R2 ;
  has_guard_pred = 0
  opcode = DFMA/DFMA
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 2
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 2
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 4
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 2
  prop = 
instruction size is 4
Instr 58 @ 0x3a0 (928) - DMUL R4, R2, c[0x0][0x178] ;
  has_guard_pred = 0
  opcode = DMUL/DMUL
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 4
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 2
  prop = 
--op[2].type = CBANK
  is_neg/is_not/abs = 0/0/0
  size = 4
  id = 0
  has_imm_offset = 1
  imm_offset = 376
  has_reg_offset = 0
  reg_offset = 0
instruction size is 4
Instr 59 @ 0x3b0 (944) - DFMA R8, R4, -R22, c[0x0][0x178] ;
  has_guard_pred = 0
  opcode = DFMA/DFMA
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 8
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 4
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 1/0/0
  size = 4
  num = 22
  prop = 
--op[3].type = CBANK
  is_neg/is_not/abs = 0/0/0
  size = 4
  id = 0
  has_imm_offset = 1
  imm_offset = 376
  has_reg_offset = 0
  reg_offset = 0
instruction size is 4
Instr 60 @ 0x3c0 (960) - DFMA R2, R2, R8, R4 ;
  has_guard_pred = 0
  opcode = DFMA/DFMA
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 2
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 2
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 8
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 4
  prop = 
instruction size is 4
Instr 61 @ 0x3d0 (976) - IMAD.MOV.U32 R4, RZ, RZ, c[0x0][0x17c] ;
  has_guard_pred = 0
  opcode = IMAD.MOV.U32/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 4
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = CBANK
  is_neg/is_not/abs = 0/0/0
  size = 4
  id = 0
  has_imm_offset = 1
  imm_offset = 380
  has_reg_offset = 0
  reg_offset = 0
instruction size is 4
Instr 62 @ 0x3e0 (992) - FSETP.GTU.AND P1, PT, |R4|, 6.4490557925156731238e-37, PT ;
  has_guard_pred = 0
  opcode = FSETP.GTU.AND/FSETP
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 1
--op[1].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 7
--op[2].type = REG
  is_neg/is_not/abs = 0/0/1
  size = 4
  num = 4
  prop = 
--op[3].type = IMM_DOUBLE
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 6.449056e-37
--op[4].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 7
instruction size is 4
Instr 63 @ 0x3f0 (1008) - FFMA R0, RZ, R23, R3 ;
  has_guard_pred = 0
  opcode = FFMA/FFMA
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 0
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 23
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 3
  prop = 
instruction size is 4
Instr 64 @ 0x400 (1024) - FSETP.GT.AND P0, PT, |R0|, 4.8978884574313168671e-40, PT ;
  has_guard_pred = 0
  opcode = FSETP.GT.AND/FSETP
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 0
--op[1].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 7
--op[2].type = REG
  is_neg/is_not/abs = 0/0/1
  size = 4
  num = 0
  prop = 
--op[3].type = IMM_DOUBLE
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 4.897888e-40
--op[4].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 7
instruction size is 4
Instr 65 @ 0x410 (1040) - @P0 BRA P1, 0x480 ;
  has_guard_pred = 1
  guard_pred_num = 0
  guard_pred_negated = 0
  guard_pred_uniform = 0
  opcode = BRA/BRA
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 1
--op[1].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x480
instruction size is 4
Instr 66 @ 0x420 (1056) - IMAD.MOV.U32 R24, RZ, RZ, c[0x0][0x178] ;
  has_guard_pred = 0
  opcode = IMAD.MOV.U32/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 24
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = CBANK
  is_neg/is_not/abs = 0/0/0
  size = 4
  id = 0
  has_imm_offset = 1
  imm_offset = 376
  has_reg_offset = 0
  reg_offset = 0
instruction size is 4
Instr 67 @ 0x430 (1072) - MOV R10, 0x460 ;
  has_guard_pred = 0
  opcode = MOV/MOV
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 10
  prop = 
--op[1].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x460
instruction size is 4
Instr 68 @ 0x440 (1088) - IMAD.MOV.U32 R25, RZ, RZ, c[0x0][0x17c] ;
  has_guard_pred = 0
  opcode = IMAD.MOV.U32/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 25
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = CBANK
  is_neg/is_not/abs = 0/0/0
  size = 4
  id = 0
  has_imm_offset = 1
  imm_offset = 380
  has_reg_offset = 0
  reg_offset = 0
instruction size is 4
Instr 69 @ 0x450 (1104) - CALL.REL.NOINC 0x2c00 ;
  has_guard_pred = 0
  opcode = CALL.REL.NOINC/CALL
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x2c00
instruction size is 4
Instr 70 @ 0x460 (1120) - IMAD.MOV.U32 R2, RZ, RZ, R24 ;
  has_guard_pred = 0
  opcode = IMAD.MOV.U32/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 2
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 24
  prop = 
instruction size is 4
Instr 71 @ 0x470 (1136) - IMAD.MOV.U32 R3, RZ, RZ, R25 ;
  has_guard_pred = 0
  opcode = IMAD.MOV.U32/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 3
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 25
  prop = 
instruction size is 4
Instr 72 @ 0x480 (1152) - BSYNC B1 ;
  has_guard_pred = 0
  opcode = BSYNC/BSYNC
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0xb1
instruction size is 4
Instr 73 @ 0x490 (1168) - IMAD.MOV.U32 R0, RZ, RZ, c[0x0][0x170] ;
  has_guard_pred = 0
  opcode = IMAD.MOV.U32/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 0
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = CBANK
  is_neg/is_not/abs = 0/0/0
  size = 4
  id = 0
  has_imm_offset = 1
  imm_offset = 368
  has_reg_offset = 0
  reg_offset = 0
instruction size is 4
Instr 74 @ 0x4a0 (1184) - DSETP.GTU.AND P0, PT, R2, RZ, PT ;
  has_guard_pred = 0
  opcode = DSETP.GTU.AND/DSETP
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 0
--op[1].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 7
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 2
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[4].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 7
instruction size is 4
Instr 75 @ 0x4b0 (1200) - IMAD.MOV.U32 R4, RZ, RZ, c[0x0][0x188] ;
  has_guard_pred = 0
  opcode = IMAD.MOV.U32/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 4
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = CBANK
  is_neg/is_not/abs = 0/0/0
  size = 4
  id = 0
  has_imm_offset = 1
  imm_offset = 392
  has_reg_offset = 0
  reg_offset = 0
instruction size is 4
Instr 76 @ 0x4c0 (1216) - IMAD.MOV.U32 R5, RZ, RZ, c[0x0][0x18c] ;
  has_guard_pred = 0
  opcode = IMAD.MOV.U32/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 5
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = CBANK
  is_neg/is_not/abs = 0/0/0
  size = 4
  id = 0
  has_imm_offset = 1
  imm_offset = 396
  has_reg_offset = 0
  reg_offset = 0
instruction size is 4
Instr 77 @ 0x4d0 (1232) - ISETP.GE.AND P1, PT, R0, 0x1, PT ;
  has_guard_pred = 0
  opcode = ISETP.GE.AND/ISETP
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 1
--op[1].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 7
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 0
  prop = 
--op[3].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x1
--op[4].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 7
instruction size is 4
Instr 78 @ 0x4e0 (1248) - DADD R4, R4, c[0x2][0x8] ;
  has_guard_pred = 0
  opcode = DADD/DADD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 4
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 4
  prop = 
--op[2].type = CBANK
  is_neg/is_not/abs = 0/0/0
  size = 4
  id = 2
  has_imm_offset = 1
  imm_offset = 8
  has_reg_offset = 0
  reg_offset = 0
instruction size is 4
Instr 79 @ 0x4f0 (1264) - FSEL R2, R4, RZ, !P0 ;
  has_guard_pred = 0
  opcode = FSEL/FSEL
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 2
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 4
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = PRED
  is_neg/is_not/abs = 0/1/0
  size = 1
  num = 0
instruction size is 4
Instr 80 @ 0x500 (1280) - FSEL R3, R5, RZ, !P0 ;
  has_guard_pred = 0
  opcode = FSEL/FSEL
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 3
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 5
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = PRED
  is_neg/is_not/abs = 0/1/0
  size = 1
  num = 0
instruction size is 4
Instr 81 @ 0x510 (1296) - @!P1 BRA 0x2b40 ;
  has_guard_pred = 1
  guard_pred_num = 1
  guard_pred_negated = 1
  guard_pred_uniform = 0
  opcode = BRA/BRA
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x2b40
instruction size is 4
Instr 82 @ 0x520 (1312) - MUFU.RCP64H R5, RZ ;
  has_guard_pred = 0
  opcode = MUFU.RCP64H/MUFU
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 5
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
instruction size is 4
Instr 83 @ 0x530 (1328) - IMAD.MOV.U32 R4, RZ, RZ, 0x1 ;
  has_guard_pred = 0
  opcode = IMAD.MOV.U32/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 4
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x1
instruction size is 4
Instr 84 @ 0x540 (1344) - MOV R7, c[0x0][0x1a4] ;
  has_guard_pred = 0
  opcode = MOV/MOV
  memop = CONSTANT
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 7
  prop = 
--op[1].type = CBANK
  is_neg/is_not/abs = 0/0/0
  size = 4
  id = 0
  has_imm_offset = 1
  imm_offset = 420
  has_reg_offset = 0
  reg_offset = 0
instruction size is 4
Instr 85 @ 0x550 (1360) - FSETP.GTU.AND P1, PT, |R7|, 6.4490557925156731238e-37, PT ;
  has_guard_pred = 0
  opcode = FSETP.GTU.AND/FSETP
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 1
--op[1].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 7
--op[2].type = REG
  is_neg/is_not/abs = 0/0/1
  size = 4
  num = 7
  prop = 
--op[3].type = IMM_DOUBLE
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 6.449056e-37
--op[4].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 7
instruction size is 4
Instr 86 @ 0x560 (1376) - DFMA R8, -RZ, R4, 1 ;
  has_guard_pred = 0
  opcode = DFMA/DFMA
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 8
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 1/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 4
  prop = 
--op[3].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x1
instruction size is 4
Instr 87 @ 0x570 (1392) - DFMA R8, R8, R8, R8 ;
  has_guard_pred = 0
  opcode = DFMA/DFMA
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 8
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 8
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 8
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 8
  prop = 
instruction size is 4
Instr 88 @ 0x580 (1408) - DFMA R4, R4, R8, R4 ;
  has_guard_pred = 0
  opcode = DFMA/DFMA
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 4
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 4
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 8
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 4
  prop = 
instruction size is 4
Instr 89 @ 0x590 (1424) - DMUL R8, R4, c[0x0][0x1a0] ;
  has_guard_pred = 0
  opcode = DMUL/DMUL
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 8
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 4
  prop = 
--op[2].type = CBANK
  is_neg/is_not/abs = 0/0/0
  size = 4
  id = 0
  has_imm_offset = 1
  imm_offset = 416
  has_reg_offset = 0
  reg_offset = 0
instruction size is 4
Instr 90 @ 0x5a0 (1440) - DFMA R10, -RZ, R8, c[0x0][0x1a0] ;
  has_guard_pred = 0
  opcode = DFMA/DFMA
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 10
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 1/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 8
  prop = 
--op[3].type = CBANK
  is_neg/is_not/abs = 0/0/0
  size = 4
  id = 0
  has_imm_offset = 1
  imm_offset = 416
  has_reg_offset = 0
  reg_offset = 0
instruction size is 4
Instr 91 @ 0x5b0 (1456) - DFMA R4, R4, R10, R8 ;
  has_guard_pred = 0
  opcode = DFMA/DFMA
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 4
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 4
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 10
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 8
  prop = 
instruction size is 4
Instr 92 @ 0x5c0 (1472) - FFMA R0, RZ, RZ, R5 ;
  has_guard_pred = 0
  opcode = FFMA/FFMA
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 0
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 5
  prop = 
instruction size is 4
Instr 93 @ 0x5d0 (1488) - FSETP.GT.AND P0, PT, |R0|, 4.8978884574313168671e-40, PT ;
  has_guard_pred = 0
  opcode = FSETP.GT.AND/FSETP
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 0
--op[1].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 7
--op[2].type = REG
  is_neg/is_not/abs = 0/0/1
  size = 4
  num = 0
  prop = 
--op[3].type = IMM_DOUBLE
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 4.897888e-40
--op[4].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 7
instruction size is 4
Instr 94 @ 0x5e0 (1504) - @P0 BRA P1, 0x660 ;
  has_guard_pred = 1
  guard_pred_num = 0
  guard_pred_negated = 0
  guard_pred_uniform = 0
  opcode = BRA/BRA
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 1
--op[1].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x660
instruction size is 4
Instr 95 @ 0x5f0 (1520) - IMAD.MOV.U32 R24, RZ, RZ, c[0x0][0x1a0] ;
  has_guard_pred = 0
  opcode = IMAD.MOV.U32/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 24
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = CBANK
  is_neg/is_not/abs = 0/0/0
  size = 4
  id = 0
  has_imm_offset = 1
  imm_offset = 416
  has_reg_offset = 0
  reg_offset = 0
instruction size is 4
Instr 96 @ 0x600 (1536) - CS2R R22, SRZ ;
  has_guard_pred = 0
  opcode = CS2R/CS2R
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 22
  prop = 
--op[1].type = GENERIC
  is_neg/is_not/abs = 0/0/0
  size = 4
  value = SRZ
instruction size is 4
Instr 97 @ 0x610 (1552) - IMAD.MOV.U32 R25, RZ, RZ, c[0x0][0x1a4] ;
  has_guard_pred = 0
  opcode = IMAD.MOV.U32/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 25
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = CBANK
  is_neg/is_not/abs = 0/0/0
  size = 4
  id = 0
  has_imm_offset = 1
  imm_offset = 420
  has_reg_offset = 0
  reg_offset = 0
instruction size is 4
Instr 98 @ 0x620 (1568) - MOV R10, 0x640 ;
  has_guard_pred = 0
  opcode = MOV/MOV
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 10
  prop = 
--op[1].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x640
instruction size is 4
Instr 99 @ 0x630 (1584) - CALL.REL.NOINC 0x2c00 ;
  has_guard_pred = 0
  opcode = CALL.REL.NOINC/CALL
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x2c00
instruction size is 4
Instr 100 @ 0x640 (1600) - IMAD.MOV.U32 R4, RZ, RZ, R24 ;
  has_guard_pred = 0
  opcode = IMAD.MOV.U32/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 4
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 24
  prop = 
instruction size is 4
Instr 101 @ 0x650 (1616) - IMAD.MOV.U32 R5, RZ, RZ, R25 ;
  has_guard_pred = 0
  opcode = IMAD.MOV.U32/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 5
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 25
  prop = 
instruction size is 4
Instr 102 @ 0x660 (1632) - MUFU.RCP64H R9, c[0x0][0x1ac] ;
  has_guard_pred = 0
  opcode = MUFU.RCP64H/MUFU
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 9
  prop = 
--op[1].type = CBANK
  is_neg/is_not/abs = 0/0/0
  size = 4
  id = 0
  has_imm_offset = 1
  imm_offset = 428
  has_reg_offset = 0
  reg_offset = 0
instruction size is 4
Instr 103 @ 0x670 (1648) - IMAD.MOV.U32 R10, RZ, RZ, c[0x0][0x1a8] ;
  has_guard_pred = 0
  opcode = IMAD.MOV.U32/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 10
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = CBANK
  is_neg/is_not/abs = 0/0/0
  size = 4
  id = 0
  has_imm_offset = 1
  imm_offset = 424
  has_reg_offset = 0
  reg_offset = 0
instruction size is 4
Instr 104 @ 0x680 (1664) - FSETP.GTU.AND P1, PT, |R5|, 6.4490557925156731238e-37, PT ;
  has_guard_pred = 0
  opcode = FSETP.GTU.AND/FSETP
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 1
--op[1].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 7
--op[2].type = REG
  is_neg/is_not/abs = 0/0/1
  size = 4
  num = 5
  prop = 
--op[3].type = IMM_DOUBLE
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 6.449056e-37
--op[4].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 7
instruction size is 4
Instr 105 @ 0x690 (1680) - IMAD.MOV.U32 R11, RZ, RZ, c[0x0][0x1ac] ;
  has_guard_pred = 0
  opcode = IMAD.MOV.U32/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 11
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = CBANK
  is_neg/is_not/abs = 0/0/0
  size = 4
  id = 0
  has_imm_offset = 1
  imm_offset = 428
  has_reg_offset = 0
  reg_offset = 0
instruction size is 4
Instr 106 @ 0x6a0 (1696) - BSSY B1, 0x7e0 ;
  has_guard_pred = 0
  opcode = BSSY/BSSY
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0xb1
--op[1].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x7e0
instruction size is 4
Instr 107 @ 0x6b0 (1712) - IMAD.MOV.U32 R8, RZ, RZ, 0x1 ;
  has_guard_pred = 0
  opcode = IMAD.MOV.U32/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 8
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x1
instruction size is 4
Instr 108 @ 0x6c0 (1728) - DFMA R10, R8, -R10, 1 ;
  has_guard_pred = 0
  opcode = DFMA/DFMA
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 10
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 8
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 1/0/0
  size = 4
  num = 10
  prop = 
--op[3].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x1
instruction size is 4
Instr 109 @ 0x6d0 (1744) - DFMA R10, R10, R10, R10 ;
  has_guard_pred = 0
  opcode = DFMA/DFMA
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 10
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 10
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 10
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 10
  prop = 
instruction size is 4
Instr 110 @ 0x6e0 (1760) - DFMA R10, R8, R10, R8 ;
  has_guard_pred = 0
  opcode = DFMA/DFMA
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 10
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 8
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 10
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 8
  prop = 
instruction size is 4
Instr 111 @ 0x6f0 (1776) - DMUL R18, R10, R4 ;
  has_guard_pred = 0
  opcode = DMUL/DMUL
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 18
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 10
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 4
  prop = 
instruction size is 4
Instr 112 @ 0x700 (1792) - DFMA R8, R18, -c[0x0][0x1a8], R4 ;
  has_guard_pred = 0
  opcode = DFMA/DFMA
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 8
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 18
  prop = 
--op[2].type = CBANK
  is_neg/is_not/abs = 1/0/0
  size = 4
  id = 0
  has_imm_offset = 1
  imm_offset = 424
  has_reg_offset = 0
  reg_offset = 0
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 4
  prop = 
instruction size is 4
Instr 113 @ 0x710 (1808) - DFMA R18, R10, R8, R18 ;
  has_guard_pred = 0
  opcode = DFMA/DFMA
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 18
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 10
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 8
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 18
  prop = 
instruction size is 4
Instr 114 @ 0x720 (1824) - FFMA R0, RZ, c[0x0][0x1ac], R19 ;
  has_guard_pred = 0
  opcode = FFMA/FFMA
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 0
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = CBANK
  is_neg/is_not/abs = 0/0/0
  size = 4
  id = 0
  has_imm_offset = 1
  imm_offset = 428
  has_reg_offset = 0
  reg_offset = 0
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 19
  prop = 
instruction size is 4
Instr 115 @ 0x730 (1840) - FSETP.GT.AND P0, PT, |R0|, 4.8978884574313168671e-40, PT ;
  has_guard_pred = 0
  opcode = FSETP.GT.AND/FSETP
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 0
--op[1].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 7
--op[2].type = REG
  is_neg/is_not/abs = 0/0/1
  size = 4
  num = 0
  prop = 
--op[3].type = IMM_DOUBLE
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 4.897888e-40
--op[4].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 7
instruction size is 4
Instr 116 @ 0x740 (1856) - @P0 BRA P1, 0x7d0 ;
  has_guard_pred = 1
  guard_pred_num = 0
  guard_pred_negated = 0
  guard_pred_uniform = 0
  opcode = BRA/BRA
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 1
--op[1].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x7d0
instruction size is 4
Instr 117 @ 0x750 (1872) - IMAD.MOV.U32 R24, RZ, RZ, R4 ;
  has_guard_pred = 0
  opcode = IMAD.MOV.U32/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 24
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 4
  prop = 
instruction size is 4
Instr 118 @ 0x760 (1888) - MOV R10, 0x7b0 ;
  has_guard_pred = 0
  opcode = MOV/MOV
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 10
  prop = 
--op[1].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x7b0
instruction size is 4
Instr 119 @ 0x770 (1904) - IMAD.MOV.U32 R25, RZ, RZ, R5 ;
  has_guard_pred = 0
  opcode = IMAD.MOV.U32/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 25
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 5
  prop = 
instruction size is 4
Instr 120 @ 0x780 (1920) - IMAD.MOV.U32 R22, RZ, RZ, c[0x0][0x1a8] ;
  has_guard_pred = 0
  opcode = IMAD.MOV.U32/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 22
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = CBANK
  is_neg/is_not/abs = 0/0/0
  size = 4
  id = 0
  has_imm_offset = 1
  imm_offset = 424
  has_reg_offset = 0
  reg_offset = 0
instruction size is 4
Instr 121 @ 0x790 (1936) - IMAD.MOV.U32 R23, RZ, RZ, c[0x0][0x1ac] ;
  has_guard_pred = 0
  opcode = IMAD.MOV.U32/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 23
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = CBANK
  is_neg/is_not/abs = 0/0/0
  size = 4
  id = 0
  has_imm_offset = 1
  imm_offset = 428
  has_reg_offset = 0
  reg_offset = 0
instruction size is 4
Instr 122 @ 0x7a0 (1952) - CALL.REL.NOINC 0x2c00 ;
  has_guard_pred = 0
  opcode = CALL.REL.NOINC/CALL
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x2c00
instruction size is 4
Instr 123 @ 0x7b0 (1968) - IMAD.MOV.U32 R18, RZ, RZ, R24 ;
  has_guard_pred = 0
  opcode = IMAD.MOV.U32/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 18
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 24
  prop = 
instruction size is 4
Instr 124 @ 0x7c0 (1984) - IMAD.MOV.U32 R19, RZ, RZ, R25 ;
  has_guard_pred = 0
  opcode = IMAD.MOV.U32/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 19
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 25
  prop = 
instruction size is 4
Instr 125 @ 0x7d0 (2000) - BSYNC B1 ;
  has_guard_pred = 0
  opcode = BSYNC/BSYNC
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0xb1
instruction size is 4
Instr 126 @ 0x7e0 (2016) - MUFU.RCP64H R5, -1.1603996477566337106e-306 ;
  has_guard_pred = 0
  opcode = MUFU.RCP64H/MUFU
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 5
  prop = 
--op[1].type = IMM_DOUBLE
  is_neg/is_not/abs = 1/0/0
  size = 8
  value = -1.160400e-306
instruction size is 4
Instr 127 @ 0x7f0 (2032) - MOV R10, 0x84cc08bf ;
  has_guard_pred = 0
  opcode = MOV/MOV
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 10
  prop = 
--op[1].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x84cc08bf
instruction size is 4
Instr 128 @ 0x800 (2048) - IMAD.MOV.U32 R11, RZ, RZ, 0x6a1356 ;
  has_guard_pred = 0
  opcode = IMAD.MOV.U32/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 11
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x6a1356
instruction size is 4
Instr 129 @ 0x810 (2064) - IMAD.MOV.U32 R4, RZ, RZ, 0x1 ;
  has_guard_pred = 0
  opcode = IMAD.MOV.U32/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 4
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x1
instruction size is 4
Instr 130 @ 0x820 (2080) - IMAD.MOV.U32 R7, RZ, RZ, c[0x0][0x1bc] ;
  has_guard_pred = 0
  opcode = IMAD.MOV.U32/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 7
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = CBANK
  is_neg/is_not/abs = 0/0/0
  size = 4
  id = 0
  has_imm_offset = 1
  imm_offset = 444
  has_reg_offset = 0
  reg_offset = 0
instruction size is 4
Instr 131 @ 0x830 (2096) - FSETP.GTU.AND P1, PT, |R7|, 6.4490557925156731238e-37, PT ;
  has_guard_pred = 0
  opcode = FSETP.GTU.AND/FSETP
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 1
--op[1].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 7
--op[2].type = REG
  is_neg/is_not/abs = 0/0/1
  size = 4
  num = 7
  prop = 
--op[3].type = IMM_DOUBLE
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 6.449056e-37
--op[4].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 7
instruction size is 4
Instr 132 @ 0x840 (2112) - DFMA R8, R4, R10, 1 ;
  has_guard_pred = 0
  opcode = DFMA/DFMA
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 8
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 4
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 10
  prop = 
--op[3].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x1
instruction size is 4
Instr 133 @ 0x850 (2128) - DFMA R8, R8, R8, R8 ;
  has_guard_pred = 0
  opcode = DFMA/DFMA
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 8
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 8
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 8
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 8
  prop = 
instruction size is 4
Instr 134 @ 0x860 (2144) - DFMA R8, R4, R8, R4 ;
  has_guard_pred = 0
  opcode = DFMA/DFMA
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 8
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 4
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 8
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 4
  prop = 
instruction size is 4
Instr 135 @ 0x870 (2160) - DMUL R24, R8, c[0x0][0x1b8] ;
  has_guard_pred = 0
  opcode = DMUL/DMUL
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 24
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 8
  prop = 
--op[2].type = CBANK
  is_neg/is_not/abs = 0/0/0
  size = 4
  id = 0
  has_imm_offset = 1
  imm_offset = 440
  has_reg_offset = 0
  reg_offset = 0
instruction size is 4
Instr 136 @ 0x880 (2176) - DFMA R4, R24, R10, c[0x0][0x1b8] ;
  has_guard_pred = 0
  opcode = DFMA/DFMA
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 4
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 24
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 10
  prop = 
--op[3].type = CBANK
  is_neg/is_not/abs = 0/0/0
  size = 4
  id = 0
  has_imm_offset = 1
  imm_offset = 440
  has_reg_offset = 0
  reg_offset = 0
instruction size is 4
Instr 137 @ 0x890 (2192) - DFMA R24, R8, R4, R24 ;
  has_guard_pred = 0
  opcode = DFMA/DFMA
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 24
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 8
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 4
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 24
  prop = 
instruction size is 4
Instr 138 @ 0x8a0 (2208) - IMAD.MOV.U32 R4, RZ, RZ, 0x540bd6b4 ;
  has_guard_pred = 0
  opcode = IMAD.MOV.U32/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 4
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x540bd6b4
instruction size is 4
Instr 139 @ 0x8b0 (2224) - IMAD.MOV.U32 R5, RZ, RZ, 0x7f44dd11 ;
  has_guard_pred = 0
  opcode = IMAD.MOV.U32/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 5
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x7f44dd11
instruction size is 4
Instr 140 @ 0x8c0 (2240) - FFMA R0, RZ, -9.7414990201454762699e-39, R25 ;
  has_guard_pred = 0
  opcode = FFMA/FFMA
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 0
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = IMM_DOUBLE
  is_neg/is_not/abs = 1/0/0
  size = 8
  value = -9.741499e-39
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 25
  prop = 
instruction size is 4
Instr 141 @ 0x8d0 (2256) - DFMA R18, R18, -R4, c[0x0][0x198] ;
  has_guard_pred = 0
  opcode = DFMA/DFMA
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 18
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 18
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 1/0/0
  size = 4
  num = 4
  prop = 
--op[3].type = CBANK
  is_neg/is_not/abs = 0/0/0
  size = 4
  id = 0
  has_imm_offset = 1
  imm_offset = 408
  has_reg_offset = 0
  reg_offset = 0
instruction size is 4
Instr 142 @ 0x8e0 (2272) - FSETP.GT.AND P0, PT, |R0|, 4.8978884574313168671e-40, PT ;
  has_guard_pred = 0
  opcode = FSETP.GT.AND/FSETP
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 0
--op[1].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 7
--op[2].type = REG
  is_neg/is_not/abs = 0/0/1
  size = 4
  num = 0
  prop = 
--op[3].type = IMM_DOUBLE
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 4.897888e-40
--op[4].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 7
instruction size is 4
Instr 143 @ 0x8f0 (2288) - @P0 BRA P1, 0x960 ;
  has_guard_pred = 1
  guard_pred_num = 0
  guard_pred_negated = 0
  guard_pred_uniform = 0
  opcode = BRA/BRA
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 1
--op[1].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x960
instruction size is 4
Instr 144 @ 0x900 (2304) - IMAD.MOV.U32 R24, RZ, RZ, c[0x0][0x1b8] ;
  has_guard_pred = 0
  opcode = IMAD.MOV.U32/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 24
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = CBANK
  is_neg/is_not/abs = 0/0/0
  size = 4
  id = 0
  has_imm_offset = 1
  imm_offset = 440
  has_reg_offset = 0
  reg_offset = 0
instruction size is 4
Instr 145 @ 0x910 (2320) - MOV R10, 0x960 ;
  has_guard_pred = 0
  opcode = MOV/MOV
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 10
  prop = 
--op[1].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x960
instruction size is 4
Instr 146 @ 0x920 (2336) - IMAD.MOV.U32 R25, RZ, RZ, c[0x0][0x1bc] ;
  has_guard_pred = 0
  opcode = IMAD.MOV.U32/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 25
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = CBANK
  is_neg/is_not/abs = 0/0/0
  size = 4
  id = 0
  has_imm_offset = 1
  imm_offset = 444
  has_reg_offset = 0
  reg_offset = 0
instruction size is 4
Instr 147 @ 0x930 (2352) - IMAD.MOV.U32 R22, RZ, RZ, -0x7b33f741 ;
  has_guard_pred = 0
  opcode = IMAD.MOV.U32/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 22
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = IMM_UINT64
  is_neg/is_not/abs = 1/0/0
  size = 8
  value = 0xffffffff84cc08bf
instruction size is 4
Instr 148 @ 0x940 (2368) - IMAD.MOV.U32 R23, RZ, RZ, -0x7f95ecaa ;
  has_guard_pred = 0
  opcode = IMAD.MOV.U32/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 23
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = IMM_UINT64
  is_neg/is_not/abs = 1/0/0
  size = 8
  value = 0xffffffff806a1356
instruction size is 4
Instr 149 @ 0x950 (2384) - CALL.REL.NOINC 0x2c00 ;
  has_guard_pred = 0
  opcode = CALL.REL.NOINC/CALL
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x2c00
instruction size is 4
Instr 150 @ 0x960 (2400) - MUFU.RCP64H R5, 1.81909882303436704794e+306 ;
  has_guard_pred = 0
  opcode = MUFU.RCP64H/MUFU
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 5
  prop = 
--op[1].type = IMM_DOUBLE
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 1.819099e+306
instruction size is 4
Instr 151 @ 0x970 (2416) - IMAD.MOV.U32 R8, RZ, RZ, -0x1f0b32fc ;
  has_guard_pred = 0
  opcode = IMAD.MOV.U32/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 8
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = IMM_UINT64
  is_neg/is_not/abs = 1/0/0
  size = 8
  value = 0xffffffffe0f4cd04
instruction size is 4
Instr 152 @ 0x980 (2432) - FSETP.GTU.AND P1, PT, |R25|, 6.4490557925156731238e-37, PT ;
  has_guard_pred = 0
  opcode = FSETP.GTU.AND/FSETP
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 1
--op[1].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 7
--op[2].type = REG
  is_neg/is_not/abs = 0/0/1
  size = 4
  num = 25
  prop = 
--op[3].type = IMM_DOUBLE
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 6.449056e-37
--op[4].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 7
instruction size is 4
Instr 153 @ 0x990 (2448) - IMAD.MOV.U32 R9, RZ, RZ, 0x7f84b94f ;
  has_guard_pred = 0
  opcode = IMAD.MOV.U32/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 9
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x7f84b94f
instruction size is 4
Instr 154 @ 0x9a0 (2464) - BSSY B1, 0xac0 ;
  has_guard_pred = 0
  opcode = BSSY/BSSY
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0xb1
--op[1].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0xac0
instruction size is 4
Instr 155 @ 0x9b0 (2480) - IMAD.MOV.U32 R4, RZ, RZ, 0x1 ;
  has_guard_pred = 0
  opcode = IMAD.MOV.U32/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 4
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x1
instruction size is 4
Instr 156 @ 0x9c0 (2496) - DFMA R8, R4, -R8, 1 ;
  has_guard_pred = 0
  opcode = DFMA/DFMA
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 8
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 4
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 1/0/0
  size = 4
  num = 8
  prop = 
--op[3].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x1
instruction size is 4
Instr 157 @ 0x9d0 (2512) - DFMA R8, R8, R8, R8 ;
  has_guard_pred = 0
  opcode = DFMA/DFMA
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 8
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 8
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 8
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 8
  prop = 
instruction size is 4
Instr 158 @ 0x9e0 (2528) - DFMA R4, R4, R8, R4 ;
  has_guard_pred = 0
  opcode = DFMA/DFMA
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 4
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 4
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 8
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 4
  prop = 
instruction size is 4
Instr 159 @ 0x9f0 (2544) - DMUL R8, R4, R24 ;
  has_guard_pred = 0
  opcode = DMUL/DMUL
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 8
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 4
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 24
  prop = 
instruction size is 4
Instr 160 @ 0xa00 (2560) - DFMA R10, R8, c[0x2][0x10], R24 ;
  has_guard_pred = 0
  opcode = DFMA/DFMA
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 10
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 8
  prop = 
--op[2].type = CBANK
  is_neg/is_not/abs = 0/0/0
  size = 4
  id = 2
  has_imm_offset = 1
  imm_offset = 16
  has_reg_offset = 0
  reg_offset = 0
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 24
  prop = 
instruction size is 4
Instr 161 @ 0xa10 (2576) - DFMA R4, R4, R10, R8 ;
  has_guard_pred = 0
  opcode = DFMA/DFMA
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 4
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 4
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 10
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 8
  prop = 
instruction size is 4
Instr 162 @ 0xa20 (2592) - FFMA R0, RZ, +QNAN , R5 ;
  has_guard_pred = 0
  opcode = FFMA/FFMA
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 0
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = GENERIC
  is_neg/is_not/abs = 0/0/0
  size = 4
  value = +QNAN
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 5
  prop = 
instruction size is 4
Instr 163 @ 0xa30 (2608) - FSETP.GT.AND P0, PT, |R0|, 4.8978884574313168671e-40, PT ;
  has_guard_pred = 0
  opcode = FSETP.GT.AND/FSETP
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 0
--op[1].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 7
--op[2].type = REG
  is_neg/is_not/abs = 0/0/1
  size = 4
  num = 0
  prop = 
--op[3].type = IMM_DOUBLE
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 4.897888e-40
--op[4].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 7
instruction size is 4
Instr 164 @ 0xa40 (2624) - @P0 BRA P1, 0xab0 ;
  has_guard_pred = 1
  guard_pred_num = 0
  guard_pred_negated = 0
  guard_pred_uniform = 0
  opcode = BRA/BRA
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 1
--op[1].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0xab0
instruction size is 4
Instr 165 @ 0xa50 (2640) - IMAD.MOV.U32 R22, RZ, RZ, -0x1f0b32fc ;
  has_guard_pred = 0
  opcode = IMAD.MOV.U32/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 22
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = IMM_UINT64
  is_neg/is_not/abs = 1/0/0
  size = 8
  value = 0xffffffffe0f4cd04
instruction size is 4
Instr 166 @ 0xa60 (2656) - MOV R23, 0x7f84b94f ;
  has_guard_pred = 0
  opcode = MOV/MOV
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 23
  prop = 
--op[1].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x7f84b94f
instruction size is 4
Instr 167 @ 0xa70 (2672) - MOV R10, 0xa90 ;
  has_guard_pred = 0
  opcode = MOV/MOV
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 10
  prop = 
--op[1].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0xa90
instruction size is 4
Instr 168 @ 0xa80 (2688) - CALL.REL.NOINC 0x2c00 ;
  has_guard_pred = 0
  opcode = CALL.REL.NOINC/CALL
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x2c00
instruction size is 4
Instr 169 @ 0xa90 (2704) - IMAD.MOV.U32 R4, RZ, RZ, R24 ;
  has_guard_pred = 0
  opcode = IMAD.MOV.U32/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 4
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 24
  prop = 
instruction size is 4
Instr 170 @ 0xaa0 (2720) - IMAD.MOV.U32 R5, RZ, RZ, R25 ;
  has_guard_pred = 0
  opcode = IMAD.MOV.U32/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 5
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 25
  prop = 
instruction size is 4
Instr 171 @ 0xab0 (2736) - BSYNC B1 ;
  has_guard_pred = 0
  opcode = BSYNC/BSYNC
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0xb1
instruction size is 4
Instr 172 @ 0xac0 (2752) - MUFU.RCP64H R9, RZ ;
  has_guard_pred = 0
  opcode = MUFU.RCP64H/MUFU
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 9
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
instruction size is 4
Instr 173 @ 0xad0 (2768) - IMAD.MOV.U32 R8, RZ, RZ, 0x1 ;
  has_guard_pred = 0
  opcode = IMAD.MOV.U32/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 8
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x1
instruction size is 4
Instr 174 @ 0xae0 (2784) - DADD R16, R4, c[0x0][0x1b0] ;
  has_guard_pred = 0
  opcode = DADD/DADD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 16
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 4
  prop = 
--op[2].type = CBANK
  is_neg/is_not/abs = 0/0/0
  size = 4
  id = 0
  has_imm_offset = 1
  imm_offset = 432
  has_reg_offset = 0
  reg_offset = 0
instruction size is 4
Instr 175 @ 0xaf0 (2800) - FRND.F64.FLOOR R16, R16 ;
  has_guard_pred = 0
  opcode = FRND.F64.FLOOR/FRND
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 8
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 8
  num = 16
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 8
  num = 16
  prop = 
instruction size is 8
Instr 176 @ 0xb00 (2816) - DFMA R10, -RZ, R8, 1 ;
  has_guard_pred = 0
  opcode = DFMA/DFMA
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 10
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 1/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 8
  prop = 
--op[3].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x1
instruction size is 4
Instr 177 @ 0xb10 (2832) - DFMA R10, R10, R10, R10 ;
  has_guard_pred = 0
  opcode = DFMA/DFMA
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 10
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 10
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 10
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 10
  prop = 
instruction size is 4
Instr 178 @ 0xb20 (2848) - DFMA R10, R8, R10, R8 ;
  has_guard_pred = 0
  opcode = DFMA/DFMA
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 10
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 8
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 10
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 8
  prop = 
instruction size is 4
Instr 179 @ 0xb30 (2864) - LOP3.LUT R0, R17, 0x7fffffff, RZ, 0xc0, !PT ;
  has_guard_pred = 0
  opcode = LOP3.LUT/LOP3
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 0
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 17
  prop = 
--op[2].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x7fffffff
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[4].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0xc0
--op[5].type = PRED
  is_neg/is_not/abs = 0/1/0
  size = 1
  num = 7
instruction size is 4
Instr 180 @ 0xb40 (2880) - ISETP.EQ.AND P2, PT, R16, RZ, PT ;
  has_guard_pred = 0
  opcode = ISETP.EQ.AND/ISETP
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 2
--op[1].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 7
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 16
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[4].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 7
instruction size is 4
Instr 181 @ 0xb50 (2896) - ISETP.NE.AND P3, PT, R0, 0x7ff00000, PT ;
  has_guard_pred = 0
  opcode = ISETP.NE.AND/ISETP
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 3
--op[1].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 7
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 0
  prop = 
--op[3].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x7ff00000
--op[4].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 7
instruction size is 4
Instr 182 @ 0xb60 (2912) - DMUL R4, R10, c[0x0][0x1c0] ;
  has_guard_pred = 0
  opcode = DMUL/DMUL
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 4
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 10
  prop = 
--op[2].type = CBANK
  is_neg/is_not/abs = 0/0/0
  size = 4
  id = 0
  has_imm_offset = 1
  imm_offset = 448
  has_reg_offset = 0
  reg_offset = 0
instruction size is 4
Instr 183 @ 0xb70 (2928) - DFMA R8, -RZ, R4, c[0x0][0x1c0] ;
  has_guard_pred = 0
  opcode = DFMA/DFMA
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 8
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 1/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 4
  prop = 
--op[3].type = CBANK
  is_neg/is_not/abs = 0/0/0
  size = 4
  id = 0
  has_imm_offset = 1
  imm_offset = 448
  has_reg_offset = 0
  reg_offset = 0
instruction size is 4
Instr 184 @ 0xb80 (2944) - DFMA R4, R10, R8, R4 ;
  has_guard_pred = 0
  opcode = DFMA/DFMA
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 4
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 10
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 8
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 4
  prop = 
instruction size is 4
Instr 185 @ 0xb90 (2960) - IMAD.MOV.U32 R10, RZ, RZ, c[0x0][0x1c4] ;
  has_guard_pred = 0
  opcode = IMAD.MOV.U32/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 10
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = CBANK
  is_neg/is_not/abs = 0/0/0
  size = 4
  id = 0
  has_imm_offset = 1
  imm_offset = 452
  has_reg_offset = 0
  reg_offset = 0
instruction size is 4
Instr 186 @ 0xba0 (2976) - IMAD.MOV.U32 R8, RZ, RZ, c[0x0][0x1c8] ;
  has_guard_pred = 0
  opcode = IMAD.MOV.U32/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 8
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = CBANK
  is_neg/is_not/abs = 0/0/0
  size = 4
  id = 0
  has_imm_offset = 1
  imm_offset = 456
  has_reg_offset = 0
  reg_offset = 0
instruction size is 4
Instr 187 @ 0xbb0 (2992) - IMAD.MOV.U32 R9, RZ, RZ, c[0x0][0x1cc] ;
  has_guard_pred = 0
  opcode = IMAD.MOV.U32/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 9
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = CBANK
  is_neg/is_not/abs = 0/0/0
  size = 4
  id = 0
  has_imm_offset = 1
  imm_offset = 460
  has_reg_offset = 0
  reg_offset = 0
instruction size is 4
Instr 188 @ 0xbc0 (3008) - FSETP.GTU.AND P1, PT, |R10|, 6.4490557925156731238e-37, PT ;
  has_guard_pred = 0
  opcode = FSETP.GTU.AND/FSETP
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 1
--op[1].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 7
--op[2].type = REG
  is_neg/is_not/abs = 0/0/1
  size = 4
  num = 10
  prop = 
--op[3].type = IMM_DOUBLE
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 6.449056e-37
--op[4].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 7
instruction size is 4
Instr 189 @ 0xbd0 (3024) - FFMA R7, RZ, RZ, R5 ;
  has_guard_pred = 0
  opcode = FFMA/FFMA
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 7
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 5
  prop = 
instruction size is 4
Instr 190 @ 0xbe0 (3040) - DADD R8, R8, c[0x2][0x18] ;
  has_guard_pred = 0
  opcode = DADD/DADD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 8
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 8
  prop = 
--op[2].type = CBANK
  is_neg/is_not/abs = 0/0/0
  size = 4
  id = 2
  has_imm_offset = 1
  imm_offset = 24
  has_reg_offset = 0
  reg_offset = 0
instruction size is 4
Instr 191 @ 0xbf0 (3056) - FSETP.GT.AND P0, PT, |R7|, 4.8978884574313168671e-40, PT ;
  has_guard_pred = 0
  opcode = FSETP.GT.AND/FSETP
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 0
--op[1].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 7
--op[2].type = REG
  is_neg/is_not/abs = 0/0/1
  size = 4
  num = 7
  prop = 
--op[3].type = IMM_DOUBLE
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 4.897888e-40
--op[4].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 7
instruction size is 4
Instr 192 @ 0xc00 (3072) - @P0 BRA P1, 0xc80 ;
  has_guard_pred = 1
  guard_pred_num = 0
  guard_pred_negated = 0
  guard_pred_uniform = 0
  opcode = BRA/BRA
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 1
--op[1].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0xc80
instruction size is 4
Instr 193 @ 0xc10 (3088) - IMAD.MOV.U32 R24, RZ, RZ, c[0x0][0x1c0] ;
  has_guard_pred = 0
  opcode = IMAD.MOV.U32/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 24
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = CBANK
  is_neg/is_not/abs = 0/0/0
  size = 4
  id = 0
  has_imm_offset = 1
  imm_offset = 448
  has_reg_offset = 0
  reg_offset = 0
instruction size is 4
Instr 194 @ 0xc20 (3104) - CS2R R22, SRZ ;
  has_guard_pred = 0
  opcode = CS2R/CS2R
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 22
  prop = 
--op[1].type = GENERIC
  is_neg/is_not/abs = 0/0/0
  size = 4
  value = SRZ
instruction size is 4
Instr 195 @ 0xc30 (3120) - IMAD.MOV.U32 R25, RZ, RZ, c[0x0][0x1c4] ;
  has_guard_pred = 0
  opcode = IMAD.MOV.U32/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 25
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = CBANK
  is_neg/is_not/abs = 0/0/0
  size = 4
  id = 0
  has_imm_offset = 1
  imm_offset = 452
  has_reg_offset = 0
  reg_offset = 0
instruction size is 4
Instr 196 @ 0xc40 (3136) - MOV R10, 0xc60 ;
  has_guard_pred = 0
  opcode = MOV/MOV
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 10
  prop = 
--op[1].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0xc60
instruction size is 4
Instr 197 @ 0xc50 (3152) - CALL.REL.NOINC 0x2c00 ;
  has_guard_pred = 0
  opcode = CALL.REL.NOINC/CALL
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x2c00
instruction size is 4
Instr 198 @ 0xc60 (3168) - IMAD.MOV.U32 R4, RZ, RZ, R24 ;
  has_guard_pred = 0
  opcode = IMAD.MOV.U32/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 4
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 24
  prop = 
instruction size is 4
Instr 199 @ 0xc70 (3184) - IMAD.MOV.U32 R5, RZ, RZ, R25 ;
  has_guard_pred = 0
  opcode = IMAD.MOV.U32/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 5
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 25
  prop = 
instruction size is 4
Instr 200 @ 0xc80 (3200) - DADD R8, R8, R4 ;
  has_guard_pred = 0
  opcode = DADD/DADD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 8
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 8
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 4
  prop = 
instruction size is 4
Instr 201 @ 0xc90 (3216) - IMAD.MOV.U32 R0, RZ, RZ, c[0x0][0x170] ;
  has_guard_pred = 0
  opcode = IMAD.MOV.U32/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 0
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = CBANK
  is_neg/is_not/abs = 0/0/0
  size = 4
  id = 0
  has_imm_offset = 1
  imm_offset = 368
  has_reg_offset = 0
  reg_offset = 0
instruction size is 4
Instr 202 @ 0xca0 (3232) - DADD R12, R8, c[0x2][0x20] ;
  has_guard_pred = 0
  opcode = DADD/DADD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 12
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 8
  prop = 
--op[2].type = CBANK
  is_neg/is_not/abs = 0/0/0
  size = 4
  id = 2
  has_imm_offset = 1
  imm_offset = 32
  has_reg_offset = 0
  reg_offset = 0
instruction size is 4
Instr 203 @ 0xcb0 (3248) - LOP3.LUT R8, R0, 0x1, RZ, 0xc0, !PT ;
  has_guard_pred = 0
  opcode = LOP3.LUT/LOP3
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 8
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 0
  prop = 
--op[2].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x1
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[4].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0xc0
--op[5].type = PRED
  is_neg/is_not/abs = 0/1/0
  size = 1
  num = 7
instruction size is 4
Instr 204 @ 0xcc0 (3264) - @!P3 BRA P2, 0x1c00 ;
  has_guard_pred = 1
  guard_pred_num = 3
  guard_pred_negated = 1
  guard_pred_uniform = 0
  opcode = BRA/BRA
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 2
--op[1].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x1c00
instruction size is 4
Instr 205 @ 0xcd0 (3280) - ISETP.NE.AND P0, PT, R0, 0x1, PT ;
  has_guard_pred = 0
  opcode = ISETP.NE.AND/ISETP
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 0
--op[1].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 7
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 0
  prop = 
--op[3].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x1
--op[4].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 7
instruction size is 4
Instr 206 @ 0xce0 (3296) - CS2R R14, SRZ ;
  has_guard_pred = 0
  opcode = CS2R/CS2R
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 14
  prop = 
--op[1].type = GENERIC
  is_neg/is_not/abs = 0/0/0
  size = 4
  value = SRZ
instruction size is 4
Instr 207 @ 0xcf0 (3312) - @!P0 BRA 0x16d0 ;
  has_guard_pred = 1
  guard_pred_num = 0
  guard_pred_negated = 1
  guard_pred_uniform = 0
  opcode = BRA/BRA
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x16d0
instruction size is 4
Instr 208 @ 0xd00 (3328) - DMUL R10, R16, c[0x2][0x28] ;
  has_guard_pred = 0
  opcode = DMUL/DMUL
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 10
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 16
  prop = 
--op[2].type = CBANK
  is_neg/is_not/abs = 0/0/0
  size = 4
  id = 2
  has_imm_offset = 1
  imm_offset = 40
  has_reg_offset = 0
  reg_offset = 0
instruction size is 4
Instr 209 @ 0xd10 (3344) - LOP3.LUT R7, R17, 0x7fe00000, RZ, 0xc0, !PT ;
  has_guard_pred = 0
  opcode = LOP3.LUT/LOP3
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 7
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 17
  prop = 
--op[2].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x7fe00000
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[4].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0xc0
--op[5].type = PRED
  is_neg/is_not/abs = 0/1/0
  size = 1
  num = 7
instruction size is 4
Instr 210 @ 0xd20 (3360) - UMOV UR4, 0xa6200300 ;
  has_guard_pred = 0
  opcode = UMOV/UMOV
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = UREG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 4
  prop = 
--op[1].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0xa6200300
instruction size is 4
Instr 211 @ 0xd30 (3376) - IMAD.MOV.U32 R14, RZ, RZ, RZ ;
  has_guard_pred = 0
  opcode = IMAD.MOV.U32/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 14
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
instruction size is 4
Instr 212 @ 0xd40 (3392) - UMOV UR5, 0x7ffa ;
  has_guard_pred = 0
  opcode = UMOV/UMOV
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = UREG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 5
  prop = 
--op[1].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x7ffa
instruction size is 4
Instr 213 @ 0xd50 (3408) - ISETP.GE.U32.AND P2, PT, R7, 0x41e00000, PT ;
  has_guard_pred = 0
  opcode = ISETP.GE.U32.AND/ISETP
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 2
--op[1].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 7
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 7
  prop = 
--op[3].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x41e00000
--op[4].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 7
instruction size is 4
Instr 214 @ 0xd60 (3424) - F2I.F64 R0, R10 ;
  has_guard_pred = 0
  opcode = F2I.F64/F2I
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 8
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 8
  num = 0
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 8
  num = 10
  prop = 
instruction size is 8
Instr 215 @ 0xd70 (3440) - IMAD.MOV.U32 R38, RZ, RZ, c[0x0][0x190] ;
  has_guard_pred = 0
  opcode = IMAD.MOV.U32/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 38
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = CBANK
  is_neg/is_not/abs = 0/0/0
  size = 4
  id = 0
  has_imm_offset = 1
  imm_offset = 400
  has_reg_offset = 0
  reg_offset = 0
instruction size is 4
Instr 216 @ 0xd80 (3456) - MOV R39, c[0x0][0x194] ;
  has_guard_pred = 0
  opcode = MOV/MOV
  memop = CONSTANT
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 39
  prop = 
--op[1].type = CBANK
  is_neg/is_not/abs = 0/0/0
  size = 4
  id = 0
  has_imm_offset = 1
  imm_offset = 404
  has_reg_offset = 0
  reg_offset = 0
instruction size is 4
Instr 217 @ 0xd90 (3472) - IMAD.U32 R36, RZ, RZ, UR4 ;
  has_guard_pred = 0
  opcode = IMAD.U32/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 36
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = UREG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 4
  prop = 
instruction size is 4
Instr 218 @ 0xda0 (3488) - IMAD.U32 R37, RZ, RZ, UR5 ;
  has_guard_pred = 0
  opcode = IMAD.U32/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 37
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = UREG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 5
  prop = 
instruction size is 4
Instr 219 @ 0xdb0 (3504) - I2F.F64 R34, R0 ;
  has_guard_pred = 0
  opcode = I2F.F64/I2F
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 8
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 8
  num = 34
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 8
  num = 0
  prop = 
instruction size is 8
Instr 220 @ 0xdc0 (3520) - DFMA R4, -R34, c[0x2][0x30], R16 ;
  has_guard_pred = 0
  opcode = DFMA/DFMA
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 4
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 1/0/0
  size = 4
  num = 34
  prop = 
--op[2].type = CBANK
  is_neg/is_not/abs = 0/0/0
  size = 4
  id = 2
  has_imm_offset = 1
  imm_offset = 48
  has_reg_offset = 0
  reg_offset = 0
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 16
  prop = 
instruction size is 4
Instr 221 @ 0xdd0 (3536) - DFMA R4, -R34, c[0x2][0x38], R4 ;
  has_guard_pred = 0
  opcode = DFMA/DFMA
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 4
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 1/0/0
  size = 4
  num = 34
  prop = 
--op[2].type = CBANK
  is_neg/is_not/abs = 0/0/0
  size = 4
  id = 2
  has_imm_offset = 1
  imm_offset = 56
  has_reg_offset = 0
  reg_offset = 0
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 4
  prop = 
instruction size is 4
Instr 222 @ 0xde0 (3552) - DFMA R34, -R34, c[0x2][0x40], R4 ;
  has_guard_pred = 0
  opcode = DFMA/DFMA
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 34
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 1/0/0
  size = 4
  num = 34
  prop = 
--op[2].type = CBANK
  is_neg/is_not/abs = 0/0/0
  size = 4
  id = 2
  has_imm_offset = 1
  imm_offset = 64
  has_reg_offset = 0
  reg_offset = 0
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 4
  prop = 
instruction size is 4
Instr 223 @ 0xdf0 (3568) - IADD3 R4, -R8, c[0x0][0x170], RZ ;
  has_guard_pred = 0
  opcode = IADD3/IADD3
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 4
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 1/0/0
  size = 4
  num = 8
  prop = 
--op[2].type = CBANK
  is_neg/is_not/abs = 0/0/0
  size = 4
  id = 0
  has_imm_offset = 1
  imm_offset = 368
  has_reg_offset = 0
  reg_offset = 0
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
instruction size is 4
Instr 224 @ 0xe00 (3584) - STL [R1], R0 ;
  has_guard_pred = 0
  opcode = STL/STL
  memop = LOCAL
  format = INT32
  load/store = 0/1
  size = 4
  is_extended = 0
--op[0].type = MREF
  is_neg/is_not/abs = 0/0/0
  size = 4
  has_ra = 1
  ra_num = 1
  ra_mod = NO_MOD
  has_ur = 0
  ur_num = 0
  ur_mod = NO_MOD
  has_imm = 0
  imm = 0
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 0
  prop = 
instruction size is 4
Instr 225 @ 0xe10 (3600) - IADD3 R4, R4, -0x2, RZ ;
  has_guard_pred = 0
  opcode = IADD3/IADD3
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 4
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 4
  prop = 
--op[2].type = IMM_UINT64
  is_neg/is_not/abs = 1/0/0
  size = 8
  value = 0xfffffffffffffffe
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
instruction size is 4
Instr 226 @ 0xe20 (3616) - BSSY B1, 0xee0 ;
  has_guard_pred = 0
  opcode = BSSY/BSSY
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0xb1
--op[1].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0xee0
instruction size is 4
Instr 227 @ 0xe30 (3632) - IMAD.MOV.U32 R5, RZ, RZ, R0 ;
  has_guard_pred = 0
  opcode = IMAD.MOV.U32/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 5
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 0
  prop = 
instruction size is 4
Instr 228 @ 0xe40 (3648) - ISETP.NE.AND P3, PT, R4, RZ, PT ;
  has_guard_pred = 0
  opcode = ISETP.NE.AND/ISETP
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 3
--op[1].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 7
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 4
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[4].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 7
instruction size is 4
Instr 229 @ 0xe50 (3664) - IMAD.MOV.U32 R10, RZ, RZ, R34 ;
  has_guard_pred = 0
  opcode = IMAD.MOV.U32/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 10
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 34
  prop = 
instruction size is 4
Instr 230 @ 0xe60 (3680) - IMAD.MOV.U32 R11, RZ, RZ, R35 ;
  has_guard_pred = 0
  opcode = IMAD.MOV.U32/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 11
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 35
  prop = 
instruction size is 4
Instr 231 @ 0xe70 (3696) - @!P2 BRA 0xed0 ;
  has_guard_pred = 1
  guard_pred_num = 2
  guard_pred_negated = 1
  guard_pred_uniform = 0
  opcode = BRA/BRA
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0xed0
instruction size is 4
Instr 232 @ 0xe80 (3712) - IMAD.MOV.U32 R9, RZ, RZ, R16 ;
  has_guard_pred = 0
  opcode = IMAD.MOV.U32/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 9
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 16
  prop = 
instruction size is 4
Instr 233 @ 0xe90 (3728) - MOV R26, 0xec0 ;
  has_guard_pred = 0
  opcode = MOV/MOV
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 26
  prop = 
--op[1].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0xec0
instruction size is 4
Instr 234 @ 0xea0 (3744) - IMAD.MOV.U32 R5, RZ, RZ, R17 ;
  has_guard_pred = 0
  opcode = IMAD.MOV.U32/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 5
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 17
  prop = 
instruction size is 4
Instr 235 @ 0xeb0 (3760) - CALL.REL.NOINC 0x33d0 ;
  has_guard_pred = 0
  opcode = CALL.REL.NOINC/CALL
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x33d0
instruction size is 4
Instr 236 @ 0xec0 (3776) - LDL R5, [R1] ;
  has_guard_pred = 0
  opcode = LDL/LDL
  memop = LOCAL
  format = INT32
  load/store = 1/0
  size = 4
  is_extended = 0
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 5
  prop = 
--op[1].type = MREF
  is_neg/is_not/abs = 0/0/0
  size = 4
  has_ra = 1
  ra_num = 1
  ra_mod = NO_MOD
  has_ur = 0
  ur_num = 0
  ur_mod = NO_MOD
  has_imm = 0
  imm = 0
instruction size is 4
Instr 237 @ 0xed0 (3792) - BSYNC B1 ;
  has_guard_pred = 0
  opcode = BSYNC/BSYNC
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0xb1
instruction size is 4
Instr 238 @ 0xee0 (3808) - IMAD.SHL.U32 R7, R5, 0x8, RZ ;
  has_guard_pred = 0
  opcode = IMAD.SHL.U32/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 7
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 5
  prop = 
--op[2].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x8
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
instruction size is 4
Instr 239 @ 0xef0 (3824) - ULDC.64 UR4, c[0x0][0x118] ;
  has_guard_pred = 0
  opcode = ULDC.64/ULDC
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 8
--op[0].type = UREG
  is_neg/is_not/abs = 0/0/0
  size = 8
  num = 4
  prop = 
--op[1].type = CBANK
  is_neg/is_not/abs = 0/0/0
  size = 8
  id = 0
  has_imm_offset = 1
  imm_offset = 280
  has_reg_offset = 0
  reg_offset = 0
instruction size is 8
Instr 240 @ 0xf00 (3840) - LOP3.LUT R7, R7, 0x8, RZ, 0xc0, !PT ;
  has_guard_pred = 0
  opcode = LOP3.LUT/LOP3
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 7
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 7
  prop = 
--op[2].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x8
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[4].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0xc0
--op[5].type = PRED
  is_neg/is_not/abs = 0/1/0
  size = 1
  num = 7
instruction size is 4
Instr 241 @ 0xf10 (3856) - IMAD.WIDE R20, R7, 0x8, R36 ;
  has_guard_pred = 0
  opcode = IMAD.WIDE/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 20
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 7
  prop = 
--op[2].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x8
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 36
  prop = 
instruction size is 4
Instr 242 @ 0xf20 (3872) - LDG.E.64.CONSTANT R22, [R20.64+0x8] ;
  has_guard_pred = 0
  opcode = LDG.E.64.CONSTANT/LDG
  memop = GLOBAL
  format = INT64
  load/store = 1/0
  size = 8
  is_extended = 1
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 8
  num = 22
  prop = 
--op[1].type = MREF
  is_neg/is_not/abs = 0/0/0
  size = 8
  has_ra = 1
  ra_num = 20
  ra_mod = 64
  has_ur = 0
  ur_num = 0
  ur_mod = NO_MOD
  has_imm = 1
  imm = 8
instruction size is 8
Instr 243 @ 0xf30 (3888) - LDG.E.64.CONSTANT R24, [R20.64+0x10] ;
  has_guard_pred = 0
  opcode = LDG.E.64.CONSTANT/LDG
  memop = GLOBAL
  format = INT64
  load/store = 1/0
  size = 8
  is_extended = 1
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 8
  num = 24
  prop = 
--op[1].type = MREF
  is_neg/is_not/abs = 0/0/0
  size = 8
  has_ra = 1
  ra_num = 20
  ra_mod = 64
  has_ur = 0
  ur_num = 0
  ur_mod = NO_MOD
  has_imm = 1
  imm = 16
instruction size is 8
Instr 244 @ 0xf40 (3904) - LDG.E.64.CONSTANT R26, [R20.64+0x18] ;
  has_guard_pred = 0
  opcode = LDG.E.64.CONSTANT/LDG
  memop = GLOBAL
  format = INT64
  load/store = 1/0
  size = 8
  is_extended = 1
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 8
  num = 26
  prop = 
--op[1].type = MREF
  is_neg/is_not/abs = 0/0/0
  size = 8
  has_ra = 1
  ra_num = 20
  ra_mod = 64
  has_ur = 0
  ur_num = 0
  ur_mod = NO_MOD
  has_imm = 1
  imm = 24
instruction size is 8
Instr 245 @ 0xf50 (3920) - LDG.E.64.CONSTANT R28, [R20.64+0x20] ;
  has_guard_pred = 0
  opcode = LDG.E.64.CONSTANT/LDG
  memop = GLOBAL
  format = INT64
  load/store = 1/0
  size = 8
  is_extended = 1
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 8
  num = 28
  prop = 
--op[1].type = MREF
  is_neg/is_not/abs = 0/0/0
  size = 8
  has_ra = 1
  ra_num = 20
  ra_mod = 64
  has_ur = 0
  ur_num = 0
  ur_mod = NO_MOD
  has_imm = 1
  imm = 32
instruction size is 8
Instr 246 @ 0xf60 (3936) - LDG.E.64.CONSTANT R30, [R20.64+0x28] ;
  has_guard_pred = 0
  opcode = LDG.E.64.CONSTANT/LDG
  memop = GLOBAL
  format = INT64
  load/store = 1/0
  size = 8
  is_extended = 1
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 8
  num = 30
  prop = 
--op[1].type = MREF
  is_neg/is_not/abs = 0/0/0
  size = 8
  has_ra = 1
  ra_num = 20
  ra_mod = 64
  has_ur = 0
  ur_num = 0
  ur_mod = NO_MOD
  has_imm = 1
  imm = 40
instruction size is 8
Instr 247 @ 0xf70 (3952) - LDG.E.64.CONSTANT R32, [R20.64+0x30] ;
  has_guard_pred = 0
  opcode = LDG.E.64.CONSTANT/LDG
  memop = GLOBAL
  format = INT64
  load/store = 1/0
  size = 8
  is_extended = 1
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 8
  num = 32
  prop = 
--op[1].type = MREF
  is_neg/is_not/abs = 0/0/0
  size = 8
  has_ra = 1
  ra_num = 20
  ra_mod = 64
  has_ur = 0
  ur_num = 0
  ur_mod = NO_MOD
  has_imm = 1
  imm = 48
instruction size is 8
Instr 248 @ 0xf80 (3968) - R2P PR, R5, 0x3 ;
  has_guard_pred = 0
  opcode = R2P/R2P
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 8
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 5
  prop = 
--op[2].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x3
instruction size is 4
Instr 249 @ 0xf90 (3984) - IMAD.MOV.U32 R40, RZ, RZ, 0x79785eba ;
  has_guard_pred = 0
  opcode = IMAD.MOV.U32/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 40
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x79785eba
instruction size is 4
Instr 250 @ 0xfa0 (4000) - DMUL R42, R10, R10 ;
  has_guard_pred = 0
  opcode = DMUL/DMUL
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 42
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 10
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 10
  prop = 
instruction size is 4
Instr 251 @ 0xfb0 (4016) - IMAD.MOV.U32 R5, RZ, RZ, 0x3de5db65 ;
  has_guard_pred = 0
  opcode = IMAD.MOV.U32/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 5
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x3de5db65
instruction size is 4
Instr 252 @ 0xfc0 (4032) - FSEL R40, -R40, 4.2945490664224492434e-19, !P0 ;
  has_guard_pred = 0
  opcode = FSEL/FSEL
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 40
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 1/0/0
  size = 4
  num = 40
  prop = 
--op[2].type = IMM_DOUBLE
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 4.294549e-19
--op[3].type = PRED
  is_neg/is_not/abs = 0/1/0
  size = 1
  num = 0
instruction size is 4
Instr 253 @ 0xfd0 (4048) - FSEL R41, R5, -0.082518599927425384521, !P0 ;
  has_guard_pred = 0
  opcode = FSEL/FSEL
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 41
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 5
  prop = 
--op[2].type = IMM_DOUBLE
  is_neg/is_not/abs = 1/0/0
  size = 8
  value = -8.251860e-02
--op[3].type = PRED
  is_neg/is_not/abs = 0/1/0
  size = 1
  num = 0
instruction size is 4
Instr 254 @ 0xfe0 (4064) - DFMA R22, R42, R40, R22 ;
  has_guard_pred = 0
  opcode = DFMA/DFMA
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 22
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 42
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 40
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 22
  prop = 
instruction size is 4
Instr 255 @ 0xff0 (4080) - DFMA R22, R42.reuse, R22, R24 ;
  has_guard_pred = 0
  opcode = DFMA/DFMA
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 22
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 42
  prop = .reuse
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 22
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 24
  prop = 
instruction size is 4
Instr 256 @ 0x1000 (4096) - IMAD.MOV.U32 R24, RZ, RZ, 0x3b375450 ;
  has_guard_pred = 0
  opcode = IMAD.MOV.U32/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 24
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x3b375450
instruction size is 4
Instr 257 @ 0x1010 (4112) - IMAD.MOV.U32 R25, RZ, RZ, -0x7fca1b92 ;
  has_guard_pred = 0
  opcode = IMAD.MOV.U32/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 25
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = IMM_UINT64
  is_neg/is_not/abs = 1/0/0
  size = 8
  value = 0xffffffff8035e46e
instruction size is 4
Instr 258 @ 0x1020 (4128) - DFMA R22, R42, R22, R26 ;
  has_guard_pred = 0
  opcode = DFMA/DFMA
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 22
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 42
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 22
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 26
  prop = 
instruction size is 4
Instr 259 @ 0x1030 (4144) - DFMA R22, R42, R22, R28 ;
  has_guard_pred = 0
  opcode = DFMA/DFMA
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 22
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 42
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 22
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 28
  prop = 
instruction size is 4
Instr 260 @ 0x1040 (4160) - DFMA R22, R42, R22, R30 ;
  has_guard_pred = 0
  opcode = DFMA/DFMA
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 22
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 42
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 22
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 30
  prop = 
instruction size is 4
Instr 261 @ 0x1050 (4176) - DFMA R32, R42, R22, R32 ;
  has_guard_pred = 0
  opcode = DFMA/DFMA
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 32
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 42
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 22
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 32
  prop = 
instruction size is 4
Instr 262 @ 0x1060 (4192) - DFMA R22, R32, R10, R10 ;
  has_guard_pred = 0
  opcode = DFMA/DFMA
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 22
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 32
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 10
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 10
  prop = 
instruction size is 4
Instr 263 @ 0x1070 (4208) - MOV R10, 0x10b0 ;
  has_guard_pred = 0
  opcode = MOV/MOV
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 10
  prop = 
--op[1].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x10b0
instruction size is 4
Instr 264 @ 0x1080 (4224) - @P0 DFMA R22, R42, R32, 1 ;
  has_guard_pred = 1
  guard_pred_num = 0
  guard_pred_negated = 0
  guard_pred_uniform = 0
  opcode = DFMA/DFMA
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 22
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 42
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 32
  prop = 
--op[3].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x1
instruction size is 4
Instr 265 @ 0x1090 (4240) - @P1 DFMA R22, R22, -1, RZ ;
  has_guard_pred = 1
  guard_pred_num = 1
  guard_pred_negated = 0
  guard_pred_uniform = 0
  opcode = DFMA/DFMA
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 22
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 22
  prop = 
--op[2].type = IMM_UINT64
  is_neg/is_not/abs = 1/0/0
  size = 8
  value = 0xffffffffffffffff
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
instruction size is 4
Instr 266 @ 0x10a0 (4256) - CALL.REL.NOINC 0x2c00 ;
  has_guard_pred = 0
  opcode = CALL.REL.NOINC/CALL
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x2c00
instruction size is 4
Instr 267 @ 0x10b0 (4272) - MUFU.RCP64H R11, R13 ;
  has_guard_pred = 0
  opcode = MUFU.RCP64H/MUFU
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 11
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 13
  prop = 
instruction size is 4
Instr 268 @ 0x10c0 (4288) - IMAD.MOV.U32 R10, RZ, RZ, 0x1 ;
  has_guard_pred = 0
  opcode = IMAD.MOV.U32/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 10
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x1
instruction size is 4
Instr 269 @ 0x10d0 (4304) - MOV R26, R24 ;
  has_guard_pred = 0
  opcode = MOV/MOV
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 26
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 24
  prop = 
instruction size is 4
Instr 270 @ 0x10e0 (4320) - IMAD.MOV.U32 R27, RZ, RZ, R25 ;
  has_guard_pred = 0
  opcode = IMAD.MOV.U32/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 27
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 25
  prop = 
instruction size is 4
Instr 271 @ 0x10f0 (4336) - ULDC.64 UR4, c[0x0][0x118] ;
  has_guard_pred = 0
  opcode = ULDC.64/ULDC
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 8
--op[0].type = UREG
  is_neg/is_not/abs = 0/0/0
  size = 8
  num = 4
  prop = 
--op[1].type = CBANK
  is_neg/is_not/abs = 0/0/0
  size = 8
  id = 0
  has_imm_offset = 1
  imm_offset = 280
  has_reg_offset = 0
  reg_offset = 0
instruction size is 8
Instr 272 @ 0x1100 (4352) - BSSY B1, 0x1240 ;
  has_guard_pred = 0
  opcode = BSSY/BSSY
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0xb1
--op[1].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x1240
instruction size is 4
Instr 273 @ 0x1110 (4368) - STG.E.64 [R38.64], R26 ;
  has_guard_pred = 0
  opcode = STG.E.64/STG
  memop = GLOBAL
  format = INT64
  load/store = 0/1
  size = 8
  is_extended = 1
--op[0].type = MREF
  is_neg/is_not/abs = 0/0/0
  size = 8
  has_ra = 1
  ra_num = 38
  ra_mod = 64
  has_ur = 0
  ur_num = 0
  ur_mod = NO_MOD
  has_imm = 0
  imm = 0
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 8
  num = 26
  prop = 
instruction size is 8
Instr 274 @ 0x1120 (4384) - DMUL R24, R26, R18 ;
  has_guard_pred = 0
  opcode = DMUL/DMUL
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 24
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 26
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 18
  prop = 
instruction size is 4
Instr 275 @ 0x1130 (4400) - DFMA R20, -R12, R10, 1 ;
  has_guard_pred = 0
  opcode = DFMA/DFMA
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 20
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 1/0/0
  size = 4
  num = 12
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 10
  prop = 
--op[3].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x1
instruction size is 4
Instr 276 @ 0x1140 (4416) - FSETP.GTU.AND P1, PT, |R25|, 6.4490557925156731238e-37, PT ;
  has_guard_pred = 0
  opcode = FSETP.GTU.AND/FSETP
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 1
--op[1].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 7
--op[2].type = REG
  is_neg/is_not/abs = 0/0/1
  size = 4
  num = 25
  prop = 
--op[3].type = IMM_DOUBLE
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 6.449056e-37
--op[4].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 7
instruction size is 4
Instr 277 @ 0x1150 (4432) - DFMA R20, R20, R20, R20 ;
  has_guard_pred = 0
  opcode = DFMA/DFMA
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 20
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 20
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 20
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 20
  prop = 
instruction size is 4
Instr 278 @ 0x1160 (4448) - DFMA R10, R10, R20, R10 ;
  has_guard_pred = 0
  opcode = DFMA/DFMA
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 10
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 10
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 20
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 10
  prop = 
instruction size is 4
Instr 279 @ 0x1170 (4464) - DMUL R20, R24, R10 ;
  has_guard_pred = 0
  opcode = DMUL/DMUL
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 20
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 24
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 10
  prop = 
instruction size is 4
Instr 280 @ 0x1180 (4480) - DFMA R22, -R12, R20, R24 ;
  has_guard_pred = 0
  opcode = DFMA/DFMA
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 22
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 1/0/0
  size = 4
  num = 12
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 20
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 24
  prop = 
instruction size is 4
Instr 281 @ 0x1190 (4496) - DFMA R10, R10, R22, R20 ;
  has_guard_pred = 0
  opcode = DFMA/DFMA
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 10
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 10
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 22
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 20
  prop = 
instruction size is 4
Instr 282 @ 0x11a0 (4512) - FFMA R5, RZ, R13, R11 ;
  has_guard_pred = 0
  opcode = FFMA/FFMA
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 5
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 13
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 11
  prop = 
instruction size is 4
Instr 283 @ 0x11b0 (4528) - FSETP.GT.AND P0, PT, |R5|, 4.8978884574313168671e-40, PT ;
  has_guard_pred = 0
  opcode = FSETP.GT.AND/FSETP
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 0
--op[1].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 7
--op[2].type = REG
  is_neg/is_not/abs = 0/0/1
  size = 4
  num = 5
  prop = 
--op[3].type = IMM_DOUBLE
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 4.897888e-40
--op[4].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 7
instruction size is 4
Instr 284 @ 0x11c0 (4544) - @P0 BRA P1, 0x1230 ;
  has_guard_pred = 1
  guard_pred_num = 0
  guard_pred_negated = 0
  guard_pred_uniform = 0
  opcode = BRA/BRA
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 1
--op[1].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x1230
instruction size is 4
Instr 285 @ 0x11d0 (4560) - IMAD.MOV.U32 R22, RZ, RZ, R12 ;
  has_guard_pred = 0
  opcode = IMAD.MOV.U32/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 22
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 12
  prop = 
instruction size is 4
Instr 286 @ 0x11e0 (4576) - MOV R10, 0x1210 ;
  has_guard_pred = 0
  opcode = MOV/MOV
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 10
  prop = 
--op[1].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x1210
instruction size is 4
Instr 287 @ 0x11f0 (4592) - IMAD.MOV.U32 R23, RZ, RZ, R13 ;
  has_guard_pred = 0
  opcode = IMAD.MOV.U32/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 23
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 13
  prop = 
instruction size is 4
Instr 288 @ 0x1200 (4608) - CALL.REL.NOINC 0x2c00 ;
  has_guard_pred = 0
  opcode = CALL.REL.NOINC/CALL
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x2c00
instruction size is 4
Instr 289 @ 0x1210 (4624) - IMAD.MOV.U32 R10, RZ, RZ, R24 ;
  has_guard_pred = 0
  opcode = IMAD.MOV.U32/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 10
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 24
  prop = 
instruction size is 4
Instr 290 @ 0x1220 (4640) - IMAD.MOV.U32 R11, RZ, RZ, R25 ;
  has_guard_pred = 0
  opcode = IMAD.MOV.U32/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 11
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 25
  prop = 
instruction size is 4
Instr 291 @ 0x1230 (4656) - BSYNC B1 ;
  has_guard_pred = 0
  opcode = BSYNC/BSYNC
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0xb1
instruction size is 4
Instr 292 @ 0x1240 (4672) - STL [R1], R0 ;
  has_guard_pred = 0
  opcode = STL/STL
  memop = LOCAL
  format = INT32
  load/store = 0/1
  size = 4
  is_extended = 0
--op[0].type = MREF
  is_neg/is_not/abs = 0/0/0
  size = 4
  has_ra = 1
  ra_num = 1
  ra_mod = NO_MOD
  has_ur = 0
  ur_num = 0
  ur_mod = NO_MOD
  has_imm = 0
  imm = 0
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 0
  prop = 
instruction size is 4
Instr 293 @ 0x1250 (4688) - BSSY B1, 0x1310 ;
  has_guard_pred = 0
  opcode = BSSY/BSSY
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0xb1
--op[1].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x1310
instruction size is 4
Instr 294 @ 0x1260 (4704) - DADD R2, R10, R2 ;
  has_guard_pred = 0
  opcode = DADD/DADD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 2
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 10
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 2
  prop = 
instruction size is 4
Instr 295 @ 0x1270 (4720) - IMAD.MOV.U32 R5, RZ, RZ, R0 ;
  has_guard_pred = 0
  opcode = IMAD.MOV.U32/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 5
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 0
  prop = 
instruction size is 4
Instr 296 @ 0x1280 (4736) - IMAD.MOV.U32 R10, RZ, RZ, R34 ;
  has_guard_pred = 0
  opcode = IMAD.MOV.U32/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 10
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 34
  prop = 
instruction size is 4
Instr 297 @ 0x1290 (4752) - IMAD.MOV.U32 R11, RZ, RZ, R35 ;
  has_guard_pred = 0
  opcode = IMAD.MOV.U32/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 11
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 35
  prop = 
instruction size is 4
Instr 298 @ 0x12a0 (4768) - @!P2 BRA 0x1300 ;
  has_guard_pred = 1
  guard_pred_num = 2
  guard_pred_negated = 1
  guard_pred_uniform = 0
  opcode = BRA/BRA
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x1300
instruction size is 4
Instr 299 @ 0x12b0 (4784) - IMAD.MOV.U32 R9, RZ, RZ, R16 ;
  has_guard_pred = 0
  opcode = IMAD.MOV.U32/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 9
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 16
  prop = 
instruction size is 4
Instr 300 @ 0x12c0 (4800) - MOV R26, 0x12f0 ;
  has_guard_pred = 0
  opcode = MOV/MOV
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 26
  prop = 
--op[1].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x12f0
instruction size is 4
Instr 301 @ 0x12d0 (4816) - IMAD.MOV.U32 R5, RZ, RZ, R17 ;
  has_guard_pred = 0
  opcode = IMAD.MOV.U32/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 5
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 17
  prop = 
instruction size is 4
Instr 302 @ 0x12e0 (4832) - CALL.REL.NOINC 0x33d0 ;
  has_guard_pred = 0
  opcode = CALL.REL.NOINC/CALL
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x33d0
instruction size is 4
Instr 303 @ 0x12f0 (4848) - LDL R5, [R1] ;
  has_guard_pred = 0
  opcode = LDL/LDL
  memop = LOCAL
  format = INT32
  load/store = 1/0
  size = 4
  is_extended = 0
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 5
  prop = 
--op[1].type = MREF
  is_neg/is_not/abs = 0/0/0
  size = 4
  has_ra = 1
  ra_num = 1
  ra_mod = NO_MOD
  has_ur = 0
  ur_num = 0
  ur_mod = NO_MOD
  has_imm = 0
  imm = 0
instruction size is 4
Instr 304 @ 0x1300 (4864) - BSYNC B1 ;
  has_guard_pred = 0
  opcode = BSYNC/BSYNC
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0xb1
instruction size is 4
Instr 305 @ 0x1310 (4880) - IMAD.SHL.U32 R7, R5, 0x8, RZ ;
  has_guard_pred = 0
  opcode = IMAD.SHL.U32/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 7
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 5
  prop = 
--op[2].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x8
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
instruction size is 4
Instr 306 @ 0x1320 (4896) - ULDC.64 UR4, c[0x0][0x118] ;
  has_guard_pred = 0
  opcode = ULDC.64/ULDC
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 8
--op[0].type = UREG
  is_neg/is_not/abs = 0/0/0
  size = 8
  num = 4
  prop = 
--op[1].type = CBANK
  is_neg/is_not/abs = 0/0/0
  size = 8
  id = 0
  has_imm_offset = 1
  imm_offset = 280
  has_reg_offset = 0
  reg_offset = 0
instruction size is 8
Instr 307 @ 0x1330 (4912) - LOP3.LUT R7, R7, 0x8, RZ, 0xc0, !PT ;
  has_guard_pred = 0
  opcode = LOP3.LUT/LOP3
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 7
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 7
  prop = 
--op[2].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x8
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[4].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0xc0
--op[5].type = PRED
  is_neg/is_not/abs = 0/1/0
  size = 1
  num = 7
instruction size is 4
Instr 308 @ 0x1340 (4928) - IMAD.WIDE R20, R7, 0x8, R36 ;
  has_guard_pred = 0
  opcode = IMAD.WIDE/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 20
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 7
  prop = 
--op[2].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x8
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 36
  prop = 
instruction size is 4
Instr 309 @ 0x1350 (4944) - LDG.E.64.CONSTANT R22, [R20.64+0x8] ;
  has_guard_pred = 0
  opcode = LDG.E.64.CONSTANT/LDG
  memop = GLOBAL
  format = INT64
  load/store = 1/0
  size = 8
  is_extended = 1
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 8
  num = 22
  prop = 
--op[1].type = MREF
  is_neg/is_not/abs = 0/0/0
  size = 8
  has_ra = 1
  ra_num = 20
  ra_mod = 64
  has_ur = 0
  ur_num = 0
  ur_mod = NO_MOD
  has_imm = 1
  imm = 8
instruction size is 8
Instr 310 @ 0x1360 (4960) - LDG.E.64.CONSTANT R24, [R20.64+0x10] ;
  has_guard_pred = 0
  opcode = LDG.E.64.CONSTANT/LDG
  memop = GLOBAL
  format = INT64
  load/store = 1/0
  size = 8
  is_extended = 1
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 8
  num = 24
  prop = 
--op[1].type = MREF
  is_neg/is_not/abs = 0/0/0
  size = 8
  has_ra = 1
  ra_num = 20
  ra_mod = 64
  has_ur = 0
  ur_num = 0
  ur_mod = NO_MOD
  has_imm = 1
  imm = 16
instruction size is 8
Instr 311 @ 0x1370 (4976) - LDG.E.64.CONSTANT R26, [R20.64+0x18] ;
  has_guard_pred = 0
  opcode = LDG.E.64.CONSTANT/LDG
  memop = GLOBAL
  format = INT64
  load/store = 1/0
  size = 8
  is_extended = 1
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 8
  num = 26
  prop = 
--op[1].type = MREF
  is_neg/is_not/abs = 0/0/0
  size = 8
  has_ra = 1
  ra_num = 20
  ra_mod = 64
  has_ur = 0
  ur_num = 0
  ur_mod = NO_MOD
  has_imm = 1
  imm = 24
instruction size is 8
Instr 312 @ 0x1380 (4992) - LDG.E.64.CONSTANT R28, [R20.64+0x20] ;
  has_guard_pred = 0
  opcode = LDG.E.64.CONSTANT/LDG
  memop = GLOBAL
  format = INT64
  load/store = 1/0
  size = 8
  is_extended = 1
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 8
  num = 28
  prop = 
--op[1].type = MREF
  is_neg/is_not/abs = 0/0/0
  size = 8
  has_ra = 1
  ra_num = 20
  ra_mod = 64
  has_ur = 0
  ur_num = 0
  ur_mod = NO_MOD
  has_imm = 1
  imm = 32
instruction size is 8
Instr 313 @ 0x1390 (5008) - LDG.E.64.CONSTANT R30, [R20.64+0x28] ;
  has_guard_pred = 0
  opcode = LDG.E.64.CONSTANT/LDG
  memop = GLOBAL
  format = INT64
  load/store = 1/0
  size = 8
  is_extended = 1
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 8
  num = 30
  prop = 
--op[1].type = MREF
  is_neg/is_not/abs = 0/0/0
  size = 8
  has_ra = 1
  ra_num = 20
  ra_mod = 64
  has_ur = 0
  ur_num = 0
  ur_mod = NO_MOD
  has_imm = 1
  imm = 40
instruction size is 8
Instr 314 @ 0x13a0 (5024) - LDG.E.64.CONSTANT R32, [R20.64+0x30] ;
  has_guard_pred = 0
  opcode = LDG.E.64.CONSTANT/LDG
  memop = GLOBAL
  format = INT64
  load/store = 1/0
  size = 8
  is_extended = 1
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 8
  num = 32
  prop = 
--op[1].type = MREF
  is_neg/is_not/abs = 0/0/0
  size = 8
  has_ra = 1
  ra_num = 20
  ra_mod = 64
  has_ur = 0
  ur_num = 0
  ur_mod = NO_MOD
  has_imm = 1
  imm = 48
instruction size is 8
Instr 315 @ 0x13b0 (5040) - R2P PR, R5, 0x3 ;
  has_guard_pred = 0
  opcode = R2P/R2P
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 8
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 5
  prop = 
--op[2].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x3
instruction size is 4
Instr 316 @ 0x13c0 (5056) - IMAD.MOV.U32 R40, RZ, RZ, 0x79785eba ;
  has_guard_pred = 0
  opcode = IMAD.MOV.U32/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 40
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x79785eba
instruction size is 4
Instr 317 @ 0x13d0 (5072) - DMUL R42, R10, R10 ;
  has_guard_pred = 0
  opcode = DMUL/DMUL
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 42
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 10
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 10
  prop = 
instruction size is 4
Instr 318 @ 0x13e0 (5088) - IMAD.MOV.U32 R5, RZ, RZ, 0x3de5db65 ;
  has_guard_pred = 0
  opcode = IMAD.MOV.U32/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 5
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x3de5db65
instruction size is 4
Instr 319 @ 0x13f0 (5104) - FSEL R40, -R40, 4.2945490664224492434e-19, !P0 ;
  has_guard_pred = 0
  opcode = FSEL/FSEL
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 40
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 1/0/0
  size = 4
  num = 40
  prop = 
--op[2].type = IMM_DOUBLE
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 4.294549e-19
--op[3].type = PRED
  is_neg/is_not/abs = 0/1/0
  size = 1
  num = 0
instruction size is 4
Instr 320 @ 0x1400 (5120) - FSEL R41, R5, -0.082518599927425384521, !P0 ;
  has_guard_pred = 0
  opcode = FSEL/FSEL
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 41
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 5
  prop = 
--op[2].type = IMM_DOUBLE
  is_neg/is_not/abs = 1/0/0
  size = 8
  value = -8.251860e-02
--op[3].type = PRED
  is_neg/is_not/abs = 0/1/0
  size = 1
  num = 0
instruction size is 4
Instr 321 @ 0x1410 (5136) - DFMA R22, R42, R40, R22 ;
  has_guard_pred = 0
  opcode = DFMA/DFMA
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 22
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 42
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 40
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 22
  prop = 
instruction size is 4
Instr 322 @ 0x1420 (5152) - DFMA R22, R42, R22, R24 ;
  has_guard_pred = 0
  opcode = DFMA/DFMA
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 22
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 42
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 22
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 24
  prop = 
instruction size is 4
Instr 323 @ 0x1430 (5168) - MOV R24, 0x3b375450 ;
  has_guard_pred = 0
  opcode = MOV/MOV
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 24
  prop = 
--op[1].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x3b375450
instruction size is 4
Instr 324 @ 0x1440 (5184) - IMAD.MOV.U32 R25, RZ, RZ, -0x7fca1b92 ;
  has_guard_pred = 0
  opcode = IMAD.MOV.U32/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 25
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = IMM_UINT64
  is_neg/is_not/abs = 1/0/0
  size = 8
  value = 0xffffffff8035e46e
instruction size is 4
Instr 325 @ 0x1450 (5200) - DFMA R22, R42, R22, R26 ;
  has_guard_pred = 0
  opcode = DFMA/DFMA
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 22
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 42
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 22
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 26
  prop = 
instruction size is 4
Instr 326 @ 0x1460 (5216) - DFMA R22, R42, R22, R28 ;
  has_guard_pred = 0
  opcode = DFMA/DFMA
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 22
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 42
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 22
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 28
  prop = 
instruction size is 4
Instr 327 @ 0x1470 (5232) - DFMA R22, R42, R22, R30 ;
  has_guard_pred = 0
  opcode = DFMA/DFMA
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 22
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 42
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 22
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 30
  prop = 
instruction size is 4
Instr 328 @ 0x1480 (5248) - DFMA R32, R42, R22, R32 ;
  has_guard_pred = 0
  opcode = DFMA/DFMA
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 32
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 42
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 22
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 32
  prop = 
instruction size is 4
Instr 329 @ 0x1490 (5264) - DFMA R22, R32, R10, R10 ;
  has_guard_pred = 0
  opcode = DFMA/DFMA
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 22
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 32
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 10
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 10
  prop = 
instruction size is 4
Instr 330 @ 0x14a0 (5280) - MOV R10, 0x14e0 ;
  has_guard_pred = 0
  opcode = MOV/MOV
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 10
  prop = 
--op[1].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x14e0
instruction size is 4
Instr 331 @ 0x14b0 (5296) - @P0 DFMA R22, R42, R32, 1 ;
  has_guard_pred = 1
  guard_pred_num = 0
  guard_pred_negated = 0
  guard_pred_uniform = 0
  opcode = DFMA/DFMA
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 22
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 42
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 32
  prop = 
--op[3].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x1
instruction size is 4
Instr 332 @ 0x14c0 (5312) - @P1 DFMA R22, R22, -1, RZ ;
  has_guard_pred = 1
  guard_pred_num = 1
  guard_pred_negated = 0
  guard_pred_uniform = 0
  opcode = DFMA/DFMA
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 22
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 22
  prop = 
--op[2].type = IMM_UINT64
  is_neg/is_not/abs = 1/0/0
  size = 8
  value = 0xffffffffffffffff
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
instruction size is 4
Instr 333 @ 0x14d0 (5328) - CALL.REL.NOINC 0x2c00 ;
  has_guard_pred = 0
  opcode = CALL.REL.NOINC/CALL
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x2c00
instruction size is 4
Instr 334 @ 0x14e0 (5344) - MUFU.RCP64H R11, R13 ;
  has_guard_pred = 0
  opcode = MUFU.RCP64H/MUFU
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 11
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 13
  prop = 
instruction size is 4
Instr 335 @ 0x14f0 (5360) - IMAD.MOV.U32 R10, RZ, RZ, 0x1 ;
  has_guard_pred = 0
  opcode = IMAD.MOV.U32/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 10
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x1
instruction size is 4
Instr 336 @ 0x1500 (5376) - DMUL R22, R24, R18 ;
  has_guard_pred = 0
  opcode = DMUL/DMUL
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 22
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 24
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 18
  prop = 
instruction size is 4
Instr 337 @ 0x1510 (5392) - ULDC.64 UR4, c[0x0][0x118] ;
  has_guard_pred = 0
  opcode = ULDC.64/ULDC
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 8
--op[0].type = UREG
  is_neg/is_not/abs = 0/0/0
  size = 8
  num = 4
  prop = 
--op[1].type = CBANK
  is_neg/is_not/abs = 0/0/0
  size = 8
  id = 0
  has_imm_offset = 1
  imm_offset = 280
  has_reg_offset = 0
  reg_offset = 0
instruction size is 8
Instr 338 @ 0x1520 (5408) - BSSY B1, 0x1670 ;
  has_guard_pred = 0
  opcode = BSSY/BSSY
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0xb1
--op[1].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x1670
instruction size is 4
Instr 339 @ 0x1530 (5424) - STG.E.64 [R38.64+0x8], R24 ;
  has_guard_pred = 0
  opcode = STG.E.64/STG
  memop = GLOBAL
  format = INT64
  load/store = 0/1
  size = 8
  is_extended = 1
--op[0].type = MREF
  is_neg/is_not/abs = 0/0/0
  size = 8
  has_ra = 1
  ra_num = 38
  ra_mod = 64
  has_ur = 0
  ur_num = 0
  ur_mod = NO_MOD
  has_imm = 1
  imm = 8
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 8
  num = 24
  prop = 
instruction size is 8
Instr 340 @ 0x1540 (5440) - FSETP.GTU.AND P1, PT, |R23|, 6.4490557925156731238e-37, PT ;
  has_guard_pred = 0
  opcode = FSETP.GTU.AND/FSETP
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 1
--op[1].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 7
--op[2].type = REG
  is_neg/is_not/abs = 0/0/1
  size = 4
  num = 23
  prop = 
--op[3].type = IMM_DOUBLE
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 6.449056e-37
--op[4].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 7
instruction size is 4
Instr 341 @ 0x1550 (5456) - DFMA R20, -R12, R10, 1 ;
  has_guard_pred = 0
  opcode = DFMA/DFMA
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 20
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 1/0/0
  size = 4
  num = 12
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 10
  prop = 
--op[3].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x1
instruction size is 4
Instr 342 @ 0x1560 (5472) - DFMA R20, R20, R20, R20 ;
  has_guard_pred = 0
  opcode = DFMA/DFMA
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 20
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 20
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 20
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 20
  prop = 
instruction size is 4
Instr 343 @ 0x1570 (5488) - DFMA R26, R10, R20, R10 ;
  has_guard_pred = 0
  opcode = DFMA/DFMA
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 26
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 10
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 20
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 10
  prop = 
instruction size is 4
Instr 344 @ 0x1580 (5504) - DMUL R10, R26, R22 ;
  has_guard_pred = 0
  opcode = DMUL/DMUL
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 10
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 26
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 22
  prop = 
instruction size is 4
Instr 345 @ 0x1590 (5520) - DFMA R20, -R12, R10, R22 ;
  has_guard_pred = 0
  opcode = DFMA/DFMA
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 20
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 1/0/0
  size = 4
  num = 12
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 10
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 22
  prop = 
instruction size is 4
Instr 346 @ 0x15a0 (5536) - DFMA R10, R26, R20, R10 ;
  has_guard_pred = 0
  opcode = DFMA/DFMA
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 10
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 26
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 20
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 10
  prop = 
instruction size is 4
Instr 347 @ 0x15b0 (5552) - FFMA R5, RZ, R13, R11 ;
  has_guard_pred = 0
  opcode = FFMA/FFMA
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 5
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 13
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 11
  prop = 
instruction size is 4
Instr 348 @ 0x15c0 (5568) - FSETP.GT.AND P0, PT, |R5|, 4.8978884574313168671e-40, PT ;
  has_guard_pred = 0
  opcode = FSETP.GT.AND/FSETP
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 0
--op[1].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 7
--op[2].type = REG
  is_neg/is_not/abs = 0/0/1
  size = 4
  num = 5
  prop = 
--op[3].type = IMM_DOUBLE
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 4.897888e-40
--op[4].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 7
instruction size is 4
Instr 349 @ 0x15d0 (5584) - @P0 BRA P1, 0x1660 ;
  has_guard_pred = 1
  guard_pred_num = 0
  guard_pred_negated = 0
  guard_pred_uniform = 0
  opcode = BRA/BRA
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 1
--op[1].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x1660
instruction size is 4
Instr 350 @ 0x15e0 (5600) - IMAD.MOV.U32 R24, RZ, RZ, R22 ;
  has_guard_pred = 0
  opcode = IMAD.MOV.U32/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 24
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 22
  prop = 
instruction size is 4
Instr 351 @ 0x15f0 (5616) - MOV R10, 0x1640 ;
  has_guard_pred = 0
  opcode = MOV/MOV
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 10
  prop = 
--op[1].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x1640
instruction size is 4
Instr 352 @ 0x1600 (5632) - IMAD.MOV.U32 R25, RZ, RZ, R23 ;
  has_guard_pred = 0
  opcode = IMAD.MOV.U32/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 25
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 23
  prop = 
instruction size is 4
Instr 353 @ 0x1610 (5648) - IMAD.MOV.U32 R22, RZ, RZ, R12 ;
  has_guard_pred = 0
  opcode = IMAD.MOV.U32/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 22
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 12
  prop = 
instruction size is 4
Instr 354 @ 0x1620 (5664) - IMAD.MOV.U32 R23, RZ, RZ, R13 ;
  has_guard_pred = 0
  opcode = IMAD.MOV.U32/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 23
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 13
  prop = 
instruction size is 4
Instr 355 @ 0x1630 (5680) - CALL.REL.NOINC 0x2c00 ;
  has_guard_pred = 0
  opcode = CALL.REL.NOINC/CALL
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x2c00
instruction size is 4
Instr 356 @ 0x1640 (5696) - IMAD.MOV.U32 R10, RZ, RZ, R24 ;
  has_guard_pred = 0
  opcode = IMAD.MOV.U32/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 10
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 24
  prop = 
instruction size is 4
Instr 357 @ 0x1650 (5712) - IMAD.MOV.U32 R11, RZ, RZ, R25 ;
  has_guard_pred = 0
  opcode = IMAD.MOV.U32/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 11
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 25
  prop = 
instruction size is 4
Instr 358 @ 0x1660 (5728) - BSYNC B1 ;
  has_guard_pred = 0
  opcode = BSYNC/BSYNC
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0xb1
instruction size is 4
Instr 359 @ 0x1670 (5744) - IADD3 R38, P0, R38, 0x10, RZ ;
  has_guard_pred = 0
  opcode = IADD3/IADD3
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 38
  prop = 
--op[1].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 0
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 38
  prop = 
--op[3].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x10
--op[4].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
instruction size is 4
Instr 360 @ 0x1680 (5760) - DADD R2, R2, R10 ;
  has_guard_pred = 0
  opcode = DADD/DADD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 2
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 2
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 10
  prop = 
instruction size is 4
Instr 361 @ 0x1690 (5776) - IADD3 R14, R14, 0x2, RZ ;
  has_guard_pred = 0
  opcode = IADD3/IADD3
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 14
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 14
  prop = 
--op[2].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x2
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
instruction size is 4
Instr 362 @ 0x16a0 (5792) - IMAD.X R39, RZ, RZ, R39, P0 ;
  has_guard_pred = 0
  opcode = IMAD.X/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 39
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 39
  prop = 
--op[4].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 0
instruction size is 4
Instr 363 @ 0x16b0 (5808) - @P3 BRA 0xe00 ;
  has_guard_pred = 1
  guard_pred_num = 3
  guard_pred_negated = 0
  guard_pred_uniform = 0
  opcode = BRA/BRA
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0xe00
instruction size is 4
Instr 364 @ 0x16c0 (5824) - SHF.R.S32.HI R15, RZ, 0x1f, R14 ;
  has_guard_pred = 0
  opcode = SHF.R.S32.HI/SHF
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 15
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x1f
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 14
  prop = 
instruction size is 4
Instr 365 @ 0x16d0 (5840) - ISETP.NE.AND P0, PT, R8, RZ, PT ;
  has_guard_pred = 0
  opcode = ISETP.NE.AND/ISETP
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 0
--op[1].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 7
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 8
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[4].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 7
instruction size is 4
Instr 366 @ 0x16e0 (5856) - @!P0 BRA 0x2b40 ;
  has_guard_pred = 1
  guard_pred_num = 0
  guard_pred_negated = 1
  guard_pred_uniform = 0
  opcode = BRA/BRA
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x2b40
instruction size is 4
Instr 367 @ 0x16f0 (5872) - DMUL R10, R16, c[0x2][0x28] ;
  has_guard_pred = 0
  opcode = DMUL/DMUL
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 10
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 16
  prop = 
--op[2].type = CBANK
  is_neg/is_not/abs = 0/0/0
  size = 4
  id = 2
  has_imm_offset = 1
  imm_offset = 40
  has_reg_offset = 0
  reg_offset = 0
instruction size is 4
Instr 368 @ 0x1700 (5888) - LOP3.LUT R7, R17, 0x7fe00000, RZ, 0xc0, !PT ;
  has_guard_pred = 0
  opcode = LOP3.LUT/LOP3
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 7
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 17
  prop = 
--op[2].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x7fe00000
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[4].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0xc0
--op[5].type = PRED
  is_neg/is_not/abs = 0/1/0
  size = 1
  num = 7
instruction size is 4
Instr 369 @ 0x1710 (5904) - BSSY B1, 0x1820 ;
  has_guard_pred = 0
  opcode = BSSY/BSSY
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0xb1
--op[1].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x1820
instruction size is 4
Instr 370 @ 0x1720 (5920) - ISETP.GE.U32.AND P0, PT, R7, 0x41e00000, PT ;
  has_guard_pred = 0
  opcode = ISETP.GE.U32.AND/ISETP
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 0
--op[1].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 7
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 7
  prop = 
--op[3].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x41e00000
--op[4].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 7
instruction size is 4
Instr 371 @ 0x1730 (5936) - F2I.F64 R0, R10 ;
  has_guard_pred = 0
  opcode = F2I.F64/F2I
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 8
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 8
  num = 0
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 8
  num = 10
  prop = 
instruction size is 8
Instr 372 @ 0x1740 (5952) - I2F.F64 R8, R0 ;
  has_guard_pred = 0
  opcode = I2F.F64/I2F
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 8
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 8
  num = 8
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 8
  num = 0
  prop = 
instruction size is 8
Instr 373 @ 0x1750 (5968) - STL [R1], R0 ;
  has_guard_pred = 0
  opcode = STL/STL
  memop = LOCAL
  format = INT32
  load/store = 0/1
  size = 4
  is_extended = 0
--op[0].type = MREF
  is_neg/is_not/abs = 0/0/0
  size = 4
  has_ra = 1
  ra_num = 1
  ra_mod = NO_MOD
  has_ur = 0
  ur_num = 0
  ur_mod = NO_MOD
  has_imm = 0
  imm = 0
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 0
  prop = 
instruction size is 4
Instr 374 @ 0x1760 (5984) - DFMA R4, -R8, c[0x2][0x30], R16 ;
  has_guard_pred = 0
  opcode = DFMA/DFMA
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 4
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 1/0/0
  size = 4
  num = 8
  prop = 
--op[2].type = CBANK
  is_neg/is_not/abs = 0/0/0
  size = 4
  id = 2
  has_imm_offset = 1
  imm_offset = 48
  has_reg_offset = 0
  reg_offset = 0
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 16
  prop = 
instruction size is 4
Instr 375 @ 0x1770 (6000) - DFMA R4, -R8, c[0x2][0x38], R4 ;
  has_guard_pred = 0
  opcode = DFMA/DFMA
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 4
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 1/0/0
  size = 4
  num = 8
  prop = 
--op[2].type = CBANK
  is_neg/is_not/abs = 0/0/0
  size = 4
  id = 2
  has_imm_offset = 1
  imm_offset = 56
  has_reg_offset = 0
  reg_offset = 0
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 4
  prop = 
instruction size is 4
Instr 376 @ 0x1780 (6016) - DFMA R4, -R8, c[0x2][0x40], R4 ;
  has_guard_pred = 0
  opcode = DFMA/DFMA
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 4
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 1/0/0
  size = 4
  num = 8
  prop = 
--op[2].type = CBANK
  is_neg/is_not/abs = 0/0/0
  size = 4
  id = 2
  has_imm_offset = 1
  imm_offset = 64
  has_reg_offset = 0
  reg_offset = 0
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 4
  prop = 
instruction size is 4
Instr 377 @ 0x1790 (6032) - @!P0 BRA 0x1810 ;
  has_guard_pred = 1
  guard_pred_num = 0
  guard_pred_negated = 1
  guard_pred_uniform = 0
  opcode = BRA/BRA
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x1810
instruction size is 4
Instr 378 @ 0x17a0 (6048) - IMAD.MOV.U32 R9, RZ, RZ, R16 ;
  has_guard_pred = 0
  opcode = IMAD.MOV.U32/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 9
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 16
  prop = 
instruction size is 4
Instr 379 @ 0x17b0 (6064) - MOV R26, 0x17e0 ;
  has_guard_pred = 0
  opcode = MOV/MOV
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 26
  prop = 
--op[1].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x17e0
instruction size is 4
Instr 380 @ 0x17c0 (6080) - IMAD.MOV.U32 R5, RZ, RZ, R17 ;
  has_guard_pred = 0
  opcode = IMAD.MOV.U32/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 5
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 17
  prop = 
instruction size is 4
Instr 381 @ 0x17d0 (6096) - CALL.REL.NOINC 0x33d0 ;
  has_guard_pred = 0
  opcode = CALL.REL.NOINC/CALL
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x33d0
instruction size is 4
Instr 382 @ 0x17e0 (6112) - LDL R0, [R1] ;
  has_guard_pred = 0
  opcode = LDL/LDL
  memop = LOCAL
  format = INT32
  load/store = 1/0
  size = 4
  is_extended = 0
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 0
  prop = 
--op[1].type = MREF
  is_neg/is_not/abs = 0/0/0
  size = 4
  has_ra = 1
  ra_num = 1
  ra_mod = NO_MOD
  has_ur = 0
  ur_num = 0
  ur_mod = NO_MOD
  has_imm = 0
  imm = 0
instruction size is 4
Instr 383 @ 0x17f0 (6128) - IMAD.MOV.U32 R4, RZ, RZ, R10 ;
  has_guard_pred = 0
  opcode = IMAD.MOV.U32/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 4
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 10
  prop = 
instruction size is 4
Instr 384 @ 0x1800 (6144) - IMAD.MOV.U32 R5, RZ, RZ, R11 ;
  has_guard_pred = 0
  opcode = IMAD.MOV.U32/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 5
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 11
  prop = 
instruction size is 4
Instr 385 @ 0x1810 (6160) - BSYNC B1 ;
  has_guard_pred = 0
  opcode = BSYNC/BSYNC
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0xb1
instruction size is 4
Instr 386 @ 0x1820 (6176) - SHF.L.U32 R7, R0, 0x3, RZ ;
  has_guard_pred = 0
  opcode = SHF.L.U32/SHF
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 7
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 0
  prop = 
--op[2].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x3
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
instruction size is 4
Instr 387 @ 0x1830 (6192) - UMOV UR4, 0xa6200300 ;
  has_guard_pred = 0
  opcode = UMOV/UMOV
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = UREG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 4
  prop = 
--op[1].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0xa6200300
instruction size is 4
Instr 388 @ 0x1840 (6208) - UMOV UR5, 0x7ffa ;
  has_guard_pred = 0
  opcode = UMOV/UMOV
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = UREG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 5
  prop = 
--op[1].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x7ffa
instruction size is 4
Instr 389 @ 0x1850 (6224) - LOP3.LUT R7, R7, 0x8, RZ, 0xc0, !PT ;
  has_guard_pred = 0
  opcode = LOP3.LUT/LOP3
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 7
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 7
  prop = 
--op[2].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x8
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[4].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0xc0
--op[5].type = PRED
  is_neg/is_not/abs = 0/1/0
  size = 1
  num = 7
instruction size is 4
Instr 390 @ 0x1860 (6240) - IMAD.U32 R8, RZ, RZ, UR4 ;
  has_guard_pred = 0
  opcode = IMAD.U32/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 8
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = UREG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 4
  prop = 
instruction size is 4
Instr 391 @ 0x1870 (6256) - IMAD.U32 R9, RZ, RZ, UR5 ;
  has_guard_pred = 0
  opcode = IMAD.U32/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 9
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = UREG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 5
  prop = 
instruction size is 4
Instr 392 @ 0x1880 (6272) - ULDC.64 UR4, c[0x0][0x118] ;
  has_guard_pred = 0
  opcode = ULDC.64/ULDC
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 8
--op[0].type = UREG
  is_neg/is_not/abs = 0/0/0
  size = 8
  num = 4
  prop = 
--op[1].type = CBANK
  is_neg/is_not/abs = 0/0/0
  size = 8
  id = 0
  has_imm_offset = 1
  imm_offset = 280
  has_reg_offset = 0
  reg_offset = 0
instruction size is 8
Instr 393 @ 0x1890 (6288) - IMAD.WIDE R8, R7, 0x8, R8 ;
  has_guard_pred = 0
  opcode = IMAD.WIDE/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 8
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 7
  prop = 
--op[2].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x8
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 8
  prop = 
instruction size is 4
Instr 394 @ 0x18a0 (6304) - LDG.E.64.CONSTANT R10, [R8.64+0x8] ;
  has_guard_pred = 0
  opcode = LDG.E.64.CONSTANT/LDG
  memop = GLOBAL
  format = INT64
  load/store = 1/0
  size = 8
  is_extended = 1
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 8
  num = 10
  prop = 
--op[1].type = MREF
  is_neg/is_not/abs = 0/0/0
  size = 8
  has_ra = 1
  ra_num = 8
  ra_mod = 64
  has_ur = 0
  ur_num = 0
  ur_mod = NO_MOD
  has_imm = 1
  imm = 8
instruction size is 8
Instr 395 @ 0x18b0 (6320) - LDG.E.64.CONSTANT R16, [R8.64+0x10] ;
  has_guard_pred = 0
  opcode = LDG.E.64.CONSTANT/LDG
  memop = GLOBAL
  format = INT64
  load/store = 1/0
  size = 8
  is_extended = 1
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 8
  num = 16
  prop = 
--op[1].type = MREF
  is_neg/is_not/abs = 0/0/0
  size = 8
  has_ra = 1
  ra_num = 8
  ra_mod = 64
  has_ur = 0
  ur_num = 0
  ur_mod = NO_MOD
  has_imm = 1
  imm = 16
instruction size is 8
Instr 396 @ 0x18c0 (6336) - LDG.E.64.CONSTANT R20, [R8.64+0x18] ;
  has_guard_pred = 0
  opcode = LDG.E.64.CONSTANT/LDG
  memop = GLOBAL
  format = INT64
  load/store = 1/0
  size = 8
  is_extended = 1
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 8
  num = 20
  prop = 
--op[1].type = MREF
  is_neg/is_not/abs = 0/0/0
  size = 8
  has_ra = 1
  ra_num = 8
  ra_mod = 64
  has_ur = 0
  ur_num = 0
  ur_mod = NO_MOD
  has_imm = 1
  imm = 24
instruction size is 8
Instr 397 @ 0x18d0 (6352) - LDG.E.64.CONSTANT R22, [R8.64+0x20] ;
  has_guard_pred = 0
  opcode = LDG.E.64.CONSTANT/LDG
  memop = GLOBAL
  format = INT64
  load/store = 1/0
  size = 8
  is_extended = 1
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 8
  num = 22
  prop = 
--op[1].type = MREF
  is_neg/is_not/abs = 0/0/0
  size = 8
  has_ra = 1
  ra_num = 8
  ra_mod = 64
  has_ur = 0
  ur_num = 0
  ur_mod = NO_MOD
  has_imm = 1
  imm = 32
instruction size is 8
Instr 398 @ 0x18e0 (6368) - LDG.E.64.CONSTANT R24, [R8.64+0x28] ;
  has_guard_pred = 0
  opcode = LDG.E.64.CONSTANT/LDG
  memop = GLOBAL
  format = INT64
  load/store = 1/0
  size = 8
  is_extended = 1
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 8
  num = 24
  prop = 
--op[1].type = MREF
  is_neg/is_not/abs = 0/0/0
  size = 8
  has_ra = 1
  ra_num = 8
  ra_mod = 64
  has_ur = 0
  ur_num = 0
  ur_mod = NO_MOD
  has_imm = 1
  imm = 40
instruction size is 8
Instr 399 @ 0x18f0 (6384) - LDG.E.64.CONSTANT R26, [R8.64+0x30] ;
  has_guard_pred = 0
  opcode = LDG.E.64.CONSTANT/LDG
  memop = GLOBAL
  format = INT64
  load/store = 1/0
  size = 8
  is_extended = 1
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 8
  num = 26
  prop = 
--op[1].type = MREF
  is_neg/is_not/abs = 0/0/0
  size = 8
  has_ra = 1
  ra_num = 8
  ra_mod = 64
  has_ur = 0
  ur_num = 0
  ur_mod = NO_MOD
  has_imm = 1
  imm = 48
instruction size is 8
Instr 400 @ 0x1900 (6400) - R2P PR, R0, 0x3 ;
  has_guard_pred = 0
  opcode = R2P/R2P
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 8
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 0
  prop = 
--op[2].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x3
instruction size is 4
Instr 401 @ 0x1910 (6416) - IMAD.MOV.U32 R28, RZ, RZ, 0x79785eba ;
  has_guard_pred = 0
  opcode = IMAD.MOV.U32/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 28
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x79785eba
instruction size is 4
Instr 402 @ 0x1920 (6432) - DMUL R30, R4, R4 ;
  has_guard_pred = 0
  opcode = DMUL/DMUL
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 30
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 4
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 4
  prop = 
instruction size is 4
Instr 403 @ 0x1930 (6448) - IMAD.MOV.U32 R0, RZ, RZ, 0x3de5db65 ;
  has_guard_pred = 0
  opcode = IMAD.MOV.U32/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 0
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x3de5db65
instruction size is 4
Instr 404 @ 0x1940 (6464) - FSEL R28, -R28, 4.2945490664224492434e-19, !P0 ;
  has_guard_pred = 0
  opcode = FSEL/FSEL
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 28
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 1/0/0
  size = 4
  num = 28
  prop = 
--op[2].type = IMM_DOUBLE
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 4.294549e-19
--op[3].type = PRED
  is_neg/is_not/abs = 0/1/0
  size = 1
  num = 0
instruction size is 4
Instr 405 @ 0x1950 (6480) - FSEL R29, R0, -0.082518599927425384521, !P0 ;
  has_guard_pred = 0
  opcode = FSEL/FSEL
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 29
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 0
  prop = 
--op[2].type = IMM_DOUBLE
  is_neg/is_not/abs = 1/0/0
  size = 8
  value = -8.251860e-02
--op[3].type = PRED
  is_neg/is_not/abs = 0/1/0
  size = 1
  num = 0
instruction size is 4
Instr 406 @ 0x1960 (6496) - DFMA R10, R30, R28, R10 ;
  has_guard_pred = 0
  opcode = DFMA/DFMA
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 10
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 30
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 28
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 10
  prop = 
instruction size is 4
Instr 407 @ 0x1970 (6512) - DFMA R10, R30, R10, R16 ;
  has_guard_pred = 0
  opcode = DFMA/DFMA
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 10
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 30
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 10
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 16
  prop = 
instruction size is 4
Instr 408 @ 0x1980 (6528) - DFMA R10, R30, R10, R20 ;
  has_guard_pred = 0
  opcode = DFMA/DFMA
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 10
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 30
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 10
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 20
  prop = 
instruction size is 4
Instr 409 @ 0x1990 (6544) - DFMA R10, R30, R10, R22 ;
  has_guard_pred = 0
  opcode = DFMA/DFMA
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 10
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 30
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 10
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 22
  prop = 
instruction size is 4
Instr 410 @ 0x19a0 (6560) - DFMA R10, R30.reuse, R10, R24 ;
  has_guard_pred = 0
  opcode = DFMA/DFMA
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 10
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 30
  prop = .reuse
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 10
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 24
  prop = 
instruction size is 4
Instr 411 @ 0x19b0 (6576) - IMAD.MOV.U32 R24, RZ, RZ, 0x3b375450 ;
  has_guard_pred = 0
  opcode = IMAD.MOV.U32/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 24
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x3b375450
instruction size is 4
Instr 412 @ 0x19c0 (6592) - IMAD.MOV.U32 R25, RZ, RZ, -0x7fca1b92 ;
  has_guard_pred = 0
  opcode = IMAD.MOV.U32/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 25
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = IMM_UINT64
  is_neg/is_not/abs = 1/0/0
  size = 8
  value = 0xffffffff8035e46e
instruction size is 4
Instr 413 @ 0x19d0 (6608) - DFMA R10, R30, R10, R26 ;
  has_guard_pred = 0
  opcode = DFMA/DFMA
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 10
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 30
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 10
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 26
  prop = 
instruction size is 4
Instr 414 @ 0x19e0 (6624) - DFMA R22, R10, R4, R4 ;
  has_guard_pred = 0
  opcode = DFMA/DFMA
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 22
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 10
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 4
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 4
  prop = 
instruction size is 4
Instr 415 @ 0x19f0 (6640) - @P0 DFMA R22, R30, R10, 1 ;
  has_guard_pred = 1
  guard_pred_num = 0
  guard_pred_negated = 0
  guard_pred_uniform = 0
  opcode = DFMA/DFMA
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 22
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 30
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 10
  prop = 
--op[3].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x1
instruction size is 4
Instr 416 @ 0x1a00 (6656) - LEA R8, P0, R14.reuse, c[0x0][0x190], 0x3 ;
  has_guard_pred = 0
  opcode = LEA/LEA
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 8
  prop = 
--op[1].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 0
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 14
  prop = .reuse
--op[3].type = CBANK
  is_neg/is_not/abs = 0/0/0
  size = 4
  id = 0
  has_imm_offset = 1
  imm_offset = 400
  has_reg_offset = 0
  reg_offset = 0
--op[4].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x3
instruction size is 4
Instr 417 @ 0x1a10 (6672) - MOV R10, 0x1a50 ;
  has_guard_pred = 0
  opcode = MOV/MOV
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 10
  prop = 
--op[1].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x1a50
instruction size is 4
Instr 418 @ 0x1a20 (6688) - LEA.HI.X R9, R14, c[0x0][0x194], R15, 0x3, P0 ;
  has_guard_pred = 0
  opcode = LEA.HI.X/LEA
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 9
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 14
  prop = 
--op[2].type = CBANK
  is_neg/is_not/abs = 0/0/0
  size = 4
  id = 0
  has_imm_offset = 1
  imm_offset = 404
  has_reg_offset = 0
  reg_offset = 0
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 15
  prop = 
--op[4].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x3
--op[5].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 0
instruction size is 4
Instr 419 @ 0x1a30 (6704) - @P1 DFMA R22, R22, -1, RZ ;
  has_guard_pred = 1
  guard_pred_num = 1
  guard_pred_negated = 0
  guard_pred_uniform = 0
  opcode = DFMA/DFMA
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 22
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 22
  prop = 
--op[2].type = IMM_UINT64
  is_neg/is_not/abs = 1/0/0
  size = 8
  value = 0xffffffffffffffff
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
instruction size is 4
Instr 420 @ 0x1a40 (6720) - CALL.REL.NOINC 0x2c00 ;
  has_guard_pred = 0
  opcode = CALL.REL.NOINC/CALL
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x2c00
instruction size is 4
Instr 421 @ 0x1a50 (6736) - MUFU.RCP64H R5, R13 ;
  has_guard_pred = 0
  opcode = MUFU.RCP64H/MUFU
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 5
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 13
  prop = 
instruction size is 4
Instr 422 @ 0x1a60 (6752) - IMAD.MOV.U32 R4, RZ, RZ, 0x1 ;
  has_guard_pred = 0
  opcode = IMAD.MOV.U32/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 4
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x1
instruction size is 4
Instr 423 @ 0x1a70 (6768) - DMUL R18, R24, R18 ;
  has_guard_pred = 0
  opcode = DMUL/DMUL
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 18
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 24
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 18
  prop = 
instruction size is 4
Instr 424 @ 0x1a80 (6784) - ULDC.64 UR4, c[0x0][0x118] ;
  has_guard_pred = 0
  opcode = ULDC.64/ULDC
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 8
--op[0].type = UREG
  is_neg/is_not/abs = 0/0/0
  size = 8
  num = 4
  prop = 
--op[1].type = CBANK
  is_neg/is_not/abs = 0/0/0
  size = 8
  id = 0
  has_imm_offset = 1
  imm_offset = 280
  has_reg_offset = 0
  reg_offset = 0
instruction size is 8
Instr 425 @ 0x1a90 (6800) - BSSY B1, 0x1be0 ;
  has_guard_pred = 0
  opcode = BSSY/BSSY
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0xb1
--op[1].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x1be0
instruction size is 4
Instr 426 @ 0x1aa0 (6816) - STG.E.64 [R8.64], R24 ;
  has_guard_pred = 0
  opcode = STG.E.64/STG
  memop = GLOBAL
  format = INT64
  load/store = 0/1
  size = 8
  is_extended = 1
--op[0].type = MREF
  is_neg/is_not/abs = 0/0/0
  size = 8
  has_ra = 1
  ra_num = 8
  ra_mod = 64
  has_ur = 0
  ur_num = 0
  ur_mod = NO_MOD
  has_imm = 0
  imm = 0
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 8
  num = 24
  prop = 
instruction size is 8
Instr 427 @ 0x1ab0 (6832) - FSETP.GTU.AND P1, PT, |R19|, 6.4490557925156731238e-37, PT ;
  has_guard_pred = 0
  opcode = FSETP.GTU.AND/FSETP
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 1
--op[1].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 7
--op[2].type = REG
  is_neg/is_not/abs = 0/0/1
  size = 4
  num = 19
  prop = 
--op[3].type = IMM_DOUBLE
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 6.449056e-37
--op[4].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 7
instruction size is 4
Instr 428 @ 0x1ac0 (6848) - DFMA R10, -R12, R4, 1 ;
  has_guard_pred = 0
  opcode = DFMA/DFMA
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 10
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 1/0/0
  size = 4
  num = 12
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 4
  prop = 
--op[3].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x1
instruction size is 4
Instr 429 @ 0x1ad0 (6864) - DFMA R10, R10, R10, R10 ;
  has_guard_pred = 0
  opcode = DFMA/DFMA
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 10
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 10
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 10
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 10
  prop = 
instruction size is 4
Instr 430 @ 0x1ae0 (6880) - DFMA R14, R4, R10, R4 ;
  has_guard_pred = 0
  opcode = DFMA/DFMA
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 14
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 4
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 10
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 4
  prop = 
instruction size is 4
Instr 431 @ 0x1af0 (6896) - DMUL R4, R14, R18 ;
  has_guard_pred = 0
  opcode = DMUL/DMUL
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 4
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 14
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 18
  prop = 
instruction size is 4
Instr 432 @ 0x1b00 (6912) - DFMA R10, -R12, R4, R18 ;
  has_guard_pred = 0
  opcode = DFMA/DFMA
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 10
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 1/0/0
  size = 4
  num = 12
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 4
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 18
  prop = 
instruction size is 4
Instr 433 @ 0x1b10 (6928) - DFMA R4, R14, R10, R4 ;
  has_guard_pred = 0
  opcode = DFMA/DFMA
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 4
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 14
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 10
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 4
  prop = 
instruction size is 4
Instr 434 @ 0x1b20 (6944) - FFMA R0, RZ, R13, R5 ;
  has_guard_pred = 0
  opcode = FFMA/FFMA
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 0
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 13
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 5
  prop = 
instruction size is 4
Instr 435 @ 0x1b30 (6960) - FSETP.GT.AND P0, PT, |R0|, 4.8978884574313168671e-40, PT ;
  has_guard_pred = 0
  opcode = FSETP.GT.AND/FSETP
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 0
--op[1].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 7
--op[2].type = REG
  is_neg/is_not/abs = 0/0/1
  size = 4
  num = 0
  prop = 
--op[3].type = IMM_DOUBLE
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 4.897888e-40
--op[4].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 7
instruction size is 4
Instr 436 @ 0x1b40 (6976) - @P0 BRA P1, 0x1bd0 ;
  has_guard_pred = 1
  guard_pred_num = 0
  guard_pred_negated = 0
  guard_pred_uniform = 0
  opcode = BRA/BRA
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 1
--op[1].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x1bd0
instruction size is 4
Instr 437 @ 0x1b50 (6992) - IMAD.MOV.U32 R24, RZ, RZ, R18 ;
  has_guard_pred = 0
  opcode = IMAD.MOV.U32/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 24
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 18
  prop = 
instruction size is 4
Instr 438 @ 0x1b60 (7008) - MOV R10, 0x1bb0 ;
  has_guard_pred = 0
  opcode = MOV/MOV
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 10
  prop = 
--op[1].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x1bb0
instruction size is 4
Instr 439 @ 0x1b70 (7024) - IMAD.MOV.U32 R25, RZ, RZ, R19 ;
  has_guard_pred = 0
  opcode = IMAD.MOV.U32/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 25
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 19
  prop = 
instruction size is 4
Instr 440 @ 0x1b80 (7040) - IMAD.MOV.U32 R22, RZ, RZ, R12 ;
  has_guard_pred = 0
  opcode = IMAD.MOV.U32/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 22
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 12
  prop = 
instruction size is 4
Instr 441 @ 0x1b90 (7056) - IMAD.MOV.U32 R23, RZ, RZ, R13 ;
  has_guard_pred = 0
  opcode = IMAD.MOV.U32/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 23
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 13
  prop = 
instruction size is 4
Instr 442 @ 0x1ba0 (7072) - CALL.REL.NOINC 0x2c00 ;
  has_guard_pred = 0
  opcode = CALL.REL.NOINC/CALL
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x2c00
instruction size is 4
Instr 443 @ 0x1bb0 (7088) - IMAD.MOV.U32 R4, RZ, RZ, R24 ;
  has_guard_pred = 0
  opcode = IMAD.MOV.U32/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 4
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 24
  prop = 
instruction size is 4
Instr 444 @ 0x1bc0 (7104) - IMAD.MOV.U32 R5, RZ, RZ, R25 ;
  has_guard_pred = 0
  opcode = IMAD.MOV.U32/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 5
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 25
  prop = 
instruction size is 4
Instr 445 @ 0x1bd0 (7120) - BSYNC B1 ;
  has_guard_pred = 0
  opcode = BSYNC/BSYNC
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0xb1
instruction size is 4
Instr 446 @ 0x1be0 (7136) - DADD R2, R2, R4 ;
  has_guard_pred = 0
  opcode = DADD/DADD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 2
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 2
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 4
  prop = 
instruction size is 4
Instr 447 @ 0x1bf0 (7152) - BRA 0x2b40 ;
  has_guard_pred = 0
  opcode = BRA/BRA
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x2b40
instruction size is 4
Instr 448 @ 0x1c00 (7168) - ISETP.NE.AND P0, PT, R0, 0x1, PT ;
  has_guard_pred = 0
  opcode = ISETP.NE.AND/ISETP
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 0
--op[1].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 7
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 0
  prop = 
--op[3].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x1
--op[4].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 7
instruction size is 4
Instr 449 @ 0x1c10 (7184) - CS2R R14, SRZ ;
  has_guard_pred = 0
  opcode = CS2R/CS2R
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 14
  prop = 
--op[1].type = GENERIC
  is_neg/is_not/abs = 0/0/0
  size = 4
  value = SRZ
instruction size is 4
Instr 450 @ 0x1c20 (7200) - @!P0 BRA 0x2610 ;
  has_guard_pred = 1
  guard_pred_num = 0
  guard_pred_negated = 1
  guard_pred_uniform = 0
  opcode = BRA/BRA
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x2610
instruction size is 4
Instr 451 @ 0x1c30 (7216) - DMUL R34, RZ, R16 ;
  has_guard_pred = 0
  opcode = DMUL/DMUL
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 34
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 16
  prop = 
instruction size is 4
Instr 452 @ 0x1c40 (7232) - UMOV UR4, 0xa6200300 ;
  has_guard_pred = 0
  opcode = UMOV/UMOV
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = UREG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 4
  prop = 
--op[1].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0xa6200300
instruction size is 4
Instr 453 @ 0x1c50 (7248) - MOV R14, RZ ;
  has_guard_pred = 0
  opcode = MOV/MOV
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 14
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
instruction size is 4
Instr 454 @ 0x1c60 (7264) - UMOV UR5, 0x7ffa ;
  has_guard_pred = 0
  opcode = UMOV/UMOV
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = UREG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 5
  prop = 
--op[1].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x7ffa
instruction size is 4
Instr 455 @ 0x1c70 (7280) - IMAD.MOV.U32 R40, RZ, RZ, c[0x0][0x190] ;
  has_guard_pred = 0
  opcode = IMAD.MOV.U32/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 40
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = CBANK
  is_neg/is_not/abs = 0/0/0
  size = 4
  id = 0
  has_imm_offset = 1
  imm_offset = 400
  has_reg_offset = 0
  reg_offset = 0
instruction size is 4
Instr 456 @ 0x1c80 (7296) - DMUL R10, R34, c[0x2][0x28] ;
  has_guard_pred = 0
  opcode = DMUL/DMUL
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 10
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 34
  prop = 
--op[2].type = CBANK
  is_neg/is_not/abs = 0/0/0
  size = 4
  id = 2
  has_imm_offset = 1
  imm_offset = 40
  has_reg_offset = 0
  reg_offset = 0
instruction size is 4
Instr 457 @ 0x1c90 (7312) - IMAD.MOV.U32 R41, RZ, RZ, c[0x0][0x194] ;
  has_guard_pred = 0
  opcode = IMAD.MOV.U32/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 41
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = CBANK
  is_neg/is_not/abs = 0/0/0
  size = 4
  id = 0
  has_imm_offset = 1
  imm_offset = 404
  has_reg_offset = 0
  reg_offset = 0
instruction size is 4
Instr 458 @ 0x1ca0 (7328) - IMAD.U32 R38, RZ, RZ, UR4 ;
  has_guard_pred = 0
  opcode = IMAD.U32/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 38
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = UREG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 4
  prop = 
instruction size is 4
Instr 459 @ 0x1cb0 (7344) - LOP3.LUT R7, R35, 0x7fe00000, RZ, 0xc0, !PT ;
  has_guard_pred = 0
  opcode = LOP3.LUT/LOP3
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 7
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 35
  prop = 
--op[2].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x7fe00000
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[4].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0xc0
--op[5].type = PRED
  is_neg/is_not/abs = 0/1/0
  size = 1
  num = 7
instruction size is 4
Instr 460 @ 0x1cc0 (7360) - IMAD.U32 R39, RZ, RZ, UR5 ;
  has_guard_pred = 0
  opcode = IMAD.U32/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 39
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = UREG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 5
  prop = 
instruction size is 4
Instr 461 @ 0x1cd0 (7376) - F2I.F64 R0, R10 ;
  has_guard_pred = 0
  opcode = F2I.F64/F2I
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 8
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 8
  num = 0
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 8
  num = 10
  prop = 
instruction size is 8
Instr 462 @ 0x1ce0 (7392) - ISETP.GE.U32.AND P2, PT, R7, 0x41e00000, PT ;
  has_guard_pred = 0
  opcode = ISETP.GE.U32.AND/ISETP
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 2
--op[1].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 7
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 7
  prop = 
--op[3].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x41e00000
--op[4].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 7
instruction size is 4
Instr 463 @ 0x1cf0 (7408) - I2F.F64 R36, R0 ;
  has_guard_pred = 0
  opcode = I2F.F64/I2F
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 8
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 8
  num = 36
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 8
  num = 0
  prop = 
instruction size is 8
Instr 464 @ 0x1d00 (7424) - DFMA R4, -R36, c[0x2][0x30], R34 ;
  has_guard_pred = 0
  opcode = DFMA/DFMA
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 4
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 1/0/0
  size = 4
  num = 36
  prop = 
--op[2].type = CBANK
  is_neg/is_not/abs = 0/0/0
  size = 4
  id = 2
  has_imm_offset = 1
  imm_offset = 48
  has_reg_offset = 0
  reg_offset = 0
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 34
  prop = 
instruction size is 4
Instr 465 @ 0x1d10 (7440) - DFMA R4, -R36, c[0x2][0x38], R4 ;
  has_guard_pred = 0
  opcode = DFMA/DFMA
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 4
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 1/0/0
  size = 4
  num = 36
  prop = 
--op[2].type = CBANK
  is_neg/is_not/abs = 0/0/0
  size = 4
  id = 2
  has_imm_offset = 1
  imm_offset = 56
  has_reg_offset = 0
  reg_offset = 0
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 4
  prop = 
instruction size is 4
Instr 466 @ 0x1d20 (7456) - DFMA R36, -R36, c[0x2][0x40], R4 ;
  has_guard_pred = 0
  opcode = DFMA/DFMA
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 36
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 1/0/0
  size = 4
  num = 36
  prop = 
--op[2].type = CBANK
  is_neg/is_not/abs = 0/0/0
  size = 4
  id = 2
  has_imm_offset = 1
  imm_offset = 64
  has_reg_offset = 0
  reg_offset = 0
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 4
  prop = 
instruction size is 4
Instr 467 @ 0x1d30 (7472) - IADD3 R4, -R8, c[0x0][0x170], RZ ;
  has_guard_pred = 0
  opcode = IADD3/IADD3
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 4
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 1/0/0
  size = 4
  num = 8
  prop = 
--op[2].type = CBANK
  is_neg/is_not/abs = 0/0/0
  size = 4
  id = 0
  has_imm_offset = 1
  imm_offset = 368
  has_reg_offset = 0
  reg_offset = 0
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
instruction size is 4
Instr 468 @ 0x1d40 (7488) - STL [R1], R0 ;
  has_guard_pred = 0
  opcode = STL/STL
  memop = LOCAL
  format = INT32
  load/store = 0/1
  size = 4
  is_extended = 0
--op[0].type = MREF
  is_neg/is_not/abs = 0/0/0
  size = 4
  has_ra = 1
  ra_num = 1
  ra_mod = NO_MOD
  has_ur = 0
  ur_num = 0
  ur_mod = NO_MOD
  has_imm = 0
  imm = 0
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 0
  prop = 
instruction size is 4
Instr 469 @ 0x1d50 (7504) - IADD3 R4, R4, -0x2, RZ ;
  has_guard_pred = 0
  opcode = IADD3/IADD3
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 4
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 4
  prop = 
--op[2].type = IMM_UINT64
  is_neg/is_not/abs = 1/0/0
  size = 8
  value = 0xfffffffffffffffe
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
instruction size is 4
Instr 470 @ 0x1d60 (7520) - BSSY B1, 0x1e20 ;
  has_guard_pred = 0
  opcode = BSSY/BSSY
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0xb1
--op[1].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x1e20
instruction size is 4
Instr 471 @ 0x1d70 (7536) - IMAD.MOV.U32 R5, RZ, RZ, R0 ;
  has_guard_pred = 0
  opcode = IMAD.MOV.U32/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 5
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 0
  prop = 
instruction size is 4
Instr 472 @ 0x1d80 (7552) - ISETP.NE.AND P3, PT, R4, RZ, PT ;
  has_guard_pred = 0
  opcode = ISETP.NE.AND/ISETP
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 3
--op[1].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 7
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 4
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[4].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 7
instruction size is 4
Instr 473 @ 0x1d90 (7568) - IMAD.MOV.U32 R10, RZ, RZ, R36 ;
  has_guard_pred = 0
  opcode = IMAD.MOV.U32/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 10
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 36
  prop = 
instruction size is 4
Instr 474 @ 0x1da0 (7584) - IMAD.MOV.U32 R11, RZ, RZ, R37 ;
  has_guard_pred = 0
  opcode = IMAD.MOV.U32/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 11
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 37
  prop = 
instruction size is 4
Instr 475 @ 0x1db0 (7600) - @!P2 BRA 0x1e10 ;
  has_guard_pred = 1
  guard_pred_num = 2
  guard_pred_negated = 1
  guard_pred_uniform = 0
  opcode = BRA/BRA
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x1e10
instruction size is 4
Instr 476 @ 0x1dc0 (7616) - IMAD.MOV.U32 R9, RZ, RZ, R34 ;
  has_guard_pred = 0
  opcode = IMAD.MOV.U32/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 9
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 34
  prop = 
instruction size is 4
Instr 477 @ 0x1dd0 (7632) - MOV R26, 0x1e00 ;
  has_guard_pred = 0
  opcode = MOV/MOV
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 26
  prop = 
--op[1].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x1e00
instruction size is 4
Instr 478 @ 0x1de0 (7648) - IMAD.MOV.U32 R5, RZ, RZ, R35 ;
  has_guard_pred = 0
  opcode = IMAD.MOV.U32/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 5
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 35
  prop = 
instruction size is 4
Instr 479 @ 0x1df0 (7664) - CALL.REL.NOINC 0x33d0 ;
  has_guard_pred = 0
  opcode = CALL.REL.NOINC/CALL
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x33d0
instruction size is 4
Instr 480 @ 0x1e00 (7680) - LDL R5, [R1] ;
  has_guard_pred = 0
  opcode = LDL/LDL
  memop = LOCAL
  format = INT32
  load/store = 1/0
  size = 4
  is_extended = 0
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 5
  prop = 
--op[1].type = MREF
  is_neg/is_not/abs = 0/0/0
  size = 4
  has_ra = 1
  ra_num = 1
  ra_mod = NO_MOD
  has_ur = 0
  ur_num = 0
  ur_mod = NO_MOD
  has_imm = 0
  imm = 0
instruction size is 4
Instr 481 @ 0x1e10 (7696) - BSYNC B1 ;
  has_guard_pred = 0
  opcode = BSYNC/BSYNC
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0xb1
instruction size is 4
Instr 482 @ 0x1e20 (7712) - IMAD.SHL.U32 R7, R5, 0x8, RZ ;
  has_guard_pred = 0
  opcode = IMAD.SHL.U32/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 7
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 5
  prop = 
--op[2].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x8
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
instruction size is 4
Instr 483 @ 0x1e30 (7728) - ULDC.64 UR4, c[0x0][0x118] ;
  has_guard_pred = 0
  opcode = ULDC.64/ULDC
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 8
--op[0].type = UREG
  is_neg/is_not/abs = 0/0/0
  size = 8
  num = 4
  prop = 
--op[1].type = CBANK
  is_neg/is_not/abs = 0/0/0
  size = 8
  id = 0
  has_imm_offset = 1
  imm_offset = 280
  has_reg_offset = 0
  reg_offset = 0
instruction size is 8
Instr 484 @ 0x1e40 (7744) - LOP3.LUT R7, R7, 0x8, RZ, 0xc0, !PT ;
  has_guard_pred = 0
  opcode = LOP3.LUT/LOP3
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 7
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 7
  prop = 
--op[2].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x8
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[4].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0xc0
--op[5].type = PRED
  is_neg/is_not/abs = 0/1/0
  size = 1
  num = 7
instruction size is 4
Instr 485 @ 0x1e50 (7760) - IMAD.WIDE R22, R7, 0x8, R38 ;
  has_guard_pred = 0
  opcode = IMAD.WIDE/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 22
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 7
  prop = 
--op[2].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x8
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 38
  prop = 
instruction size is 4
Instr 486 @ 0x1e60 (7776) - LDG.E.64.CONSTANT R24, [R22.64+0x8] ;
  has_guard_pred = 0
  opcode = LDG.E.64.CONSTANT/LDG
  memop = GLOBAL
  format = INT64
  load/store = 1/0
  size = 8
  is_extended = 1
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 8
  num = 24
  prop = 
--op[1].type = MREF
  is_neg/is_not/abs = 0/0/0
  size = 8
  has_ra = 1
  ra_num = 22
  ra_mod = 64
  has_ur = 0
  ur_num = 0
  ur_mod = NO_MOD
  has_imm = 1
  imm = 8
instruction size is 8
Instr 487 @ 0x1e70 (7792) - LDG.E.64.CONSTANT R26, [R22.64+0x10] ;
  has_guard_pred = 0
  opcode = LDG.E.64.CONSTANT/LDG
  memop = GLOBAL
  format = INT64
  load/store = 1/0
  size = 8
  is_extended = 1
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 8
  num = 26
  prop = 
--op[1].type = MREF
  is_neg/is_not/abs = 0/0/0
  size = 8
  has_ra = 1
  ra_num = 22
  ra_mod = 64
  has_ur = 0
  ur_num = 0
  ur_mod = NO_MOD
  has_imm = 1
  imm = 16
instruction size is 8
Instr 488 @ 0x1e80 (7808) - LDG.E.64.CONSTANT R28, [R22.64+0x18] ;
  has_guard_pred = 0
  opcode = LDG.E.64.CONSTANT/LDG
  memop = GLOBAL
  format = INT64
  load/store = 1/0
  size = 8
  is_extended = 1
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 8
  num = 28
  prop = 
--op[1].type = MREF
  is_neg/is_not/abs = 0/0/0
  size = 8
  has_ra = 1
  ra_num = 22
  ra_mod = 64
  has_ur = 0
  ur_num = 0
  ur_mod = NO_MOD
  has_imm = 1
  imm = 24
instruction size is 8
Instr 489 @ 0x1e90 (7824) - LDG.E.64.CONSTANT R30, [R22.64+0x20] ;
  has_guard_pred = 0
  opcode = LDG.E.64.CONSTANT/LDG
  memop = GLOBAL
  format = INT64
  load/store = 1/0
  size = 8
  is_extended = 1
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 8
  num = 30
  prop = 
--op[1].type = MREF
  is_neg/is_not/abs = 0/0/0
  size = 8
  has_ra = 1
  ra_num = 22
  ra_mod = 64
  has_ur = 0
  ur_num = 0
  ur_mod = NO_MOD
  has_imm = 1
  imm = 32
instruction size is 8
Instr 490 @ 0x1ea0 (7840) - LDG.E.64.CONSTANT R32, [R22.64+0x28] ;
  has_guard_pred = 0
  opcode = LDG.E.64.CONSTANT/LDG
  memop = GLOBAL
  format = INT64
  load/store = 1/0
  size = 8
  is_extended = 1
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 8
  num = 32
  prop = 
--op[1].type = MREF
  is_neg/is_not/abs = 0/0/0
  size = 8
  has_ra = 1
  ra_num = 22
  ra_mod = 64
  has_ur = 0
  ur_num = 0
  ur_mod = NO_MOD
  has_imm = 1
  imm = 40
instruction size is 8
Instr 491 @ 0x1eb0 (7856) - LDG.E.64.CONSTANT R42, [R22.64+0x30] ;
  has_guard_pred = 0
  opcode = LDG.E.64.CONSTANT/LDG
  memop = GLOBAL
  format = INT64
  load/store = 1/0
  size = 8
  is_extended = 1
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 8
  num = 42
  prop = 
--op[1].type = MREF
  is_neg/is_not/abs = 0/0/0
  size = 8
  has_ra = 1
  ra_num = 22
  ra_mod = 64
  has_ur = 0
  ur_num = 0
  ur_mod = NO_MOD
  has_imm = 1
  imm = 48
instruction size is 8
Instr 492 @ 0x1ec0 (7872) - R2P PR, R5, 0x3 ;
  has_guard_pred = 0
  opcode = R2P/R2P
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 8
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 5
  prop = 
--op[2].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x3
instruction size is 4
Instr 493 @ 0x1ed0 (7888) - IMAD.MOV.U32 R44, RZ, RZ, 0x79785eba ;
  has_guard_pred = 0
  opcode = IMAD.MOV.U32/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 44
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x79785eba
instruction size is 4
Instr 494 @ 0x1ee0 (7904) - DMUL R20, R10, R10 ;
  has_guard_pred = 0
  opcode = DMUL/DMUL
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 20
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 10
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 10
  prop = 
instruction size is 4
Instr 495 @ 0x1ef0 (7920) - IMAD.MOV.U32 R5, RZ, RZ, 0x3de5db65 ;
  has_guard_pred = 0
  opcode = IMAD.MOV.U32/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 5
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x3de5db65
instruction size is 4
Instr 496 @ 0x1f00 (7936) - FSEL R44, -R44, 4.2945490664224492434e-19, !P0 ;
  has_guard_pred = 0
  opcode = FSEL/FSEL
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 44
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 1/0/0
  size = 4
  num = 44
  prop = 
--op[2].type = IMM_DOUBLE
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 4.294549e-19
--op[3].type = PRED
  is_neg/is_not/abs = 0/1/0
  size = 1
  num = 0
instruction size is 4
Instr 497 @ 0x1f10 (7952) - FSEL R45, R5, -0.082518599927425384521, !P0 ;
  has_guard_pred = 0
  opcode = FSEL/FSEL
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 45
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 5
  prop = 
--op[2].type = IMM_DOUBLE
  is_neg/is_not/abs = 1/0/0
  size = 8
  value = -8.251860e-02
--op[3].type = PRED
  is_neg/is_not/abs = 0/1/0
  size = 1
  num = 0
instruction size is 4
Instr 498 @ 0x1f20 (7968) - DFMA R24, R20, R44, R24 ;
  has_guard_pred = 0
  opcode = DFMA/DFMA
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 24
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 20
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 44
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 24
  prop = 
instruction size is 4
Instr 499 @ 0x1f30 (7984) - DFMA R24, R20, R24, R26 ;
  has_guard_pred = 0
  opcode = DFMA/DFMA
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 24
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 20
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 24
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 26
  prop = 
instruction size is 4
Instr 500 @ 0x1f40 (8000) - DFMA R24, R20, R24, R28 ;
  has_guard_pred = 0
  opcode = DFMA/DFMA
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 24
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 20
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 24
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 28
  prop = 
instruction size is 4
Instr 501 @ 0x1f50 (8016) - DFMA R24, R20, R24, R30 ;
  has_guard_pred = 0
  opcode = DFMA/DFMA
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 24
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 20
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 24
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 30
  prop = 
instruction size is 4
Instr 502 @ 0x1f60 (8032) - DFMA R24, R20, R24, R32 ;
  has_guard_pred = 0
  opcode = DFMA/DFMA
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 24
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 20
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 24
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 32
  prop = 
instruction size is 4
Instr 503 @ 0x1f70 (8048) - DFMA R24, R20, R24, R42 ;
  has_guard_pred = 0
  opcode = DFMA/DFMA
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 24
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 20
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 24
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 42
  prop = 
instruction size is 4
Instr 504 @ 0x1f80 (8064) - DFMA R22, R24, R10, R10 ;
  has_guard_pred = 0
  opcode = DFMA/DFMA
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 22
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 24
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 10
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 10
  prop = 
instruction size is 4
Instr 505 @ 0x1f90 (8080) - MOV R10, 0x1ff0 ;
  has_guard_pred = 0
  opcode = MOV/MOV
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 10
  prop = 
--op[1].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x1ff0
instruction size is 4
Instr 506 @ 0x1fa0 (8096) - @P0 DFMA R22, R20, R24, 1 ;
  has_guard_pred = 1
  guard_pred_num = 0
  guard_pred_negated = 0
  guard_pred_uniform = 0
  opcode = DFMA/DFMA
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 22
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 20
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 24
  prop = 
--op[3].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x1
instruction size is 4
Instr 507 @ 0x1fb0 (8112) - IMAD.MOV.U32 R24, RZ, RZ, 0x3b375450 ;
  has_guard_pred = 0
  opcode = IMAD.MOV.U32/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 24
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x3b375450
instruction size is 4
Instr 508 @ 0x1fc0 (8128) - MOV R25, 0x8035e46e ;
  has_guard_pred = 0
  opcode = MOV/MOV
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 25
  prop = 
--op[1].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x8035e46e
instruction size is 4
Instr 509 @ 0x1fd0 (8144) - @P1 DFMA R22, R22, -1, RZ ;
  has_guard_pred = 1
  guard_pred_num = 1
  guard_pred_negated = 0
  guard_pred_uniform = 0
  opcode = DFMA/DFMA
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 22
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 22
  prop = 
--op[2].type = IMM_UINT64
  is_neg/is_not/abs = 1/0/0
  size = 8
  value = 0xffffffffffffffff
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
instruction size is 4
Instr 510 @ 0x1fe0 (8160) - CALL.REL.NOINC 0x2c00 ;
  has_guard_pred = 0
  opcode = CALL.REL.NOINC/CALL
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x2c00
instruction size is 4
Instr 511 @ 0x1ff0 (8176) - MUFU.RCP64H R11, R13 ;
  has_guard_pred = 0
  opcode = MUFU.RCP64H/MUFU
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 11
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 13
  prop = 
instruction size is 4
Instr 512 @ 0x2000 (8192) - IMAD.MOV.U32 R10, RZ, RZ, 0x1 ;
  has_guard_pred = 0
  opcode = IMAD.MOV.U32/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 10
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x1
instruction size is 4
Instr 513 @ 0x2010 (8208) - DMUL R22, R24, R18 ;
  has_guard_pred = 0
  opcode = DMUL/DMUL
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 22
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 24
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 18
  prop = 
instruction size is 4
Instr 514 @ 0x2020 (8224) - ULDC.64 UR4, c[0x0][0x118] ;
  has_guard_pred = 0
  opcode = ULDC.64/ULDC
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 8
--op[0].type = UREG
  is_neg/is_not/abs = 0/0/0
  size = 8
  num = 4
  prop = 
--op[1].type = CBANK
  is_neg/is_not/abs = 0/0/0
  size = 8
  id = 0
  has_imm_offset = 1
  imm_offset = 280
  has_reg_offset = 0
  reg_offset = 0
instruction size is 8
Instr 515 @ 0x2030 (8240) - BSSY B1, 0x2180 ;
  has_guard_pred = 0
  opcode = BSSY/BSSY
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0xb1
--op[1].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x2180
instruction size is 4
Instr 516 @ 0x2040 (8256) - STG.E.64 [R40.64], R24 ;
  has_guard_pred = 0
  opcode = STG.E.64/STG
  memop = GLOBAL
  format = INT64
  load/store = 0/1
  size = 8
  is_extended = 1
--op[0].type = MREF
  is_neg/is_not/abs = 0/0/0
  size = 8
  has_ra = 1
  ra_num = 40
  ra_mod = 64
  has_ur = 0
  ur_num = 0
  ur_mod = NO_MOD
  has_imm = 0
  imm = 0
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 8
  num = 24
  prop = 
instruction size is 8
Instr 517 @ 0x2050 (8272) - FSETP.GTU.AND P1, PT, |R23|, 6.4490557925156731238e-37, PT ;
  has_guard_pred = 0
  opcode = FSETP.GTU.AND/FSETP
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 1
--op[1].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 7
--op[2].type = REG
  is_neg/is_not/abs = 0/0/1
  size = 4
  num = 23
  prop = 
--op[3].type = IMM_DOUBLE
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 6.449056e-37
--op[4].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 7
instruction size is 4
Instr 518 @ 0x2060 (8288) - DFMA R20, -R12, R10, 1 ;
  has_guard_pred = 0
  opcode = DFMA/DFMA
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 20
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 1/0/0
  size = 4
  num = 12
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 10
  prop = 
--op[3].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x1
instruction size is 4
Instr 519 @ 0x2070 (8304) - DFMA R20, R20, R20, R20 ;
  has_guard_pred = 0
  opcode = DFMA/DFMA
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 20
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 20
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 20
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 20
  prop = 
instruction size is 4
Instr 520 @ 0x2080 (8320) - DFMA R26, R10, R20, R10 ;
  has_guard_pred = 0
  opcode = DFMA/DFMA
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 26
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 10
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 20
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 10
  prop = 
instruction size is 4
Instr 521 @ 0x2090 (8336) - DMUL R10, R22, R26 ;
  has_guard_pred = 0
  opcode = DMUL/DMUL
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 10
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 22
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 26
  prop = 
instruction size is 4
Instr 522 @ 0x20a0 (8352) - DFMA R20, -R12, R10, R22 ;
  has_guard_pred = 0
  opcode = DFMA/DFMA
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 20
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 1/0/0
  size = 4
  num = 12
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 10
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 22
  prop = 
instruction size is 4
Instr 523 @ 0x20b0 (8368) - DFMA R10, R20, R26, R10 ;
  has_guard_pred = 0
  opcode = DFMA/DFMA
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 10
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 20
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 26
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 10
  prop = 
instruction size is 4
Instr 524 @ 0x20c0 (8384) - FFMA R5, RZ, R13, R11 ;
  has_guard_pred = 0
  opcode = FFMA/FFMA
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 5
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 13
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 11
  prop = 
instruction size is 4
Instr 525 @ 0x20d0 (8400) - FSETP.GT.AND P0, PT, |R5|, 4.8978884574313168671e-40, PT ;
  has_guard_pred = 0
  opcode = FSETP.GT.AND/FSETP
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 0
--op[1].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 7
--op[2].type = REG
  is_neg/is_not/abs = 0/0/1
  size = 4
  num = 5
  prop = 
--op[3].type = IMM_DOUBLE
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 4.897888e-40
--op[4].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 7
instruction size is 4
Instr 526 @ 0x20e0 (8416) - @P0 BRA P1, 0x2170 ;
  has_guard_pred = 1
  guard_pred_num = 0
  guard_pred_negated = 0
  guard_pred_uniform = 0
  opcode = BRA/BRA
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 1
--op[1].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x2170
instruction size is 4
Instr 527 @ 0x20f0 (8432) - IMAD.MOV.U32 R24, RZ, RZ, R22 ;
  has_guard_pred = 0
  opcode = IMAD.MOV.U32/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 24
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 22
  prop = 
instruction size is 4
Instr 528 @ 0x2100 (8448) - MOV R10, 0x2150 ;
  has_guard_pred = 0
  opcode = MOV/MOV
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 10
  prop = 
--op[1].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x2150
instruction size is 4
Instr 529 @ 0x2110 (8464) - IMAD.MOV.U32 R25, RZ, RZ, R23 ;
  has_guard_pred = 0
  opcode = IMAD.MOV.U32/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 25
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 23
  prop = 
instruction size is 4
Instr 530 @ 0x2120 (8480) - IMAD.MOV.U32 R22, RZ, RZ, R12 ;
  has_guard_pred = 0
  opcode = IMAD.MOV.U32/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 22
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 12
  prop = 
instruction size is 4
Instr 531 @ 0x2130 (8496) - IMAD.MOV.U32 R23, RZ, RZ, R13 ;
  has_guard_pred = 0
  opcode = IMAD.MOV.U32/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 23
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 13
  prop = 
instruction size is 4
Instr 532 @ 0x2140 (8512) - CALL.REL.NOINC 0x2c00 ;
  has_guard_pred = 0
  opcode = CALL.REL.NOINC/CALL
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x2c00
instruction size is 4
Instr 533 @ 0x2150 (8528) - IMAD.MOV.U32 R10, RZ, RZ, R24 ;
  has_guard_pred = 0
  opcode = IMAD.MOV.U32/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 10
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 24
  prop = 
instruction size is 4
Instr 534 @ 0x2160 (8544) - IMAD.MOV.U32 R11, RZ, RZ, R25 ;
  has_guard_pred = 0
  opcode = IMAD.MOV.U32/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 11
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 25
  prop = 
instruction size is 4
Instr 535 @ 0x2170 (8560) - BSYNC B1 ;
  has_guard_pred = 0
  opcode = BSYNC/BSYNC
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0xb1
instruction size is 4
Instr 536 @ 0x2180 (8576) - STL [R1], R0 ;
  has_guard_pred = 0
  opcode = STL/STL
  memop = LOCAL
  format = INT32
  load/store = 0/1
  size = 4
  is_extended = 0
--op[0].type = MREF
  is_neg/is_not/abs = 0/0/0
  size = 4
  has_ra = 1
  ra_num = 1
  ra_mod = NO_MOD
  has_ur = 0
  ur_num = 0
  ur_mod = NO_MOD
  has_imm = 0
  imm = 0
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 0
  prop = 
instruction size is 4
Instr 537 @ 0x2190 (8592) - BSSY B1, 0x2250 ;
  has_guard_pred = 0
  opcode = BSSY/BSSY
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0xb1
--op[1].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x2250
instruction size is 4
Instr 538 @ 0x21a0 (8608) - DADD R2, R10, R2 ;
  has_guard_pred = 0
  opcode = DADD/DADD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 2
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 10
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 2
  prop = 
instruction size is 4
Instr 539 @ 0x21b0 (8624) - IMAD.MOV.U32 R5, RZ, RZ, R0 ;
  has_guard_pred = 0
  opcode = IMAD.MOV.U32/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 5
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 0
  prop = 
instruction size is 4
Instr 540 @ 0x21c0 (8640) - IMAD.MOV.U32 R10, RZ, RZ, R36 ;
  has_guard_pred = 0
  opcode = IMAD.MOV.U32/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 10
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 36
  prop = 
instruction size is 4
Instr 541 @ 0x21d0 (8656) - IMAD.MOV.U32 R11, RZ, RZ, R37 ;
  has_guard_pred = 0
  opcode = IMAD.MOV.U32/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 11
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 37
  prop = 
instruction size is 4
Instr 542 @ 0x21e0 (8672) - @!P2 BRA 0x2240 ;
  has_guard_pred = 1
  guard_pred_num = 2
  guard_pred_negated = 1
  guard_pred_uniform = 0
  opcode = BRA/BRA
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x2240
instruction size is 4
Instr 543 @ 0x21f0 (8688) - IMAD.MOV.U32 R9, RZ, RZ, R34 ;
  has_guard_pred = 0
  opcode = IMAD.MOV.U32/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 9
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 34
  prop = 
instruction size is 4
Instr 544 @ 0x2200 (8704) - MOV R26, 0x2230 ;
  has_guard_pred = 0
  opcode = MOV/MOV
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 26
  prop = 
--op[1].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x2230
instruction size is 4
Instr 545 @ 0x2210 (8720) - IMAD.MOV.U32 R5, RZ, RZ, R35 ;
  has_guard_pred = 0
  opcode = IMAD.MOV.U32/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 5
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 35
  prop = 
instruction size is 4
Instr 546 @ 0x2220 (8736) - CALL.REL.NOINC 0x33d0 ;
  has_guard_pred = 0
  opcode = CALL.REL.NOINC/CALL
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x33d0
instruction size is 4
Instr 547 @ 0x2230 (8752) - LDL R5, [R1] ;
  has_guard_pred = 0
  opcode = LDL/LDL
  memop = LOCAL
  format = INT32
  load/store = 1/0
  size = 4
  is_extended = 0
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 5
  prop = 
--op[1].type = MREF
  is_neg/is_not/abs = 0/0/0
  size = 4
  has_ra = 1
  ra_num = 1
  ra_mod = NO_MOD
  has_ur = 0
  ur_num = 0
  ur_mod = NO_MOD
  has_imm = 0
  imm = 0
instruction size is 4
Instr 548 @ 0x2240 (8768) - BSYNC B1 ;
  has_guard_pred = 0
  opcode = BSYNC/BSYNC
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0xb1
instruction size is 4
Instr 549 @ 0x2250 (8784) - SHF.L.U32 R7, R5, 0x3, RZ ;
  has_guard_pred = 0
  opcode = SHF.L.U32/SHF
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 7
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 5
  prop = 
--op[2].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x3
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
instruction size is 4
Instr 550 @ 0x2260 (8800) - ULDC.64 UR4, c[0x0][0x118] ;
  has_guard_pred = 0
  opcode = ULDC.64/ULDC
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 8
--op[0].type = UREG
  is_neg/is_not/abs = 0/0/0
  size = 8
  num = 4
  prop = 
--op[1].type = CBANK
  is_neg/is_not/abs = 0/0/0
  size = 8
  id = 0
  has_imm_offset = 1
  imm_offset = 280
  has_reg_offset = 0
  reg_offset = 0
instruction size is 8
Instr 551 @ 0x2270 (8816) - LOP3.LUT R7, R7, 0x8, RZ, 0xc0, !PT ;
  has_guard_pred = 0
  opcode = LOP3.LUT/LOP3
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 7
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 7
  prop = 
--op[2].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x8
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[4].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0xc0
--op[5].type = PRED
  is_neg/is_not/abs = 0/1/0
  size = 1
  num = 7
instruction size is 4
Instr 552 @ 0x2280 (8832) - IMAD.WIDE R22, R7, 0x8, R38 ;
  has_guard_pred = 0
  opcode = IMAD.WIDE/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 22
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 7
  prop = 
--op[2].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x8
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 38
  prop = 
instruction size is 4
Instr 553 @ 0x2290 (8848) - LDG.E.64.CONSTANT R24, [R22.64+0x8] ;
  has_guard_pred = 0
  opcode = LDG.E.64.CONSTANT/LDG
  memop = GLOBAL
  format = INT64
  load/store = 1/0
  size = 8
  is_extended = 1
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 8
  num = 24
  prop = 
--op[1].type = MREF
  is_neg/is_not/abs = 0/0/0
  size = 8
  has_ra = 1
  ra_num = 22
  ra_mod = 64
  has_ur = 0
  ur_num = 0
  ur_mod = NO_MOD
  has_imm = 1
  imm = 8
instruction size is 8
Instr 554 @ 0x22a0 (8864) - LDG.E.64.CONSTANT R26, [R22.64+0x10] ;
  has_guard_pred = 0
  opcode = LDG.E.64.CONSTANT/LDG
  memop = GLOBAL
  format = INT64
  load/store = 1/0
  size = 8
  is_extended = 1
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 8
  num = 26
  prop = 
--op[1].type = MREF
  is_neg/is_not/abs = 0/0/0
  size = 8
  has_ra = 1
  ra_num = 22
  ra_mod = 64
  has_ur = 0
  ur_num = 0
  ur_mod = NO_MOD
  has_imm = 1
  imm = 16
instruction size is 8
Instr 555 @ 0x22b0 (8880) - LDG.E.64.CONSTANT R28, [R22.64+0x18] ;
  has_guard_pred = 0
  opcode = LDG.E.64.CONSTANT/LDG
  memop = GLOBAL
  format = INT64
  load/store = 1/0
  size = 8
  is_extended = 1
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 8
  num = 28
  prop = 
--op[1].type = MREF
  is_neg/is_not/abs = 0/0/0
  size = 8
  has_ra = 1
  ra_num = 22
  ra_mod = 64
  has_ur = 0
  ur_num = 0
  ur_mod = NO_MOD
  has_imm = 1
  imm = 24
instruction size is 8
Instr 556 @ 0x22c0 (8896) - LDG.E.64.CONSTANT R30, [R22.64+0x20] ;
  has_guard_pred = 0
  opcode = LDG.E.64.CONSTANT/LDG
  memop = GLOBAL
  format = INT64
  load/store = 1/0
  size = 8
  is_extended = 1
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 8
  num = 30
  prop = 
--op[1].type = MREF
  is_neg/is_not/abs = 0/0/0
  size = 8
  has_ra = 1
  ra_num = 22
  ra_mod = 64
  has_ur = 0
  ur_num = 0
  ur_mod = NO_MOD
  has_imm = 1
  imm = 32
instruction size is 8
Instr 557 @ 0x22d0 (8912) - LDG.E.64.CONSTANT R32, [R22.64+0x28] ;
  has_guard_pred = 0
  opcode = LDG.E.64.CONSTANT/LDG
  memop = GLOBAL
  format = INT64
  load/store = 1/0
  size = 8
  is_extended = 1
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 8
  num = 32
  prop = 
--op[1].type = MREF
  is_neg/is_not/abs = 0/0/0
  size = 8
  has_ra = 1
  ra_num = 22
  ra_mod = 64
  has_ur = 0
  ur_num = 0
  ur_mod = NO_MOD
  has_imm = 1
  imm = 40
instruction size is 8
Instr 558 @ 0x22e0 (8928) - LDG.E.64.CONSTANT R42, [R22.64+0x30] ;
  has_guard_pred = 0
  opcode = LDG.E.64.CONSTANT/LDG
  memop = GLOBAL
  format = INT64
  load/store = 1/0
  size = 8
  is_extended = 1
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 8
  num = 42
  prop = 
--op[1].type = MREF
  is_neg/is_not/abs = 0/0/0
  size = 8
  has_ra = 1
  ra_num = 22
  ra_mod = 64
  has_ur = 0
  ur_num = 0
  ur_mod = NO_MOD
  has_imm = 1
  imm = 48
instruction size is 8
Instr 559 @ 0x22f0 (8944) - R2P PR, R5, 0x3 ;
  has_guard_pred = 0
  opcode = R2P/R2P
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 8
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 5
  prop = 
--op[2].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x3
instruction size is 4
Instr 560 @ 0x2300 (8960) - IMAD.MOV.U32 R44, RZ, RZ, 0x79785eba ;
  has_guard_pred = 0
  opcode = IMAD.MOV.U32/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 44
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x79785eba
instruction size is 4
Instr 561 @ 0x2310 (8976) - DMUL R20, R10, R10 ;
  has_guard_pred = 0
  opcode = DMUL/DMUL
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 20
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 10
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 10
  prop = 
instruction size is 4
Instr 562 @ 0x2320 (8992) - IMAD.MOV.U32 R5, RZ, RZ, 0x3de5db65 ;
  has_guard_pred = 0
  opcode = IMAD.MOV.U32/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 5
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x3de5db65
instruction size is 4
Instr 563 @ 0x2330 (9008) - FSEL R44, -R44, 4.2945490664224492434e-19, !P0 ;
  has_guard_pred = 0
  opcode = FSEL/FSEL
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 44
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 1/0/0
  size = 4
  num = 44
  prop = 
--op[2].type = IMM_DOUBLE
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 4.294549e-19
--op[3].type = PRED
  is_neg/is_not/abs = 0/1/0
  size = 1
  num = 0
instruction size is 4
Instr 564 @ 0x2340 (9024) - FSEL R45, R5, -0.082518599927425384521, !P0 ;
  has_guard_pred = 0
  opcode = FSEL/FSEL
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 45
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 5
  prop = 
--op[2].type = IMM_DOUBLE
  is_neg/is_not/abs = 1/0/0
  size = 8
  value = -8.251860e-02
--op[3].type = PRED
  is_neg/is_not/abs = 0/1/0
  size = 1
  num = 0
instruction size is 4
Instr 565 @ 0x2350 (9040) - DFMA R24, R20, R44, R24 ;
  has_guard_pred = 0
  opcode = DFMA/DFMA
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 24
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 20
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 44
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 24
  prop = 
instruction size is 4
Instr 566 @ 0x2360 (9056) - DFMA R24, R20, R24, R26 ;
  has_guard_pred = 0
  opcode = DFMA/DFMA
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 24
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 20
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 24
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 26
  prop = 
instruction size is 4
Instr 567 @ 0x2370 (9072) - DFMA R24, R20, R24, R28 ;
  has_guard_pred = 0
  opcode = DFMA/DFMA
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 24
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 20
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 24
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 28
  prop = 
instruction size is 4
Instr 568 @ 0x2380 (9088) - DFMA R24, R20, R24, R30 ;
  has_guard_pred = 0
  opcode = DFMA/DFMA
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 24
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 20
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 24
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 30
  prop = 
instruction size is 4
Instr 569 @ 0x2390 (9104) - DFMA R24, R20, R24, R32 ;
  has_guard_pred = 0
  opcode = DFMA/DFMA
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 24
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 20
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 24
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 32
  prop = 
instruction size is 4
Instr 570 @ 0x23a0 (9120) - DFMA R24, R20, R24, R42 ;
  has_guard_pred = 0
  opcode = DFMA/DFMA
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 24
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 20
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 24
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 42
  prop = 
instruction size is 4
Instr 571 @ 0x23b0 (9136) - DFMA R22, R24, R10, R10 ;
  has_guard_pred = 0
  opcode = DFMA/DFMA
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 22
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 24
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 10
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 10
  prop = 
instruction size is 4
Instr 572 @ 0x23c0 (9152) - MOV R10, 0x2420 ;
  has_guard_pred = 0
  opcode = MOV/MOV
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 10
  prop = 
--op[1].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x2420
instruction size is 4
Instr 573 @ 0x23d0 (9168) - @P0 DFMA R22, R20, R24, 1 ;
  has_guard_pred = 1
  guard_pred_num = 0
  guard_pred_negated = 0
  guard_pred_uniform = 0
  opcode = DFMA/DFMA
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 22
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 20
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 24
  prop = 
--op[3].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x1
instruction size is 4
Instr 574 @ 0x23e0 (9184) - IMAD.MOV.U32 R24, RZ, RZ, 0x3b375450 ;
  has_guard_pred = 0
  opcode = IMAD.MOV.U32/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 24
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x3b375450
instruction size is 4
Instr 575 @ 0x23f0 (9200) - IMAD.MOV.U32 R25, RZ, RZ, -0x7fca1b92 ;
  has_guard_pred = 0
  opcode = IMAD.MOV.U32/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 25
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = IMM_UINT64
  is_neg/is_not/abs = 1/0/0
  size = 8
  value = 0xffffffff8035e46e
instruction size is 4
Instr 576 @ 0x2400 (9216) - @P1 DFMA R22, R22, -1, RZ ;
  has_guard_pred = 1
  guard_pred_num = 1
  guard_pred_negated = 0
  guard_pred_uniform = 0
  opcode = DFMA/DFMA
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 22
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 22
  prop = 
--op[2].type = IMM_UINT64
  is_neg/is_not/abs = 1/0/0
  size = 8
  value = 0xffffffffffffffff
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
instruction size is 4
Instr 577 @ 0x2410 (9232) - CALL.REL.NOINC 0x2c00 ;
  has_guard_pred = 0
  opcode = CALL.REL.NOINC/CALL
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x2c00
instruction size is 4
Instr 578 @ 0x2420 (9248) - MUFU.RCP64H R11, R13 ;
  has_guard_pred = 0
  opcode = MUFU.RCP64H/MUFU
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 11
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 13
  prop = 
instruction size is 4
Instr 579 @ 0x2430 (9264) - IMAD.MOV.U32 R10, RZ, RZ, 0x1 ;
  has_guard_pred = 0
  opcode = IMAD.MOV.U32/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 10
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x1
instruction size is 4
Instr 580 @ 0x2440 (9280) - DMUL R22, R24, R18 ;
  has_guard_pred = 0
  opcode = DMUL/DMUL
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 22
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 24
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 18
  prop = 
instruction size is 4
Instr 581 @ 0x2450 (9296) - ULDC.64 UR4, c[0x0][0x118] ;
  has_guard_pred = 0
  opcode = ULDC.64/ULDC
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 8
--op[0].type = UREG
  is_neg/is_not/abs = 0/0/0
  size = 8
  num = 4
  prop = 
--op[1].type = CBANK
  is_neg/is_not/abs = 0/0/0
  size = 8
  id = 0
  has_imm_offset = 1
  imm_offset = 280
  has_reg_offset = 0
  reg_offset = 0
instruction size is 8
Instr 582 @ 0x2460 (9312) - BSSY B1, 0x25b0 ;
  has_guard_pred = 0
  opcode = BSSY/BSSY
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0xb1
--op[1].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x25b0
instruction size is 4
Instr 583 @ 0x2470 (9328) - STG.E.64 [R40.64+0x8], R24 ;
  has_guard_pred = 0
  opcode = STG.E.64/STG
  memop = GLOBAL
  format = INT64
  load/store = 0/1
  size = 8
  is_extended = 1
--op[0].type = MREF
  is_neg/is_not/abs = 0/0/0
  size = 8
  has_ra = 1
  ra_num = 40
  ra_mod = 64
  has_ur = 0
  ur_num = 0
  ur_mod = NO_MOD
  has_imm = 1
  imm = 8
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 8
  num = 24
  prop = 
instruction size is 8
Instr 584 @ 0x2480 (9344) - FSETP.GTU.AND P1, PT, |R23|, 6.4490557925156731238e-37, PT ;
  has_guard_pred = 0
  opcode = FSETP.GTU.AND/FSETP
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 1
--op[1].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 7
--op[2].type = REG
  is_neg/is_not/abs = 0/0/1
  size = 4
  num = 23
  prop = 
--op[3].type = IMM_DOUBLE
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 6.449056e-37
--op[4].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 7
instruction size is 4
Instr 585 @ 0x2490 (9360) - DFMA R20, -R12, R10, 1 ;
  has_guard_pred = 0
  opcode = DFMA/DFMA
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 20
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 1/0/0
  size = 4
  num = 12
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 10
  prop = 
--op[3].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x1
instruction size is 4
Instr 586 @ 0x24a0 (9376) - DFMA R20, R20, R20, R20 ;
  has_guard_pred = 0
  opcode = DFMA/DFMA
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 20
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 20
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 20
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 20
  prop = 
instruction size is 4
Instr 587 @ 0x24b0 (9392) - DFMA R26, R10, R20, R10 ;
  has_guard_pred = 0
  opcode = DFMA/DFMA
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 26
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 10
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 20
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 10
  prop = 
instruction size is 4
Instr 588 @ 0x24c0 (9408) - DMUL R10, R22, R26 ;
  has_guard_pred = 0
  opcode = DMUL/DMUL
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 10
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 22
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 26
  prop = 
instruction size is 4
Instr 589 @ 0x24d0 (9424) - DFMA R20, -R12, R10, R22 ;
  has_guard_pred = 0
  opcode = DFMA/DFMA
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 20
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 1/0/0
  size = 4
  num = 12
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 10
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 22
  prop = 
instruction size is 4
Instr 590 @ 0x24e0 (9440) - DFMA R10, R20, R26, R10 ;
  has_guard_pred = 0
  opcode = DFMA/DFMA
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 10
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 20
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 26
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 10
  prop = 
instruction size is 4
Instr 591 @ 0x24f0 (9456) - FFMA R5, RZ, R13, R11 ;
  has_guard_pred = 0
  opcode = FFMA/FFMA
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 5
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 13
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 11
  prop = 
instruction size is 4
Instr 592 @ 0x2500 (9472) - FSETP.GT.AND P0, PT, |R5|, 4.8978884574313168671e-40, PT ;
  has_guard_pred = 0
  opcode = FSETP.GT.AND/FSETP
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 0
--op[1].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 7
--op[2].type = REG
  is_neg/is_not/abs = 0/0/1
  size = 4
  num = 5
  prop = 
--op[3].type = IMM_DOUBLE
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 4.897888e-40
--op[4].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 7
instruction size is 4
Instr 593 @ 0x2510 (9488) - @P0 BRA P1, 0x25a0 ;
  has_guard_pred = 1
  guard_pred_num = 0
  guard_pred_negated = 0
  guard_pred_uniform = 0
  opcode = BRA/BRA
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 1
--op[1].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x25a0
instruction size is 4
Instr 594 @ 0x2520 (9504) - IMAD.MOV.U32 R24, RZ, RZ, R22 ;
  has_guard_pred = 0
  opcode = IMAD.MOV.U32/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 24
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 22
  prop = 
instruction size is 4
Instr 595 @ 0x2530 (9520) - MOV R10, 0x2580 ;
  has_guard_pred = 0
  opcode = MOV/MOV
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 10
  prop = 
--op[1].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x2580
instruction size is 4
Instr 596 @ 0x2540 (9536) - IMAD.MOV.U32 R25, RZ, RZ, R23 ;
  has_guard_pred = 0
  opcode = IMAD.MOV.U32/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 25
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 23
  prop = 
instruction size is 4
Instr 597 @ 0x2550 (9552) - IMAD.MOV.U32 R22, RZ, RZ, R12 ;
  has_guard_pred = 0
  opcode = IMAD.MOV.U32/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 22
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 12
  prop = 
instruction size is 4
Instr 598 @ 0x2560 (9568) - IMAD.MOV.U32 R23, RZ, RZ, R13 ;
  has_guard_pred = 0
  opcode = IMAD.MOV.U32/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 23
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 13
  prop = 
instruction size is 4
Instr 599 @ 0x2570 (9584) - CALL.REL.NOINC 0x2c00 ;
  has_guard_pred = 0
  opcode = CALL.REL.NOINC/CALL
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x2c00
instruction size is 4
Instr 600 @ 0x2580 (9600) - IMAD.MOV.U32 R10, RZ, RZ, R24 ;
  has_guard_pred = 0
  opcode = IMAD.MOV.U32/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 10
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 24
  prop = 
instruction size is 4
Instr 601 @ 0x2590 (9616) - IMAD.MOV.U32 R11, RZ, RZ, R25 ;
  has_guard_pred = 0
  opcode = IMAD.MOV.U32/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 11
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 25
  prop = 
instruction size is 4
Instr 602 @ 0x25a0 (9632) - BSYNC B1 ;
  has_guard_pred = 0
  opcode = BSYNC/BSYNC
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0xb1
instruction size is 4
Instr 603 @ 0x25b0 (9648) - IADD3 R40, P0, R40, 0x10, RZ ;
  has_guard_pred = 0
  opcode = IADD3/IADD3
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 40
  prop = 
--op[1].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 0
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 40
  prop = 
--op[3].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x10
--op[4].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
instruction size is 4
Instr 604 @ 0x25c0 (9664) - DADD R2, R2, R10 ;
  has_guard_pred = 0
  opcode = DADD/DADD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 2
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 2
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 10
  prop = 
instruction size is 4
Instr 605 @ 0x25d0 (9680) - IADD3 R14, R14, 0x2, RZ ;
  has_guard_pred = 0
  opcode = IADD3/IADD3
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 14
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 14
  prop = 
--op[2].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x2
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
instruction size is 4
Instr 606 @ 0x25e0 (9696) - IMAD.X R41, RZ, RZ, R41, P0 ;
  has_guard_pred = 0
  opcode = IMAD.X/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 41
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 41
  prop = 
--op[4].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 0
instruction size is 4
Instr 607 @ 0x25f0 (9712) - @P3 BRA 0x1d40 ;
  has_guard_pred = 1
  guard_pred_num = 3
  guard_pred_negated = 0
  guard_pred_uniform = 0
  opcode = BRA/BRA
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x1d40
instruction size is 4
Instr 608 @ 0x2600 (9728) - SHF.R.S32.HI R15, RZ, 0x1f, R14 ;
  has_guard_pred = 0
  opcode = SHF.R.S32.HI/SHF
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 15
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x1f
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 14
  prop = 
instruction size is 4
Instr 609 @ 0x2610 (9744) - ISETP.NE.AND P0, PT, R8, RZ, PT ;
  has_guard_pred = 0
  opcode = ISETP.NE.AND/ISETP
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 0
--op[1].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 7
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 8
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[4].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 7
instruction size is 4
Instr 610 @ 0x2620 (9760) - @!P0 BRA 0x2b40 ;
  has_guard_pred = 1
  guard_pred_num = 0
  guard_pred_negated = 1
  guard_pred_uniform = 0
  opcode = BRA/BRA
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x2b40
instruction size is 4
Instr 611 @ 0x2630 (9776) - DMUL R16, RZ, R16 ;
  has_guard_pred = 0
  opcode = DMUL/DMUL
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 16
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 16
  prop = 
instruction size is 4
Instr 612 @ 0x2640 (9792) - BSSY B1, 0x2770 ;
  has_guard_pred = 0
  opcode = BSSY/BSSY
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0xb1
--op[1].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x2770
instruction size is 4
Instr 613 @ 0x2650 (9808) - DMUL R8, R16, c[0x2][0x28] ;
  has_guard_pred = 0
  opcode = DMUL/DMUL
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 8
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 16
  prop = 
--op[2].type = CBANK
  is_neg/is_not/abs = 0/0/0
  size = 4
  id = 2
  has_imm_offset = 1
  imm_offset = 40
  has_reg_offset = 0
  reg_offset = 0
instruction size is 4
Instr 614 @ 0x2660 (9824) - LOP3.LUT R0, R17, 0x7fe00000, RZ, 0xc0, !PT ;
  has_guard_pred = 0
  opcode = LOP3.LUT/LOP3
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 0
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 17
  prop = 
--op[2].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x7fe00000
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[4].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0xc0
--op[5].type = PRED
  is_neg/is_not/abs = 0/1/0
  size = 1
  num = 7
instruction size is 4
Instr 615 @ 0x2670 (9840) - ISETP.GE.U32.AND P0, PT, R0, 0x41e00000, PT ;
  has_guard_pred = 0
  opcode = ISETP.GE.U32.AND/ISETP
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 0
--op[1].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 7
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 0
  prop = 
--op[3].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x41e00000
--op[4].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 7
instruction size is 4
Instr 616 @ 0x2680 (9856) - F2I.F64 R8, R8 ;
  has_guard_pred = 0
  opcode = F2I.F64/F2I
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 8
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 8
  num = 8
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 8
  num = 8
  prop = 
instruction size is 8
Instr 617 @ 0x2690 (9872) - I2F.F64 R10, R8 ;
  has_guard_pred = 0
  opcode = I2F.F64/I2F
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 8
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 8
  num = 10
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 8
  num = 8
  prop = 
instruction size is 8
Instr 618 @ 0x26a0 (9888) - STL [R1], R8 ;
  has_guard_pred = 0
  opcode = STL/STL
  memop = LOCAL
  format = INT32
  load/store = 0/1
  size = 4
  is_extended = 0
--op[0].type = MREF
  is_neg/is_not/abs = 0/0/0
  size = 4
  has_ra = 1
  ra_num = 1
  ra_mod = NO_MOD
  has_ur = 0
  ur_num = 0
  ur_mod = NO_MOD
  has_imm = 0
  imm = 0
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 8
  prop = 
instruction size is 4
Instr 619 @ 0x26b0 (9904) - DFMA R4, -R10, c[0x2][0x30], R16 ;
  has_guard_pred = 0
  opcode = DFMA/DFMA
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 4
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 1/0/0
  size = 4
  num = 10
  prop = 
--op[2].type = CBANK
  is_neg/is_not/abs = 0/0/0
  size = 4
  id = 2
  has_imm_offset = 1
  imm_offset = 48
  has_reg_offset = 0
  reg_offset = 0
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 16
  prop = 
instruction size is 4
Instr 620 @ 0x26c0 (9920) - DFMA R4, -R10, c[0x2][0x38], R4 ;
  has_guard_pred = 0
  opcode = DFMA/DFMA
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 4
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 1/0/0
  size = 4
  num = 10
  prop = 
--op[2].type = CBANK
  is_neg/is_not/abs = 0/0/0
  size = 4
  id = 2
  has_imm_offset = 1
  imm_offset = 56
  has_reg_offset = 0
  reg_offset = 0
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 4
  prop = 
instruction size is 4
Instr 621 @ 0x26d0 (9936) - DFMA R4, -R10, c[0x2][0x40], R4 ;
  has_guard_pred = 0
  opcode = DFMA/DFMA
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 4
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 1/0/0
  size = 4
  num = 10
  prop = 
--op[2].type = CBANK
  is_neg/is_not/abs = 0/0/0
  size = 4
  id = 2
  has_imm_offset = 1
  imm_offset = 64
  has_reg_offset = 0
  reg_offset = 0
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 4
  prop = 
instruction size is 4
Instr 622 @ 0x26e0 (9952) - @!P0 BRA 0x2760 ;
  has_guard_pred = 1
  guard_pred_num = 0
  guard_pred_negated = 1
  guard_pred_uniform = 0
  opcode = BRA/BRA
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x2760
instruction size is 4
Instr 623 @ 0x26f0 (9968) - MOV R9, R16 ;
  has_guard_pred = 0
  opcode = MOV/MOV
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 9
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 16
  prop = 
instruction size is 4
Instr 624 @ 0x2700 (9984) - IMAD.MOV.U32 R5, RZ, RZ, R17 ;
  has_guard_pred = 0
  opcode = IMAD.MOV.U32/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 5
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 17
  prop = 
instruction size is 4
Instr 625 @ 0x2710 (10000) - MOV R26, 0x2730 ;
  has_guard_pred = 0
  opcode = MOV/MOV
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 26
  prop = 
--op[1].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x2730
instruction size is 4
Instr 626 @ 0x2720 (10016) - CALL.REL.NOINC 0x33d0 ;
  has_guard_pred = 0
  opcode = CALL.REL.NOINC/CALL
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x33d0
instruction size is 4
Instr 627 @ 0x2730 (10032) - LDL R8, [R1] ;
  has_guard_pred = 0
  opcode = LDL/LDL
  memop = LOCAL
  format = INT32
  load/store = 1/0
  size = 4
  is_extended = 0
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 8
  prop = 
--op[1].type = MREF
  is_neg/is_not/abs = 0/0/0
  size = 4
  has_ra = 1
  ra_num = 1
  ra_mod = NO_MOD
  has_ur = 0
  ur_num = 0
  ur_mod = NO_MOD
  has_imm = 0
  imm = 0
instruction size is 4
Instr 628 @ 0x2740 (10048) - IMAD.MOV.U32 R4, RZ, RZ, R10 ;
  has_guard_pred = 0
  opcode = IMAD.MOV.U32/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 4
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 10
  prop = 
instruction size is 4
Instr 629 @ 0x2750 (10064) - IMAD.MOV.U32 R5, RZ, RZ, R11 ;
  has_guard_pred = 0
  opcode = IMAD.MOV.U32/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 5
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 11
  prop = 
instruction size is 4
Instr 630 @ 0x2760 (10080) - BSYNC B1 ;
  has_guard_pred = 0
  opcode = BSYNC/BSYNC
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0xb1
instruction size is 4
Instr 631 @ 0x2770 (10096) - IMAD.SHL.U32 R0, R8, 0x8, RZ ;
  has_guard_pred = 0
  opcode = IMAD.SHL.U32/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 0
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 8
  prop = 
--op[2].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x8
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
instruction size is 4
Instr 632 @ 0x2780 (10112) - UMOV UR4, 0xa6200300 ;
  has_guard_pred = 0
  opcode = UMOV/UMOV
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = UREG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 4
  prop = 
--op[1].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0xa6200300
instruction size is 4
Instr 633 @ 0x2790 (10128) - UMOV UR5, 0x7ffa ;
  has_guard_pred = 0
  opcode = UMOV/UMOV
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = UREG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 5
  prop = 
--op[1].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x7ffa
instruction size is 4
Instr 634 @ 0x27a0 (10144) - IMAD.U32 R10, RZ, RZ, UR4 ;
  has_guard_pred = 0
  opcode = IMAD.U32/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 10
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = UREG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 4
  prop = 
instruction size is 4
Instr 635 @ 0x27b0 (10160) - LOP3.LUT R7, R0, 0x8, RZ, 0xc0, !PT ;
  has_guard_pred = 0
  opcode = LOP3.LUT/LOP3
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 7
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 0
  prop = 
--op[2].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x8
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[4].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0xc0
--op[5].type = PRED
  is_neg/is_not/abs = 0/1/0
  size = 1
  num = 7
instruction size is 4
Instr 636 @ 0x27c0 (10176) - IMAD.U32 R11, RZ, RZ, UR5 ;
  has_guard_pred = 0
  opcode = IMAD.U32/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 11
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = UREG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 5
  prop = 
instruction size is 4
Instr 637 @ 0x27d0 (10192) - ULDC.64 UR4, c[0x0][0x118] ;
  has_guard_pred = 0
  opcode = ULDC.64/ULDC
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 8
--op[0].type = UREG
  is_neg/is_not/abs = 0/0/0
  size = 8
  num = 4
  prop = 
--op[1].type = CBANK
  is_neg/is_not/abs = 0/0/0
  size = 8
  id = 0
  has_imm_offset = 1
  imm_offset = 280
  has_reg_offset = 0
  reg_offset = 0
instruction size is 8
Instr 638 @ 0x27e0 (10208) - IMAD.WIDE R10, R7, 0x8, R10 ;
  has_guard_pred = 0
  opcode = IMAD.WIDE/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 10
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 7
  prop = 
--op[2].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x8
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 10
  prop = 
instruction size is 4
Instr 639 @ 0x27f0 (10224) - LDG.E.64.CONSTANT R16, [R10.64+0x8] ;
  has_guard_pred = 0
  opcode = LDG.E.64.CONSTANT/LDG
  memop = GLOBAL
  format = INT64
  load/store = 1/0
  size = 8
  is_extended = 1
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 8
  num = 16
  prop = 
--op[1].type = MREF
  is_neg/is_not/abs = 0/0/0
  size = 8
  has_ra = 1
  ra_num = 10
  ra_mod = 64
  has_ur = 0
  ur_num = 0
  ur_mod = NO_MOD
  has_imm = 1
  imm = 8
instruction size is 8
Instr 640 @ 0x2800 (10240) - LDG.E.64.CONSTANT R20, [R10.64+0x10] ;
  has_guard_pred = 0
  opcode = LDG.E.64.CONSTANT/LDG
  memop = GLOBAL
  format = INT64
  load/store = 1/0
  size = 8
  is_extended = 1
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 8
  num = 20
  prop = 
--op[1].type = MREF
  is_neg/is_not/abs = 0/0/0
  size = 8
  has_ra = 1
  ra_num = 10
  ra_mod = 64
  has_ur = 0
  ur_num = 0
  ur_mod = NO_MOD
  has_imm = 1
  imm = 16
instruction size is 8
Instr 641 @ 0x2810 (10256) - LDG.E.64.CONSTANT R22, [R10.64+0x18] ;
  has_guard_pred = 0
  opcode = LDG.E.64.CONSTANT/LDG
  memop = GLOBAL
  format = INT64
  load/store = 1/0
  size = 8
  is_extended = 1
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 8
  num = 22
  prop = 
--op[1].type = MREF
  is_neg/is_not/abs = 0/0/0
  size = 8
  has_ra = 1
  ra_num = 10
  ra_mod = 64
  has_ur = 0
  ur_num = 0
  ur_mod = NO_MOD
  has_imm = 1
  imm = 24
instruction size is 8
Instr 642 @ 0x2820 (10272) - LDG.E.64.CONSTANT R24, [R10.64+0x20] ;
  has_guard_pred = 0
  opcode = LDG.E.64.CONSTANT/LDG
  memop = GLOBAL
  format = INT64
  load/store = 1/0
  size = 8
  is_extended = 1
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 8
  num = 24
  prop = 
--op[1].type = MREF
  is_neg/is_not/abs = 0/0/0
  size = 8
  has_ra = 1
  ra_num = 10
  ra_mod = 64
  has_ur = 0
  ur_num = 0
  ur_mod = NO_MOD
  has_imm = 1
  imm = 32
instruction size is 8
Instr 643 @ 0x2830 (10288) - LDG.E.64.CONSTANT R26, [R10.64+0x28] ;
  has_guard_pred = 0
  opcode = LDG.E.64.CONSTANT/LDG
  memop = GLOBAL
  format = INT64
  load/store = 1/0
  size = 8
  is_extended = 1
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 8
  num = 26
  prop = 
--op[1].type = MREF
  is_neg/is_not/abs = 0/0/0
  size = 8
  has_ra = 1
  ra_num = 10
  ra_mod = 64
  has_ur = 0
  ur_num = 0
  ur_mod = NO_MOD
  has_imm = 1
  imm = 40
instruction size is 8
Instr 644 @ 0x2840 (10304) - LDG.E.64.CONSTANT R28, [R10.64+0x30] ;
  has_guard_pred = 0
  opcode = LDG.E.64.CONSTANT/LDG
  memop = GLOBAL
  format = INT64
  load/store = 1/0
  size = 8
  is_extended = 1
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 8
  num = 28
  prop = 
--op[1].type = MREF
  is_neg/is_not/abs = 0/0/0
  size = 8
  has_ra = 1
  ra_num = 10
  ra_mod = 64
  has_ur = 0
  ur_num = 0
  ur_mod = NO_MOD
  has_imm = 1
  imm = 48
instruction size is 8
Instr 645 @ 0x2850 (10320) - R2P PR, R8, 0x3 ;
  has_guard_pred = 0
  opcode = R2P/R2P
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 8
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 8
  prop = 
--op[2].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x3
instruction size is 4
Instr 646 @ 0x2860 (10336) - IMAD.MOV.U32 R8, RZ, RZ, 0x79785eba ;
  has_guard_pred = 0
  opcode = IMAD.MOV.U32/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 8
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x79785eba
instruction size is 4
Instr 647 @ 0x2870 (10352) - DMUL R30, R4, R4 ;
  has_guard_pred = 0
  opcode = DMUL/DMUL
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 30
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 4
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 4
  prop = 
instruction size is 4
Instr 648 @ 0x2880 (10368) - IMAD.MOV.U32 R0, RZ, RZ, 0x3de5db65 ;
  has_guard_pred = 0
  opcode = IMAD.MOV.U32/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 0
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x3de5db65
instruction size is 4
Instr 649 @ 0x2890 (10384) - FSEL R8, -R8, 4.2945490664224492434e-19, !P0 ;
  has_guard_pred = 0
  opcode = FSEL/FSEL
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 8
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 1/0/0
  size = 4
  num = 8
  prop = 
--op[2].type = IMM_DOUBLE
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 4.294549e-19
--op[3].type = PRED
  is_neg/is_not/abs = 0/1/0
  size = 1
  num = 0
instruction size is 4
Instr 650 @ 0x28a0 (10400) - FSEL R9, R0, -0.082518599927425384521, !P0 ;
  has_guard_pred = 0
  opcode = FSEL/FSEL
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 9
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 0
  prop = 
--op[2].type = IMM_DOUBLE
  is_neg/is_not/abs = 1/0/0
  size = 8
  value = -8.251860e-02
--op[3].type = PRED
  is_neg/is_not/abs = 0/1/0
  size = 1
  num = 0
instruction size is 4
Instr 651 @ 0x28b0 (10416) - MOV R10, 0x29a0 ;
  has_guard_pred = 0
  opcode = MOV/MOV
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 10
  prop = 
--op[1].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x29a0
instruction size is 4
Instr 652 @ 0x28c0 (10432) - DFMA R16, R30, R8, R16 ;
  has_guard_pred = 0
  opcode = DFMA/DFMA
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 16
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 30
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 8
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 16
  prop = 
instruction size is 4
Instr 653 @ 0x28d0 (10448) - DFMA R16, R30, R16, R20 ;
  has_guard_pred = 0
  opcode = DFMA/DFMA
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 16
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 30
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 16
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 20
  prop = 
instruction size is 4
Instr 654 @ 0x28e0 (10464) - DFMA R16, R30, R16, R22 ;
  has_guard_pred = 0
  opcode = DFMA/DFMA
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 16
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 30
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 16
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 22
  prop = 
instruction size is 4
Instr 655 @ 0x28f0 (10480) - DFMA R16, R30.reuse, R16, R24 ;
  has_guard_pred = 0
  opcode = DFMA/DFMA
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 16
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 30
  prop = .reuse
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 16
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 24
  prop = 
instruction size is 4
Instr 656 @ 0x2900 (10496) - IMAD.MOV.U32 R24, RZ, RZ, 0x3b375450 ;
  has_guard_pred = 0
  opcode = IMAD.MOV.U32/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 24
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x3b375450
instruction size is 4
Instr 657 @ 0x2910 (10512) - IMAD.MOV.U32 R25, RZ, RZ, -0x7fca1b92 ;
  has_guard_pred = 0
  opcode = IMAD.MOV.U32/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 25
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = IMM_UINT64
  is_neg/is_not/abs = 1/0/0
  size = 8
  value = 0xffffffff8035e46e
instruction size is 4
Instr 658 @ 0x2920 (10528) - DFMA R16, R30, R16, R26 ;
  has_guard_pred = 0
  opcode = DFMA/DFMA
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 16
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 30
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 16
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 26
  prop = 
instruction size is 4
Instr 659 @ 0x2930 (10544) - DFMA R16, R30, R16, R28 ;
  has_guard_pred = 0
  opcode = DFMA/DFMA
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 16
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 30
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 16
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 28
  prop = 
instruction size is 4
Instr 660 @ 0x2940 (10560) - DFMA R22, R16, R4, R4 ;
  has_guard_pred = 0
  opcode = DFMA/DFMA
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 22
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 16
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 4
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 4
  prop = 
instruction size is 4
Instr 661 @ 0x2950 (10576) - @P0 DFMA R22, R30, R16, 1 ;
  has_guard_pred = 1
  guard_pred_num = 0
  guard_pred_negated = 0
  guard_pred_uniform = 0
  opcode = DFMA/DFMA
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 22
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 30
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 16
  prop = 
--op[3].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x1
instruction size is 4
Instr 662 @ 0x2960 (10592) - LEA R8, P0, R14, c[0x0][0x190], 0x3 ;
  has_guard_pred = 0
  opcode = LEA/LEA
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 8
  prop = 
--op[1].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 0
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 14
  prop = 
--op[3].type = CBANK
  is_neg/is_not/abs = 0/0/0
  size = 4
  id = 0
  has_imm_offset = 1
  imm_offset = 400
  has_reg_offset = 0
  reg_offset = 0
--op[4].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x3
instruction size is 4
Instr 663 @ 0x2970 (10608) - LEA.HI.X R9, R14, c[0x0][0x194], R15, 0x3, P0 ;
  has_guard_pred = 0
  opcode = LEA.HI.X/LEA
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 9
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 14
  prop = 
--op[2].type = CBANK
  is_neg/is_not/abs = 0/0/0
  size = 4
  id = 0
  has_imm_offset = 1
  imm_offset = 404
  has_reg_offset = 0
  reg_offset = 0
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 15
  prop = 
--op[4].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x3
--op[5].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 0
instruction size is 4
Instr 664 @ 0x2980 (10624) - @P1 DFMA R22, R22, -1, RZ ;
  has_guard_pred = 1
  guard_pred_num = 1
  guard_pred_negated = 0
  guard_pred_uniform = 0
  opcode = DFMA/DFMA
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 22
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 22
  prop = 
--op[2].type = IMM_UINT64
  is_neg/is_not/abs = 1/0/0
  size = 8
  value = 0xffffffffffffffff
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
instruction size is 4
Instr 665 @ 0x2990 (10640) - CALL.REL.NOINC 0x2c00 ;
  has_guard_pred = 0
  opcode = CALL.REL.NOINC/CALL
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x2c00
instruction size is 4
Instr 666 @ 0x29a0 (10656) - MUFU.RCP64H R5, R13 ;
  has_guard_pred = 0
  opcode = MUFU.RCP64H/MUFU
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 5
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 13
  prop = 
instruction size is 4
Instr 667 @ 0x29b0 (10672) - IMAD.MOV.U32 R4, RZ, RZ, 0x1 ;
  has_guard_pred = 0
  opcode = IMAD.MOV.U32/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 4
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x1
instruction size is 4
Instr 668 @ 0x29c0 (10688) - DMUL R18, R24, R18 ;
  has_guard_pred = 0
  opcode = DMUL/DMUL
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 18
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 24
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 18
  prop = 
instruction size is 4
Instr 669 @ 0x29d0 (10704) - ULDC.64 UR4, c[0x0][0x118] ;
  has_guard_pred = 0
  opcode = ULDC.64/ULDC
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 8
--op[0].type = UREG
  is_neg/is_not/abs = 0/0/0
  size = 8
  num = 4
  prop = 
--op[1].type = CBANK
  is_neg/is_not/abs = 0/0/0
  size = 8
  id = 0
  has_imm_offset = 1
  imm_offset = 280
  has_reg_offset = 0
  reg_offset = 0
instruction size is 8
Instr 670 @ 0x29e0 (10720) - BSSY B1, 0x2b30 ;
  has_guard_pred = 0
  opcode = BSSY/BSSY
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0xb1
--op[1].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x2b30
instruction size is 4
Instr 671 @ 0x29f0 (10736) - STG.E.64 [R8.64], R24 ;
  has_guard_pred = 0
  opcode = STG.E.64/STG
  memop = GLOBAL
  format = INT64
  load/store = 0/1
  size = 8
  is_extended = 1
--op[0].type = MREF
  is_neg/is_not/abs = 0/0/0
  size = 8
  has_ra = 1
  ra_num = 8
  ra_mod = 64
  has_ur = 0
  ur_num = 0
  ur_mod = NO_MOD
  has_imm = 0
  imm = 0
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 8
  num = 24
  prop = 
instruction size is 8
Instr 672 @ 0x2a00 (10752) - FSETP.GTU.AND P1, PT, |R19|, 6.4490557925156731238e-37, PT ;
  has_guard_pred = 0
  opcode = FSETP.GTU.AND/FSETP
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 1
--op[1].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 7
--op[2].type = REG
  is_neg/is_not/abs = 0/0/1
  size = 4
  num = 19
  prop = 
--op[3].type = IMM_DOUBLE
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 6.449056e-37
--op[4].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 7
instruction size is 4
Instr 673 @ 0x2a10 (10768) - DFMA R10, -R12, R4, 1 ;
  has_guard_pred = 0
  opcode = DFMA/DFMA
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 10
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 1/0/0
  size = 4
  num = 12
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 4
  prop = 
--op[3].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x1
instruction size is 4
Instr 674 @ 0x2a20 (10784) - DFMA R10, R10, R10, R10 ;
  has_guard_pred = 0
  opcode = DFMA/DFMA
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 10
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 10
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 10
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 10
  prop = 
instruction size is 4
Instr 675 @ 0x2a30 (10800) - DFMA R14, R4, R10, R4 ;
  has_guard_pred = 0
  opcode = DFMA/DFMA
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 14
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 4
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 10
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 4
  prop = 
instruction size is 4
Instr 676 @ 0x2a40 (10816) - DMUL R4, R18, R14 ;
  has_guard_pred = 0
  opcode = DMUL/DMUL
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 4
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 18
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 14
  prop = 
instruction size is 4
Instr 677 @ 0x2a50 (10832) - DFMA R10, -R12, R4, R18 ;
  has_guard_pred = 0
  opcode = DFMA/DFMA
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 10
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 1/0/0
  size = 4
  num = 12
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 4
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 18
  prop = 
instruction size is 4
Instr 678 @ 0x2a60 (10848) - DFMA R4, R10, R14, R4 ;
  has_guard_pred = 0
  opcode = DFMA/DFMA
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 4
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 10
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 14
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 4
  prop = 
instruction size is 4
Instr 679 @ 0x2a70 (10864) - FFMA R0, RZ, R13, R5 ;
  has_guard_pred = 0
  opcode = FFMA/FFMA
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 0
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 13
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 5
  prop = 
instruction size is 4
Instr 680 @ 0x2a80 (10880) - FSETP.GT.AND P0, PT, |R0|, 4.8978884574313168671e-40, PT ;
  has_guard_pred = 0
  opcode = FSETP.GT.AND/FSETP
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 0
--op[1].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 7
--op[2].type = REG
  is_neg/is_not/abs = 0/0/1
  size = 4
  num = 0
  prop = 
--op[3].type = IMM_DOUBLE
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 4.897888e-40
--op[4].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 7
instruction size is 4
Instr 681 @ 0x2a90 (10896) - @P0 BRA P1, 0x2b20 ;
  has_guard_pred = 1
  guard_pred_num = 0
  guard_pred_negated = 0
  guard_pred_uniform = 0
  opcode = BRA/BRA
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 1
--op[1].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x2b20
instruction size is 4
Instr 682 @ 0x2aa0 (10912) - IMAD.MOV.U32 R24, RZ, RZ, R18 ;
  has_guard_pred = 0
  opcode = IMAD.MOV.U32/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 24
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 18
  prop = 
instruction size is 4
Instr 683 @ 0x2ab0 (10928) - MOV R25, R19 ;
  has_guard_pred = 0
  opcode = MOV/MOV
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 25
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 19
  prop = 
instruction size is 4
Instr 684 @ 0x2ac0 (10944) - IMAD.MOV.U32 R22, RZ, RZ, R12 ;
  has_guard_pred = 0
  opcode = IMAD.MOV.U32/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 22
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 12
  prop = 
instruction size is 4
Instr 685 @ 0x2ad0 (10960) - MOV R10, 0x2b00 ;
  has_guard_pred = 0
  opcode = MOV/MOV
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 10
  prop = 
--op[1].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x2b00
instruction size is 4
Instr 686 @ 0x2ae0 (10976) - IMAD.MOV.U32 R23, RZ, RZ, R13 ;
  has_guard_pred = 0
  opcode = IMAD.MOV.U32/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 23
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 13
  prop = 
instruction size is 4
Instr 687 @ 0x2af0 (10992) - CALL.REL.NOINC 0x2c00 ;
  has_guard_pred = 0
  opcode = CALL.REL.NOINC/CALL
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x2c00
instruction size is 4
Instr 688 @ 0x2b00 (11008) - IMAD.MOV.U32 R4, RZ, RZ, R24 ;
  has_guard_pred = 0
  opcode = IMAD.MOV.U32/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 4
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 24
  prop = 
instruction size is 4
Instr 689 @ 0x2b10 (11024) - IMAD.MOV.U32 R5, RZ, RZ, R25 ;
  has_guard_pred = 0
  opcode = IMAD.MOV.U32/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 5
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 25
  prop = 
instruction size is 4
Instr 690 @ 0x2b20 (11040) - BSYNC B1 ;
  has_guard_pred = 0
  opcode = BSYNC/BSYNC
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0xb1
instruction size is 4
Instr 691 @ 0x2b30 (11056) - DADD R2, R2, R4 ;
  has_guard_pred = 0
  opcode = DADD/DADD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 2
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 2
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 4
  prop = 
instruction size is 4
Instr 692 @ 0x2b40 (11072) - BSYNC B0 ;
  has_guard_pred = 0
  opcode = BSYNC/BSYNC
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0xb0
instruction size is 4
Instr 693 @ 0x2b50 (11088) - STL.64 [R1+0x8], R2 ;
  has_guard_pred = 0
  opcode = STL.64/STL
  memop = LOCAL
  format = INT64
  load/store = 0/1
  size = 8
  is_extended = 0
--op[0].type = MREF
  is_neg/is_not/abs = 0/0/0
  size = 8
  has_ra = 1
  ra_num = 1
  ra_mod = NO_MOD
  has_ur = 0
  ur_num = 0
  ur_mod = NO_MOD
  has_imm = 1
  imm = 8
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 8
  num = 2
  prop = 
instruction size is 8
Instr 694 @ 0x2b60 (11104) - IADD3 R6, P0, R6, 0x8, RZ ;
  has_guard_pred = 0
  opcode = IADD3/IADD3
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 6
  prop = 
--op[1].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 0
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 6
  prop = 
--op[3].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x8
--op[4].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
instruction size is 4
Instr 695 @ 0x2b70 (11120) - UMOV UR4, 0xa6200200 ;
  has_guard_pred = 0
  opcode = UMOV/UMOV
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = UREG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 4
  prop = 
--op[1].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0xa6200200
instruction size is 4
Instr 696 @ 0x2b80 (11136) - MOV R20, 0xc2fb42f0 ;
  has_guard_pred = 0
  opcode = MOV/MOV
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 20
  prop = 
--op[1].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0xc2fb42f0
instruction size is 4
Instr 697 @ 0x2b90 (11152) - UMOV UR5, 0x7ffa ;
  has_guard_pred = 0
  opcode = UMOV/UMOV
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = UREG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 5
  prop = 
--op[1].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x7ffa
instruction size is 4
Instr 698 @ 0x2ba0 (11168) - IADD3.X R7, RZ, c[0x0][0x24], RZ, P0, P6 ;
  has_guard_pred = 0
  opcode = IADD3.X/IADD3
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 7
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = CBANK
  is_neg/is_not/abs = 0/0/0
  size = 4
  id = 0
  has_imm_offset = 1
  imm_offset = 36
  has_reg_offset = 0
  reg_offset = 0
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[4].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 0
--op[5].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 6
instruction size is 4
Instr 699 @ 0x2bb0 (11184) - IMAD.U32 R4, RZ, RZ, UR4 ;
  has_guard_pred = 0
  opcode = IMAD.U32/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 4
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = UREG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 4
  prop = 
instruction size is 4
Instr 700 @ 0x2bc0 (11200) - MOV R21, 0x7ffa ;
  has_guard_pred = 0
  opcode = MOV/MOV
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 21
  prop = 
--op[1].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x7ffa
instruction size is 4
Instr 701 @ 0x2bd0 (11216) - IMAD.U32 R5, RZ, RZ, UR5 ;
  has_guard_pred = 0
  opcode = IMAD.U32/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 5
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = UREG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 5
  prop = 
instruction size is 4
Instr 702 @ 0x2be0 (11232) - CALL.ABS.NOINC 0x7ffac2f23100 ;
  has_guard_pred = 0
  opcode = CALL.ABS.NOINC/CALL
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x7ffac2f23100
instruction size is 4
Instr 703 @ 0x2bf0 (11248) - EXIT ;
  has_guard_pred = 0
  opcode = EXIT/EXIT
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
instruction size is 4
Instr 704 @ 0x2c00 (11264) - LOP3.LUT R5, R23, 0x40000000, RZ, 0xc0, !PT ;
  has_guard_pred = 0
  opcode = LOP3.LUT/LOP3
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 5
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 23
  prop = 
--op[2].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x40000000
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[4].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0xc0
--op[5].type = PRED
  is_neg/is_not/abs = 0/1/0
  size = 1
  num = 7
instruction size is 4
Instr 705 @ 0x2c10 (11280) - IMAD.MOV.U32 R7, RZ, RZ, 0x5ff00000 ;
  has_guard_pred = 0
  opcode = IMAD.MOV.U32/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 7
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x5ff00000
instruction size is 4
Instr 706 @ 0x2c20 (11296) - BSSY B2, 0x3100 ;
  has_guard_pred = 0
  opcode = BSSY/BSSY
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0xb2
--op[1].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x3100
instruction size is 4
Instr 707 @ 0x2c30 (11312) - IMAD.MOV.U32 R20, RZ, RZ, RZ ;
  has_guard_pred = 0
  opcode = IMAD.MOV.U32/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 20
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
instruction size is 4
Instr 708 @ 0x2c40 (11328) - ISETP.GE.U32.AND P0, PT, R5, 0x40000000, PT ;
  has_guard_pred = 0
  opcode = ISETP.GE.U32.AND/ISETP
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 0
--op[1].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 7
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 5
  prop = 
--op[3].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x40000000
--op[4].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 7
instruction size is 4
Instr 709 @ 0x2c50 (11344) - IMAD.MOV.U32 R28, RZ, RZ, 0x1 ;
  has_guard_pred = 0
  opcode = IMAD.MOV.U32/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 28
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x1
instruction size is 4
Instr 710 @ 0x2c60 (11360) - LOP3.LUT R5, R25, 0x7f800000, RZ, 0xc0, !PT ;
  has_guard_pred = 0
  opcode = LOP3.LUT/LOP3
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 5
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 25
  prop = 
--op[2].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x7f800000
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[4].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0xc0
--op[5].type = PRED
  is_neg/is_not/abs = 0/1/0
  size = 1
  num = 7
instruction size is 4
Instr 711 @ 0x2c70 (11376) - IMAD.MOV.U32 R30, RZ, RZ, RZ ;
  has_guard_pred = 0
  opcode = IMAD.MOV.U32/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 30
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
instruction size is 4
Instr 712 @ 0x2c80 (11392) - SEL R21, R7, 0x1ff00000, !P0 ;
  has_guard_pred = 0
  opcode = SEL/SEL
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 21
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 7
  prop = 
--op[2].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x1ff00000
--op[3].type = PRED
  is_neg/is_not/abs = 0/1/0
  size = 1
  num = 0
instruction size is 4
Instr 713 @ 0x2c90 (11408) - ISETP.GE.U32.AND P0, PT, R5, 0x3e800000, PT ;
  has_guard_pred = 0
  opcode = ISETP.GE.U32.AND/ISETP
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 0
--op[1].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 7
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 5
  prop = 
--op[3].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x3e800000
--op[4].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 7
instruction size is 4
Instr 714 @ 0x2ca0 (11424) - DMUL R26, R22, R20 ;
  has_guard_pred = 0
  opcode = DMUL/DMUL
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 26
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 22
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 20
  prop = 
instruction size is 4
Instr 715 @ 0x2cb0 (11440) - SEL R31, R7, 0x1ff00000, !P0 ;
  has_guard_pred = 0
  opcode = SEL/SEL
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 31
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 7
  prop = 
--op[2].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x1ff00000
--op[3].type = PRED
  is_neg/is_not/abs = 0/1/0
  size = 1
  num = 0
instruction size is 4
Instr 716 @ 0x2cc0 (11456) - MUFU.RCP64H R29, R27 ;
  has_guard_pred = 0
  opcode = MUFU.RCP64H/MUFU
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 29
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 27
  prop = 
instruction size is 4
Instr 717 @ 0x2cd0 (11472) - DMUL R30, R24, R30 ;
  has_guard_pred = 0
  opcode = DMUL/DMUL
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 30
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 24
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 30
  prop = 
instruction size is 4
Instr 718 @ 0x2ce0 (11488) - DFMA R32, -R26, R28, 1 ;
  has_guard_pred = 0
  opcode = DFMA/DFMA
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 32
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 1/0/0
  size = 4
  num = 26
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 28
  prop = 
--op[3].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x1
instruction size is 4
Instr 719 @ 0x2cf0 (11504) - DFMA R32, R32, R32, R32 ;
  has_guard_pred = 0
  opcode = DFMA/DFMA
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 32
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 32
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 32
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 32
  prop = 
instruction size is 4
Instr 720 @ 0x2d00 (11520) - DFMA R32, R28, R32, R28 ;
  has_guard_pred = 0
  opcode = DFMA/DFMA
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 32
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 28
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 32
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 28
  prop = 
instruction size is 4
Instr 721 @ 0x2d10 (11536) - DMUL R28, R30, R32 ;
  has_guard_pred = 0
  opcode = DMUL/DMUL
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 28
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 30
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 32
  prop = 
instruction size is 4
Instr 722 @ 0x2d20 (11552) - DFMA R26, -R26, R28, R30 ;
  has_guard_pred = 0
  opcode = DFMA/DFMA
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 26
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 1/0/0
  size = 4
  num = 26
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 28
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 30
  prop = 
instruction size is 4
Instr 723 @ 0x2d30 (11568) - DFMA R26, R32, R26, R28 ;
  has_guard_pred = 0
  opcode = DFMA/DFMA
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 26
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 32
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 26
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 28
  prop = 
instruction size is 4
Instr 724 @ 0x2d40 (11584) - DSETP.GT.AND P0, PT, |R26|, RZ, PT ;
  has_guard_pred = 0
  opcode = DSETP.GT.AND/DSETP
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 0
--op[1].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 7
--op[2].type = REG
  is_neg/is_not/abs = 0/0/1
  size = 4
  num = 26
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[4].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 7
instruction size is 4
Instr 725 @ 0x2d50 (11600) - @!P0 BRA 0x3020 ;
  has_guard_pred = 1
  guard_pred_num = 0
  guard_pred_negated = 1
  guard_pred_uniform = 0
  opcode = BRA/BRA
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x3020
instruction size is 4
Instr 726 @ 0x2d60 (11616) - ISETP.GT.U32.AND P0, PT, R5, 0x3e7fffff, PT ;
  has_guard_pred = 0
  opcode = ISETP.GT.U32.AND/ISETP
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 0
--op[1].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 7
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 5
  prop = 
--op[3].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x3e7fffff
--op[4].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 7
instruction size is 4
Instr 727 @ 0x2d70 (11632) - IMAD.MOV.U32 R28, RZ, RZ, RZ ;
  has_guard_pred = 0
  opcode = IMAD.MOV.U32/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 28
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
instruction size is 4
Instr 728 @ 0x2d80 (11648) - DMUL R30, R20, R26 ;
  has_guard_pred = 0
  opcode = DMUL/DMUL
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 30
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 20
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 26
  prop = 
instruction size is 4
Instr 729 @ 0x2d90 (11664) - SEL R29, R7, 0x1ff00000, P0 ;
  has_guard_pred = 0
  opcode = SEL/SEL
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 29
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 7
  prop = 
--op[2].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x1ff00000
--op[3].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 0
instruction size is 4
Instr 730 @ 0x2da0 (11680) - DMUL R26, R26, R28 ;
  has_guard_pred = 0
  opcode = DMUL/DMUL
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 26
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 26
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 28
  prop = 
instruction size is 4
Instr 731 @ 0x2db0 (11696) - DMUL R30, R28, R30 ;
  has_guard_pred = 0
  opcode = DMUL/DMUL
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 30
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 28
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 30
  prop = 
instruction size is 4
Instr 732 @ 0x2dc0 (11712) - DMUL R28, R20, R26 ;
  has_guard_pred = 0
  opcode = DMUL/DMUL
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 28
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 20
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 26
  prop = 
instruction size is 4
Instr 733 @ 0x2dd0 (11728) - DFMA R20, R22, R30, -R24 ;
  has_guard_pred = 0
  opcode = DFMA/DFMA
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 20
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 22
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 30
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 1/0/0
  size = 4
  num = 24
  prop = 
instruction size is 4
Instr 734 @ 0x2de0 (11744) - DFMA R26, R22, R28, -R24 ;
  has_guard_pred = 0
  opcode = DFMA/DFMA
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 26
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 22
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 28
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 1/0/0
  size = 4
  num = 24
  prop = 
instruction size is 4
Instr 735 @ 0x2df0 (11760) - DSETP.GT.AND P0, PT, |R20|, |R26|, PT ;
  has_guard_pred = 0
  opcode = DSETP.GT.AND/DSETP
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 0
--op[1].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 7
--op[2].type = REG
  is_neg/is_not/abs = 0/0/1
  size = 4
  num = 20
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/1
  size = 4
  num = 26
  prop = 
--op[4].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 7
instruction size is 4
Instr 736 @ 0x2e00 (11776) - FSEL R21, R29, R31, P0 ;
  has_guard_pred = 0
  opcode = FSEL/FSEL
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 21
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 29
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 31
  prop = 
--op[3].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 0
instruction size is 4
Instr 737 @ 0x2e10 (11792) - FSEL R26, R28, R30, P0 ;
  has_guard_pred = 0
  opcode = FSEL/FSEL
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 26
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 28
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 30
  prop = 
--op[3].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 0
instruction size is 4
Instr 738 @ 0x2e20 (11808) - FSETP.GTU.AND P1, PT, |R21|, 1.469367938527859385e-39, PT ;
  has_guard_pred = 0
  opcode = FSETP.GTU.AND/FSETP
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 1
--op[1].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 7
--op[2].type = REG
  is_neg/is_not/abs = 0/0/1
  size = 4
  num = 21
  prop = 
--op[3].type = IMM_DOUBLE
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 1.469368e-39
--op[4].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 7
instruction size is 4
Instr 739 @ 0x2e30 (11824) - IMAD.MOV.U32 R27, RZ, RZ, R21 ;
  has_guard_pred = 0
  opcode = IMAD.MOV.U32/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 27
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 21
  prop = 
instruction size is 4
Instr 740 @ 0x2e40 (11840) - @P1 BRA 0x30f0 ;
  has_guard_pred = 1
  guard_pred_num = 1
  guard_pred_negated = 0
  guard_pred_uniform = 0
  opcode = BRA/BRA
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x30f0
instruction size is 4
Instr 741 @ 0x2e50 (11856) - FSETP.GEU.AND P0, PT, |R25|, 1.5046327690525280102e-36, PT ;
  has_guard_pred = 0
  opcode = FSETP.GEU.AND/FSETP
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 0
--op[1].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 7
--op[2].type = REG
  is_neg/is_not/abs = 0/0/1
  size = 4
  num = 25
  prop = 
--op[3].type = IMM_DOUBLE
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 1.504633e-36
--op[4].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 7
instruction size is 4
Instr 742 @ 0x2e60 (11872) - IMAD.MOV.U32 R27, RZ, RZ, R21 ;
  has_guard_pred = 0
  opcode = IMAD.MOV.U32/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 27
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 21
  prop = 
instruction size is 4
Instr 743 @ 0x2e70 (11888) - MOV R28, 0x58500000 ;
  has_guard_pred = 0
  opcode = MOV/MOV
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 28
  prop = 
--op[1].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x58500000
instruction size is 4
Instr 744 @ 0x2e80 (11904) - LOP3.LUT R20, R26, 0xfffffffe, RZ, 0xc0, !PT ;
  has_guard_pred = 0
  opcode = LOP3.LUT/LOP3
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 20
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 26
  prop = 
--op[2].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0xfffffffe
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[4].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0xc0
--op[5].type = PRED
  is_neg/is_not/abs = 0/1/0
  size = 1
  num = 7
instruction size is 4
Instr 745 @ 0x2e90 (11920) - SEL R29, R28, 0x3ff00000, !P0 ;
  has_guard_pred = 0
  opcode = SEL/SEL
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 29
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 28
  prop = 
--op[2].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x3ff00000
--op[3].type = PRED
  is_neg/is_not/abs = 0/1/0
  size = 1
  num = 0
instruction size is 4
Instr 746 @ 0x2ea0 (11936) - IMAD.MOV.U32 R28, RZ, RZ, RZ ;
  has_guard_pred = 0
  opcode = IMAD.MOV.U32/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 28
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
instruction size is 4
Instr 747 @ 0x2eb0 (11952) - LOP3.LUT R26, R26, 0x1, RZ, 0xfc, !PT ;
  has_guard_pred = 0
  opcode = LOP3.LUT/LOP3
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 26
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 26
  prop = 
--op[2].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x1
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[4].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0xfc
--op[5].type = PRED
  is_neg/is_not/abs = 0/1/0
  size = 1
  num = 7
instruction size is 4
Instr 748 @ 0x2ec0 (11968) - DMUL R22, R22, R28 ;
  has_guard_pred = 0
  opcode = DMUL/DMUL
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 22
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 22
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 28
  prop = 
instruction size is 4
Instr 749 @ 0x2ed0 (11984) - DMUL R24, R24, R28 ;
  has_guard_pred = 0
  opcode = DMUL/DMUL
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 24
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 24
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 28
  prop = 
instruction size is 4
Instr 750 @ 0x2ee0 (12000) - DFMA R28, R20, R22, -R24 ;
  has_guard_pred = 0
  opcode = DFMA/DFMA
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 28
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 20
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 22
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 1/0/0
  size = 4
  num = 24
  prop = 
instruction size is 4
Instr 751 @ 0x2ef0 (12016) - DFMA R30, R26, R22, -R24 ;
  has_guard_pred = 0
  opcode = DFMA/DFMA
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 30
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 26
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 22
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 1/0/0
  size = 4
  num = 24
  prop = 
instruction size is 4
Instr 752 @ 0x2f00 (12032) - DSETP.GT.AND P0, PT, |R28|, |R30|, PT ;
  has_guard_pred = 0
  opcode = DSETP.GT.AND/DSETP
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 0
--op[1].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 7
--op[2].type = REG
  is_neg/is_not/abs = 0/0/1
  size = 4
  num = 28
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/1
  size = 4
  num = 30
  prop = 
--op[4].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 7
instruction size is 4
Instr 753 @ 0x2f10 (12048) - FSEL R11, R26, R20, P0 ;
  has_guard_pred = 0
  opcode = FSEL/FSEL
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 11
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 26
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 20
  prop = 
--op[3].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 0
instruction size is 4
Instr 754 @ 0x2f20 (12064) - IADD3 R26, P0, R11.reuse, 0x1, RZ ;
  has_guard_pred = 0
  opcode = IADD3/IADD3
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 26
  prop = 
--op[1].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 0
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 11
  prop = .reuse
--op[3].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x1
--op[4].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
instruction size is 4
Instr 755 @ 0x2f30 (12080) - LOP3.LUT R5, R11.reuse, 0x1, RZ, 0xc0, !PT ;
  has_guard_pred = 0
  opcode = LOP3.LUT/LOP3
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 5
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 11
  prop = .reuse
--op[2].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x1
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[4].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0xc0
--op[5].type = PRED
  is_neg/is_not/abs = 0/1/0
  size = 1
  num = 7
instruction size is 4
Instr 756 @ 0x2f40 (12096) - IADD3 R20, P1, R11, -0x1, RZ ;
  has_guard_pred = 0
  opcode = IADD3/IADD3
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 20
  prop = 
--op[1].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 1
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 11
  prop = 
--op[3].type = IMM_UINT64
  is_neg/is_not/abs = 1/0/0
  size = 8
  value = 0xffffffffffffffff
--op[4].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
instruction size is 4
Instr 757 @ 0x2f50 (12112) - IMAD.X R7, RZ, RZ, R21, P0 ;
  has_guard_pred = 0
  opcode = IMAD.X/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 7
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 21
  prop = 
--op[4].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 0
instruction size is 4
Instr 758 @ 0x2f60 (12128) - ISETP.NE.U32.AND P4, PT, R5, 0x1, PT ;
  has_guard_pred = 0
  opcode = ISETP.NE.U32.AND/ISETP
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 4
--op[1].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 7
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 5
  prop = 
--op[3].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x1
--op[4].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 7
instruction size is 4
Instr 759 @ 0x2f70 (12144) - IADD3.X R5, R21, -0x1, RZ, P1, !PT ;
  has_guard_pred = 0
  opcode = IADD3.X/IADD3
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 5
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 21
  prop = 
--op[2].type = IMM_UINT64
  is_neg/is_not/abs = 1/0/0
  size = 8
  value = 0xffffffffffffffff
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[4].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 1
--op[5].type = PRED
  is_neg/is_not/abs = 0/1/0
  size = 1
  num = 7
instruction size is 4
Instr 760 @ 0x2f80 (12160) - FSEL R26, R11, R26, P4 ;
  has_guard_pred = 0
  opcode = FSEL/FSEL
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 26
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 11
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 26
  prop = 
--op[3].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 4
instruction size is 4
Instr 761 @ 0x2f90 (12176) - FSEL R27, R21, R7, P4 ;
  has_guard_pred = 0
  opcode = FSEL/FSEL
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 27
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 21
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 7
  prop = 
--op[3].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 4
instruction size is 4
Instr 762 @ 0x2fa0 (12192) - FSEL R20, R20, R11, P4 ;
  has_guard_pred = 0
  opcode = FSEL/FSEL
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 20
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 20
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 11
  prop = 
--op[3].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 4
instruction size is 4
Instr 763 @ 0x2fb0 (12208) - FSEL R21, R5, R21, P4 ;
  has_guard_pred = 0
  opcode = FSEL/FSEL
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 21
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 5
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 21
  prop = 
--op[3].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 4
instruction size is 4
Instr 764 @ 0x2fc0 (12224) - DFMA R28, R22, R26, -R24 ;
  has_guard_pred = 0
  opcode = DFMA/DFMA
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 28
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 22
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 26
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 1/0/0
  size = 4
  num = 24
  prop = 
instruction size is 4
Instr 765 @ 0x2fd0 (12240) - DFMA R22, R22, R20, -R24 ;
  has_guard_pred = 0
  opcode = DFMA/DFMA
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 22
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 22
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 20
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 1/0/0
  size = 4
  num = 24
  prop = 
instruction size is 4
Instr 766 @ 0x2fe0 (12256) - DSETP.GT.AND P0, PT, |R28|, |R22|, PT ;
  has_guard_pred = 0
  opcode = DSETP.GT.AND/DSETP
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 0
--op[1].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 7
--op[2].type = REG
  is_neg/is_not/abs = 0/0/1
  size = 4
  num = 28
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/1
  size = 4
  num = 22
  prop = 
--op[4].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 7
instruction size is 4
Instr 767 @ 0x2ff0 (12272) - FSEL R26, R20, R26, P0 ;
  has_guard_pred = 0
  opcode = FSEL/FSEL
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 26
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 20
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 26
  prop = 
--op[3].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 0
instruction size is 4
Instr 768 @ 0x3000 (12288) - FSEL R27, R21, R27, P0 ;
  has_guard_pred = 0
  opcode = FSEL/FSEL
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 27
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 21
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 27
  prop = 
--op[3].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 0
instruction size is 4
Instr 769 @ 0x3010 (12304) - BRA 0x30f0 ;
  has_guard_pred = 0
  opcode = BRA/BRA
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x30f0
instruction size is 4
Instr 770 @ 0x3020 (12320) - DSETP.NEU.AND P0, PT, R26, RZ, PT ;
  has_guard_pred = 0
  opcode = DSETP.NEU.AND/DSETP
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 0
--op[1].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 7
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 26
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[4].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 7
instruction size is 4
Instr 771 @ 0x3030 (12336) - @!P0 BRA 0x30e0 ;
  has_guard_pred = 1
  guard_pred_num = 0
  guard_pred_negated = 1
  guard_pred_uniform = 0
  opcode = BRA/BRA
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x30e0
instruction size is 4
Instr 772 @ 0x3040 (12352) - MUFU.RCP64H R27, R23 ;
  has_guard_pred = 0
  opcode = MUFU.RCP64H/MUFU
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 27
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 23
  prop = 
instruction size is 4
Instr 773 @ 0x3050 (12368) - IMAD.MOV.U32 R26, RZ, RZ, RZ ;
  has_guard_pred = 0
  opcode = IMAD.MOV.U32/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 26
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
instruction size is 4
Instr 774 @ 0x3060 (12384) - DSETP.GT.AND P0, PT, |R26|, RZ, PT ;
  has_guard_pred = 0
  opcode = DSETP.GT.AND/DSETP
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 0
--op[1].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 7
--op[2].type = REG
  is_neg/is_not/abs = 0/0/1
  size = 4
  num = 26
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[4].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 7
instruction size is 4
Instr 775 @ 0x3070 (12400) - @!P0 DSETP.NEU.AND P1, PT, |R22|, +INF , PT ;
  has_guard_pred = 1
  guard_pred_num = 0
  guard_pred_negated = 1
  guard_pred_uniform = 0
  opcode = DSETP.NEU.AND/DSETP
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 1
--op[1].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 7
--op[2].type = REG
  is_neg/is_not/abs = 0/0/1
  size = 4
  num = 22
  prop = 
--op[3].type = IMM_DOUBLE
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = inf
--op[4].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 7
instruction size is 4
Instr 776 @ 0x3080 (12416) - @!P0 FSEL R5, R22, R26, P1 ;
  has_guard_pred = 1
  guard_pred_num = 0
  guard_pred_negated = 1
  guard_pred_uniform = 0
  opcode = FSEL/FSEL
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 5
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 22
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 26
  prop = 
--op[3].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 1
instruction size is 4
Instr 777 @ 0x3090 (12432) - @!P0 FSEL R22, R23, R27, P1 ;
  has_guard_pred = 1
  guard_pred_num = 0
  guard_pred_negated = 1
  guard_pred_uniform = 0
  opcode = FSEL/FSEL
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 22
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 23
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 27
  prop = 
--op[3].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 1
instruction size is 4
Instr 778 @ 0x30a0 (12448) - @!P0 IMAD.MOV.U32 R26, RZ, RZ, R5 ;
  has_guard_pred = 1
  guard_pred_num = 0
  guard_pred_negated = 1
  guard_pred_uniform = 0
  opcode = IMAD.MOV.U32/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 26
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 5
  prop = 
instruction size is 4
Instr 779 @ 0x30b0 (12464) - @!P0 IMAD.MOV.U32 R27, RZ, RZ, R22 ;
  has_guard_pred = 1
  guard_pred_num = 0
  guard_pred_negated = 1
  guard_pred_uniform = 0
  opcode = IMAD.MOV.U32/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 27
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 22
  prop = 
instruction size is 4
Instr 780 @ 0x30c0 (12480) - DMUL R26, R24, R26 ;
  has_guard_pred = 0
  opcode = DMUL/DMUL
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 26
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 24
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 26
  prop = 
instruction size is 4
Instr 781 @ 0x30d0 (12496) - BRA 0x30f0 ;
  has_guard_pred = 0
  opcode = BRA/BRA
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x30f0
instruction size is 4
Instr 782 @ 0x30e0 (12512) - DMUL R26, R24, R22 ;
  has_guard_pred = 0
  opcode = DMUL/DMUL
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 26
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 24
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 22
  prop = 
instruction size is 4
Instr 783 @ 0x30f0 (12528) - BSYNC B2 ;
  has_guard_pred = 0
  opcode = BSYNC/BSYNC
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0xb2
instruction size is 4
Instr 784 @ 0x3100 (12544) - IMAD.MOV.U32 R11, RZ, RZ, 0x0 ;
  has_guard_pred = 0
  opcode = IMAD.MOV.U32/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 11
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x0
instruction size is 4
Instr 785 @ 0x3110 (12560) - IMAD.MOV.U32 R24, RZ, RZ, R26 ;
  has_guard_pred = 0
  opcode = IMAD.MOV.U32/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 24
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 26
  prop = 
instruction size is 4
Instr 786 @ 0x3120 (12576) - IMAD.MOV.U32 R25, RZ, RZ, R27 ;
  has_guard_pred = 0
  opcode = IMAD.MOV.U32/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 25
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 27
  prop = 
instruction size is 4
Instr 787 @ 0x3130 (12592) - RET.REL.NODEC R10 0x0 ;
  has_guard_pred = 0
  opcode = RET.REL.NODEC/RET
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 10
  prop =  0x0
instruction size is 4
Instr 788 @ 0x3140 (12608) - ISETP.GE.U32.AND P0, PT, R4, -0x3400000, PT ;
  has_guard_pred = 0
  opcode = ISETP.GE.U32.AND/ISETP
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 0
--op[1].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 7
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 4
  prop = 
--op[3].type = IMM_UINT64
  is_neg/is_not/abs = 1/0/0
  size = 8
  value = 0xfffffffffcc00000
--op[4].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 7
instruction size is 4
Instr 789 @ 0x3150 (12624) - IMAD.MOV.U32 R9, RZ, RZ, R15 ;
  has_guard_pred = 0
  opcode = IMAD.MOV.U32/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 9
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 15
  prop = 
instruction size is 4
Instr 790 @ 0x3160 (12640) - @!P0 BRA 0x31f0 ;
  has_guard_pred = 1
  guard_pred_num = 0
  guard_pred_negated = 1
  guard_pred_uniform = 0
  opcode = BRA/BRA
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x31f0
instruction size is 4
Instr 791 @ 0x3170 (12656) - DFMA.RM R8, R12, R8, R10 ;
  has_guard_pred = 0
  opcode = DFMA.RM/DFMA
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 8
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 12
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 8
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 10
  prop = 
instruction size is 4
Instr 792 @ 0x3180 (12672) - IADD3 R4, P0, R8, 0x1, RZ ;
  has_guard_pred = 0
  opcode = IADD3/IADD3
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 4
  prop = 
--op[1].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 0
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 8
  prop = 
--op[3].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x1
--op[4].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
instruction size is 4
Instr 793 @ 0x3190 (12688) - IMAD.X R5, RZ, RZ, R9, P0 ;
  has_guard_pred = 0
  opcode = IMAD.X/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 5
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 9
  prop = 
--op[4].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 0
instruction size is 4
Instr 794 @ 0x31a0 (12704) - DFMA.RP R2, -R8, R4, R2 ;
  has_guard_pred = 0
  opcode = DFMA.RP/DFMA
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 2
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 1/0/0
  size = 4
  num = 8
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 4
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 2
  prop = 
instruction size is 4
Instr 795 @ 0x31b0 (12720) - DSETP.GT.AND P0, PT, R2, RZ, PT ;
  has_guard_pred = 0
  opcode = DSETP.GT.AND/DSETP
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 0
--op[1].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 7
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 2
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[4].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 7
instruction size is 4
Instr 796 @ 0x31c0 (12736) - FSEL R4, R4, R8, P0 ;
  has_guard_pred = 0
  opcode = FSEL/FSEL
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 4
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 4
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 8
  prop = 
--op[3].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 0
instruction size is 4
Instr 797 @ 0x31d0 (12752) - FSEL R5, R5, R9, P0 ;
  has_guard_pred = 0
  opcode = FSEL/FSEL
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 5
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 5
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 9
  prop = 
--op[3].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 0
instruction size is 4
Instr 798 @ 0x31e0 (12768) - BRA 0x3380 ;
  has_guard_pred = 0
  opcode = BRA/BRA
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x3380
instruction size is 4
Instr 799 @ 0x31f0 (12784) - DSETP.NE.AND P0, PT, R2, RZ, PT ;
  has_guard_pred = 0
  opcode = DSETP.NE.AND/DSETP
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 0
--op[1].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 7
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 2
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[4].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 7
instruction size is 4
Instr 800 @ 0x3200 (12800) - @!P0 BRA 0x3370 ;
  has_guard_pred = 1
  guard_pred_num = 0
  guard_pred_negated = 1
  guard_pred_uniform = 0
  opcode = BRA/BRA
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x3370
instruction size is 4
Instr 801 @ 0x3210 (12816) - ISETP.GE.AND P0, PT, R3, RZ, PT ;
  has_guard_pred = 0
  opcode = ISETP.GE.AND/ISETP
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 0
--op[1].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 7
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 3
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[4].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 7
instruction size is 4
Instr 802 @ 0x3220 (12832) - @!P0 IMAD.MOV.U32 R4, RZ, RZ, 0x0 ;
  has_guard_pred = 1
  guard_pred_num = 0
  guard_pred_negated = 1
  guard_pred_uniform = 0
  opcode = IMAD.MOV.U32/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 4
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x0
instruction size is 4
Instr 803 @ 0x3230 (12848) - @!P0 MOV R5, 0xfff80000 ;
  has_guard_pred = 1
  guard_pred_num = 0
  guard_pred_negated = 1
  guard_pred_uniform = 0
  opcode = MOV/MOV
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 5
  prop = 
--op[1].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0xfff80000
instruction size is 4
Instr 804 @ 0x3240 (12864) - @!P0 BRA 0x3380 ;
  has_guard_pred = 1
  guard_pred_num = 0
  guard_pred_negated = 1
  guard_pred_uniform = 0
  opcode = BRA/BRA
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x3380
instruction size is 4
Instr 805 @ 0x3250 (12880) - ISETP.GT.AND P0, PT, R3, 0x7fefffff, PT ;
  has_guard_pred = 0
  opcode = ISETP.GT.AND/ISETP
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 0
--op[1].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 7
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 3
  prop = 
--op[3].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x7fefffff
--op[4].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 7
instruction size is 4
Instr 806 @ 0x3260 (12896) - @P0 BRA 0x3370 ;
  has_guard_pred = 1
  guard_pred_num = 0
  guard_pred_negated = 0
  guard_pred_uniform = 0
  opcode = BRA/BRA
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x3370
instruction size is 4
Instr 807 @ 0x3270 (12912) - DMUL R2, R2, 8.11296384146066816958e+31 ;
  has_guard_pred = 0
  opcode = DMUL/DMUL
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 2
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 2
  prop = 
--op[2].type = IMM_DOUBLE
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 8.112964e+31
instruction size is 4
Instr 808 @ 0x3280 (12928) - IMAD.MOV.U32 R4, RZ, RZ, RZ ;
  has_guard_pred = 0
  opcode = IMAD.MOV.U32/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 4
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
instruction size is 4
Instr 809 @ 0x3290 (12944) - IMAD.MOV.U32 R10, RZ, RZ, 0x0 ;
  has_guard_pred = 0
  opcode = IMAD.MOV.U32/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 10
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x0
instruction size is 4
Instr 810 @ 0x32a0 (12960) - IMAD.MOV.U32 R11, RZ, RZ, 0x3fd80000 ;
  has_guard_pred = 0
  opcode = IMAD.MOV.U32/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 11
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x3fd80000
instruction size is 4
Instr 811 @ 0x32b0 (12976) - MUFU.RSQ64H R5, R3 ;
  has_guard_pred = 0
  opcode = MUFU.RSQ64H/MUFU
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 5
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 3
  prop = 
instruction size is 4
Instr 812 @ 0x32c0 (12992) - DMUL R8, R4, R4 ;
  has_guard_pred = 0
  opcode = DMUL/DMUL
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 8
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 4
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 4
  prop = 
instruction size is 4
Instr 813 @ 0x32d0 (13008) - DFMA R8, R2, -R8, 1 ;
  has_guard_pred = 0
  opcode = DFMA/DFMA
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 8
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 2
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 1/0/0
  size = 4
  num = 8
  prop = 
--op[3].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x1
instruction size is 4
Instr 814 @ 0x32e0 (13024) - DFMA R10, R8, R10, 0.5 ;
  has_guard_pred = 0
  opcode = DFMA/DFMA
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 10
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 8
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 10
  prop = 
--op[3].type = IMM_DOUBLE
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 5.000000e-01
instruction size is 4
Instr 815 @ 0x32f0 (13040) - DMUL R8, R4, R8 ;
  has_guard_pred = 0
  opcode = DMUL/DMUL
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 8
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 4
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 8
  prop = 
instruction size is 4
Instr 816 @ 0x3300 (13056) - DFMA R8, R10, R8, R4 ;
  has_guard_pred = 0
  opcode = DFMA/DFMA
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 8
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 10
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 8
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 4
  prop = 
instruction size is 4
Instr 817 @ 0x3310 (13072) - DMUL R4, R2, R8 ;
  has_guard_pred = 0
  opcode = DMUL/DMUL
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 4
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 2
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 8
  prop = 
instruction size is 4
Instr 818 @ 0x3320 (13088) - IADD3 R9, R9, -0x100000, RZ ;
  has_guard_pred = 0
  opcode = IADD3/IADD3
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 9
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 9
  prop = 
--op[2].type = IMM_UINT64
  is_neg/is_not/abs = 1/0/0
  size = 8
  value = 0xfffffffffff00000
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
instruction size is 4
Instr 819 @ 0x3330 (13104) - DFMA R10, R4, -R4, R2 ;
  has_guard_pred = 0
  opcode = DFMA/DFMA
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 10
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 4
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 1/0/0
  size = 4
  num = 4
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 2
  prop = 
instruction size is 4
Instr 820 @ 0x3340 (13120) - DFMA R4, R8, R10, R4 ;
  has_guard_pred = 0
  opcode = DFMA/DFMA
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 4
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 8
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 10
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 4
  prop = 
instruction size is 4
Instr 821 @ 0x3350 (13136) - IADD3 R5, R5, -0x3500000, RZ ;
  has_guard_pred = 0
  opcode = IADD3/IADD3
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 5
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 5
  prop = 
--op[2].type = IMM_UINT64
  is_neg/is_not/abs = 1/0/0
  size = 8
  value = 0xfffffffffcb00000
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
instruction size is 4
Instr 822 @ 0x3360 (13152) - BRA 0x3380 ;
  has_guard_pred = 0
  opcode = BRA/BRA
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x3380
instruction size is 4
Instr 823 @ 0x3370 (13168) - DADD R4, R2, R2 ;
  has_guard_pred = 0
  opcode = DADD/DADD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 4
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 2
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 2
  prop = 
instruction size is 4
Instr 824 @ 0x3380 (13184) - IMAD.MOV.U32 R2, RZ, RZ, R0 ;
  has_guard_pred = 0
  opcode = IMAD.MOV.U32/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 2
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 0
  prop = 
instruction size is 4
Instr 825 @ 0x3390 (13200) - IMAD.MOV.U32 R3, RZ, RZ, 0x0 ;
  has_guard_pred = 0
  opcode = IMAD.MOV.U32/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 3
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x0
instruction size is 4
Instr 826 @ 0x33a0 (13216) - IMAD.MOV.U32 R22, RZ, RZ, R4 ;
  has_guard_pred = 0
  opcode = IMAD.MOV.U32/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 22
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 4
  prop = 
instruction size is 4
Instr 827 @ 0x33b0 (13232) - IMAD.MOV.U32 R23, RZ, RZ, R5 ;
  has_guard_pred = 0
  opcode = IMAD.MOV.U32/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 23
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 5
  prop = 
instruction size is 4
Instr 828 @ 0x33c0 (13248) - RET.REL.NODEC R2 0x0 ;
  has_guard_pred = 0
  opcode = RET.REL.NODEC/RET
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 2
  prop =  0x0
instruction size is 4
Instr 829 @ 0x33d0 (13264) - SHF.R.U32.HI R7, RZ, 0x14, R5 ;
  has_guard_pred = 0
  opcode = SHF.R.U32.HI/SHF
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 7
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x14
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 5
  prop = 
instruction size is 4
Instr 830 @ 0x33e0 (13280) - IMAD.MOV.U32 R29, RZ, RZ, R9 ;
  has_guard_pred = 0
  opcode = IMAD.MOV.U32/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 29
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 9
  prop = 
instruction size is 4
Instr 831 @ 0x33f0 (13296) - LOP3.LUT R7, R7, 0x7ff, RZ, 0xc0, !PT ;
  has_guard_pred = 0
  opcode = LOP3.LUT/LOP3
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 7
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 7
  prop = 
--op[2].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x7ff
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[4].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0xc0
--op[5].type = PRED
  is_neg/is_not/abs = 0/1/0
  size = 1
  num = 7
instruction size is 4
Instr 832 @ 0x3400 (13312) - ISETP.NE.AND P0, PT, R7, 0x7ff, PT ;
  has_guard_pred = 0
  opcode = ISETP.NE.AND/ISETP
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 0
--op[1].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 7
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 7
  prop = 
--op[3].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x7ff
--op[4].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 7
instruction size is 4
Instr 833 @ 0x3410 (13328) - @!P0 BRA 0x3cf0 ;
  has_guard_pred = 1
  guard_pred_num = 0
  guard_pred_negated = 1
  guard_pred_uniform = 0
  opcode = BRA/BRA
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x3cf0
instruction size is 4
Instr 834 @ 0x3420 (13344) - IADD3 R10, R7, -0x400, RZ ;
  has_guard_pred = 0
  opcode = IADD3/IADD3
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 10
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 7
  prop = 
--op[2].type = IMM_UINT64
  is_neg/is_not/abs = 1/0/0
  size = 8
  value = 0xfffffffffffffc00
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
instruction size is 4
Instr 835 @ 0x3430 (13360) - BSSY B2, 0x3720 ;
  has_guard_pred = 0
  opcode = BSSY/BSSY
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0xb2
--op[1].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x3720
instruction size is 4
Instr 836 @ 0x3440 (13376) - IADD3 R22, R1, 0x10, RZ ;
  has_guard_pred = 0
  opcode = IADD3/IADD3
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 22
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 1
  prop = 
--op[2].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x10
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
instruction size is 4
Instr 837 @ 0x3450 (13392) - CS2R R24, SRZ ;
  has_guard_pred = 0
  opcode = CS2R/CS2R
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 24
  prop = 
--op[1].type = GENERIC
  is_neg/is_not/abs = 0/0/0
  size = 4
  value = SRZ
instruction size is 4
Instr 838 @ 0x3460 (13408) - SHF.R.U32.HI R7, RZ, 0x6, R10 ;
  has_guard_pred = 0
  opcode = SHF.R.U32.HI/SHF
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 7
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x6
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 10
  prop = 
instruction size is 4
Instr 839 @ 0x3470 (13424) - IMAD.MOV.U32 R27, RZ, RZ, R22 ;
  has_guard_pred = 0
  opcode = IMAD.MOV.U32/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 27
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 22
  prop = 
instruction size is 4
Instr 840 @ 0x3480 (13440) - IADD3 R20, -R7.reuse, 0x10, RZ ;
  has_guard_pred = 0
  opcode = IADD3/IADD3
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 20
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 1/0/0
  size = 4
  num = 7
  prop = .reuse
--op[2].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x10
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
instruction size is 4
Instr 841 @ 0x3490 (13456) - IADD3 R9, -R7, 0x13, RZ ;
  has_guard_pred = 0
  opcode = IADD3/IADD3
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 9
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 1/0/0
  size = 4
  num = 7
  prop = 
--op[2].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x13
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
instruction size is 4
Instr 842 @ 0x34a0 (13472) - ISETP.GT.AND P0, PT, R20, 0xe, PT ;
  has_guard_pred = 0
  opcode = ISETP.GT.AND/ISETP
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 0
--op[1].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 7
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 20
  prop = 
--op[3].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0xe
--op[4].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 7
instruction size is 4
Instr 843 @ 0x34b0 (13488) - LOP3.LUT R7, R10, 0x3f, RZ, 0xc0, !PT ;
  has_guard_pred = 0
  opcode = LOP3.LUT/LOP3
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 7
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 10
  prop = 
--op[2].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x3f
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[4].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0xc0
--op[5].type = PRED
  is_neg/is_not/abs = 0/1/0
  size = 1
  num = 7
instruction size is 4
Instr 844 @ 0x34c0 (13504) - SEL R9, R9, 0x12, !P0 ;
  has_guard_pred = 0
  opcode = SEL/SEL
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 9
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 9
  prop = 
--op[2].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x12
--op[3].type = PRED
  is_neg/is_not/abs = 0/1/0
  size = 1
  num = 0
instruction size is 4
Instr 845 @ 0x34d0 (13520) - ISETP.GT.AND P0, PT, R20, R9, PT ;
  has_guard_pred = 0
  opcode = ISETP.GT.AND/ISETP
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 0
--op[1].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 7
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 20
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 9
  prop = 
--op[4].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 7
instruction size is 4
Instr 846 @ 0x34e0 (13536) - @P0 BRA 0x3710 ;
  has_guard_pred = 1
  guard_pred_num = 0
  guard_pred_negated = 0
  guard_pred_uniform = 0
  opcode = BRA/BRA
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x3710
instruction size is 4
Instr 847 @ 0x34f0 (13552) - IADD3 R23, R20, -0x1, RZ ;
  has_guard_pred = 0
  opcode = IADD3/IADD3
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 23
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 20
  prop = 
--op[2].type = IMM_UINT64
  is_neg/is_not/abs = 1/0/0
  size = 8
  value = 0xffffffffffffffff
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
instruction size is 4
Instr 848 @ 0x3500 (13568) - UMOV UR4, 0xa6200400 ;
  has_guard_pred = 0
  opcode = UMOV/UMOV
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = UREG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 4
  prop = 
--op[1].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0xa6200400
instruction size is 4
Instr 849 @ 0x3510 (13584) - SHF.L.U64.HI R31, R29.reuse, 0xb, R5 ;
  has_guard_pred = 0
  opcode = SHF.L.U64.HI/SHF
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 8
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 8
  num = 31
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 8
  num = 29
  prop = .reuse
--op[2].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0xb
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 8
  num = 5
  prop = 
instruction size is 8
Instr 850 @ 0x3520 (13600) - UMOV UR5, 0x7ffa ;
  has_guard_pred = 0
  opcode = UMOV/UMOV
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = UREG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 5
  prop = 
--op[1].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x7ffa
instruction size is 4
Instr 851 @ 0x3530 (13616) - IMAD.SHL.U32 R29, R29, 0x800, RZ ;
  has_guard_pred = 0
  opcode = IMAD.SHL.U32/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 29
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 29
  prop = 
--op[2].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x800
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
instruction size is 4
Instr 852 @ 0x3540 (13632) - MOV R11, UR5 ;
  has_guard_pred = 0
  opcode = MOV/MOV
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 11
  prop = 
--op[1].type = UREG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 5
  prop = 
instruction size is 4
Instr 853 @ 0x3550 (13648) - IMAD.MOV.U32 R27, RZ, RZ, R22 ;
  has_guard_pred = 0
  opcode = IMAD.MOV.U32/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 27
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 22
  prop = 
instruction size is 4
Instr 854 @ 0x3560 (13664) - LOP3.LUT R31, R31, 0x80000000, RZ, 0xfc, !PT ;
  has_guard_pred = 0
  opcode = LOP3.LUT/LOP3
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 31
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 31
  prop = 
--op[2].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x80000000
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[4].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0xfc
--op[5].type = PRED
  is_neg/is_not/abs = 0/1/0
  size = 1
  num = 7
instruction size is 4
Instr 855 @ 0x3570 (13680) - IMAD.U32 R10, RZ, RZ, UR4 ;
  has_guard_pred = 0
  opcode = IMAD.U32/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 10
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = UREG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 4
  prop = 
instruction size is 4
Instr 856 @ 0x3580 (13696) - IMAD.MOV.U32 R28, RZ, RZ, R23 ;
  has_guard_pred = 0
  opcode = IMAD.MOV.U32/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 28
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 23
  prop = 
instruction size is 4
Instr 857 @ 0x3590 (13712) - IMAD.WIDE R20, R28, 0x8, R10 ;
  has_guard_pred = 0
  opcode = IMAD.WIDE/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 20
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 28
  prop = 
--op[2].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x8
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 10
  prop = 
instruction size is 4
Instr 858 @ 0x35a0 (13728) - ULDC.64 UR4, c[0x0][0x118] ;
  has_guard_pred = 0
  opcode = ULDC.64/ULDC
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 8
--op[0].type = UREG
  is_neg/is_not/abs = 0/0/0
  size = 8
  num = 4
  prop = 
--op[1].type = CBANK
  is_neg/is_not/abs = 0/0/0
  size = 8
  id = 0
  has_imm_offset = 1
  imm_offset = 280
  has_reg_offset = 0
  reg_offset = 0
instruction size is 8
Instr 859 @ 0x35b0 (13744) - LDG.E.64.CONSTANT R20, [R20.64] ;
  has_guard_pred = 0
  opcode = LDG.E.64.CONSTANT/LDG
  memop = GLOBAL
  format = INT64
  load/store = 1/0
  size = 8
  is_extended = 1
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 8
  num = 20
  prop = 
--op[1].type = MREF
  is_neg/is_not/abs = 0/0/0
  size = 8
  has_ra = 1
  ra_num = 20
  ra_mod = 64
  has_ur = 0
  ur_num = 0
  ur_mod = NO_MOD
  has_imm = 0
  imm = 0
instruction size is 8
Instr 860 @ 0x35c0 (13760) - IADD3 R28, R28, 0x1, RZ ;
  has_guard_pred = 0
  opcode = IADD3/IADD3
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 28
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 28
  prop = 
--op[2].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x1
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
instruction size is 4
Instr 861 @ 0x35d0 (13776) - IMAD.WIDE.U32 R24, P4, R20, R29, R24 ;
  has_guard_pred = 0
  opcode = IMAD.WIDE.U32/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 24
  prop = 
--op[1].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 4
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 20
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 29
  prop = 
--op[4].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 24
  prop = 
instruction size is 4
Instr 862 @ 0x35e0 (13792) - IMAD R33, R20, R31, RZ ;
  has_guard_pred = 0
  opcode = IMAD/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 33
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 20
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 31
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
instruction size is 4
Instr 863 @ 0x35f0 (13808) - IMAD R30, R21, R29, RZ ;
  has_guard_pred = 0
  opcode = IMAD/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 30
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 21
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 29
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
instruction size is 4
Instr 864 @ 0x3600 (13824) - IADD3 R25, P0, R33, R25, RZ ;
  has_guard_pred = 0
  opcode = IADD3/IADD3
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 25
  prop = 
--op[1].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 0
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 33
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 25
  prop = 
--op[4].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
instruction size is 4
Instr 865 @ 0x3610 (13840) - IMAD.HI.U32 R33, R21, R29, RZ ;
  has_guard_pred = 0
  opcode = IMAD.HI.U32/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 33
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 21
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 29
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
instruction size is 4
Instr 866 @ 0x3620 (13856) - IADD3 R25, P1, R30, R25, RZ ;
  has_guard_pred = 0
  opcode = IADD3/IADD3
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 25
  prop = 
--op[1].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 1
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 30
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 25
  prop = 
--op[4].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
instruction size is 4
Instr 867 @ 0x3630 (13872) - IMAD.HI.U32 R30, R20, R31, RZ ;
  has_guard_pred = 0
  opcode = IMAD.HI.U32/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 30
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 20
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 31
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
instruction size is 4
Instr 868 @ 0x3640 (13888) - IMAD.X R20, RZ, RZ, R30, P4 ;
  has_guard_pred = 0
  opcode = IMAD.X/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 20
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 30
  prop = 
--op[4].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 4
instruction size is 4
Instr 869 @ 0x3650 (13904) - STL.64 [R27], R24 ;
  has_guard_pred = 0
  opcode = STL.64/STL
  memop = LOCAL
  format = INT64
  load/store = 0/1
  size = 8
  is_extended = 0
--op[0].type = MREF
  is_neg/is_not/abs = 0/0/0
  size = 8
  has_ra = 1
  ra_num = 27
  ra_mod = NO_MOD
  has_ur = 0
  ur_num = 0
  ur_mod = NO_MOD
  has_imm = 0
  imm = 0
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 8
  num = 24
  prop = 
instruction size is 8
Instr 870 @ 0x3660 (13920) - IMAD.HI.U32 R30, R21, R31, RZ ;
  has_guard_pred = 0
  opcode = IMAD.HI.U32/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 30
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 21
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 31
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
instruction size is 4
Instr 871 @ 0x3670 (13936) - IADD3.X R20, P0, R33, R20, RZ, P0, !PT ;
  has_guard_pred = 0
  opcode = IADD3.X/IADD3
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 20
  prop = 
--op[1].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 0
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 33
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 20
  prop = 
--op[4].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[5].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 0
--op[6].type = PRED
  is_neg/is_not/abs = 0/1/0
  size = 1
  num = 7
instruction size is 4
Instr 872 @ 0x3680 (13952) - IMAD R21, R21, R31, RZ ;
  has_guard_pred = 0
  opcode = IMAD/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 21
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 21
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 31
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
instruction size is 4
Instr 873 @ 0x3690 (13968) - IADD3.X R21, P1, R21, R20, RZ, P1, !PT ;
  has_guard_pred = 0
  opcode = IADD3.X/IADD3
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 21
  prop = 
--op[1].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 1
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 21
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 20
  prop = 
--op[4].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[5].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 1
--op[6].type = PRED
  is_neg/is_not/abs = 0/1/0
  size = 1
  num = 7
instruction size is 4
Instr 874 @ 0x36a0 (13984) - IMAD.X R20, RZ, RZ, R30, P0 ;
  has_guard_pred = 0
  opcode = IMAD.X/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 20
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 30
  prop = 
--op[4].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 0
instruction size is 4
Instr 875 @ 0x36b0 (14000) - ISETP.GE.AND P0, PT, R28.reuse, R9, PT ;
  has_guard_pred = 0
  opcode = ISETP.GE.AND/ISETP
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 0
--op[1].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 7
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 28
  prop = .reuse
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 9
  prop = 
--op[4].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 7
instruction size is 4
Instr 876 @ 0x36c0 (14016) - IMAD.IADD R27, R28, 0x1, -R23 ;
  has_guard_pred = 0
  opcode = IMAD.IADD/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 27
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 28
  prop = 
--op[2].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x1
--op[3].type = REG
  is_neg/is_not/abs = 1/0/0
  size = 4
  num = 23
  prop = 
instruction size is 4
Instr 877 @ 0x36d0 (14032) - IMAD.X R25, RZ, RZ, R20, P1 ;
  has_guard_pred = 0
  opcode = IMAD.X/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 25
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 20
  prop = 
--op[4].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 1
instruction size is 4
Instr 878 @ 0x36e0 (14048) - IMAD R27, R27, 0x8, R22 ;
  has_guard_pred = 0
  opcode = IMAD/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 27
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 27
  prop = 
--op[2].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x8
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 22
  prop = 
instruction size is 4
Instr 879 @ 0x36f0 (14064) - IMAD.MOV.U32 R24, RZ, RZ, R21 ;
  has_guard_pred = 0
  opcode = IMAD.MOV.U32/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 24
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 21
  prop = 
instruction size is 4
Instr 880 @ 0x3700 (14080) - @!P0 BRA 0x3590 ;
  has_guard_pred = 1
  guard_pred_num = 0
  guard_pred_negated = 1
  guard_pred_uniform = 0
  opcode = BRA/BRA
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x3590
instruction size is 4
Instr 881 @ 0x3710 (14096) - BSYNC B2 ;
  has_guard_pred = 0
  opcode = BSYNC/BSYNC
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0xb2
instruction size is 4
Instr 882 @ 0x3720 (14112) - ISETP.NE.AND P0, PT, R7.reuse, RZ, PT ;
  has_guard_pred = 0
  opcode = ISETP.NE.AND/ISETP
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 0
--op[1].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 7
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 7
  prop = .reuse
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[4].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 7
instruction size is 4
Instr 883 @ 0x3730 (14128) - STL.64 [R27], R24 ;
  has_guard_pred = 0
  opcode = STL.64/STL
  memop = LOCAL
  format = INT64
  load/store = 0/1
  size = 8
  is_extended = 0
--op[0].type = MREF
  is_neg/is_not/abs = 0/0/0
  size = 8
  has_ra = 1
  ra_num = 27
  ra_mod = NO_MOD
  has_ur = 0
  ur_num = 0
  ur_mod = NO_MOD
  has_imm = 0
  imm = 0
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 8
  num = 24
  prop = 
instruction size is 8
Instr 884 @ 0x3740 (14144) - LDL.64 R20, [R1+0x20] ;
  has_guard_pred = 0
  opcode = LDL.64/LDL
  memop = LOCAL
  format = INT64
  load/store = 1/0
  size = 8
  is_extended = 0
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 8
  num = 20
  prop = 
--op[1].type = MREF
  is_neg/is_not/abs = 0/0/0
  size = 8
  has_ra = 1
  ra_num = 1
  ra_mod = NO_MOD
  has_ur = 0
  ur_num = 0
  ur_mod = NO_MOD
  has_imm = 1
  imm = 32
instruction size is 8
Instr 885 @ 0x3750 (14160) - LDL.64 R10, [R1+0x28] ;
  has_guard_pred = 0
  opcode = LDL.64/LDL
  memop = LOCAL
  format = INT64
  load/store = 1/0
  size = 8
  is_extended = 0
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 8
  num = 10
  prop = 
--op[1].type = MREF
  is_neg/is_not/abs = 0/0/0
  size = 8
  has_ra = 1
  ra_num = 1
  ra_mod = NO_MOD
  has_ur = 0
  ur_num = 0
  ur_mod = NO_MOD
  has_imm = 1
  imm = 40
instruction size is 8
Instr 886 @ 0x3760 (14176) - @P0 LDL.64 R22, [R1+0x18] ;
  has_guard_pred = 1
  guard_pred_num = 0
  guard_pred_negated = 0
  guard_pred_uniform = 0
  opcode = LDL.64/LDL
  memop = LOCAL
  format = INT64
  load/store = 1/0
  size = 8
  is_extended = 0
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 8
  num = 22
  prop = 
--op[1].type = MREF
  is_neg/is_not/abs = 0/0/0
  size = 8
  has_ra = 1
  ra_num = 1
  ra_mod = NO_MOD
  has_ur = 0
  ur_num = 0
  ur_mod = NO_MOD
  has_imm = 1
  imm = 24
instruction size is 8
Instr 887 @ 0x3770 (14192) - @P0 IADD3 R9, -R7, 0x40, RZ ;
  has_guard_pred = 1
  guard_pred_num = 0
  guard_pred_negated = 0
  guard_pred_uniform = 0
  opcode = IADD3/IADD3
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 9
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 1/0/0
  size = 4
  num = 7
  prop = 
--op[2].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x40
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
instruction size is 4
Instr 888 @ 0x3780 (14208) - LOP3.LUT R5, R5, 0x80000000, RZ, 0xc0, !PT ;
  has_guard_pred = 0
  opcode = LOP3.LUT/LOP3
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 5
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 5
  prop = 
--op[2].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x80000000
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[4].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0xc0
--op[5].type = PRED
  is_neg/is_not/abs = 0/1/0
  size = 1
  num = 7
instruction size is 4
Instr 889 @ 0x3790 (14224) - ISETP.NE.AND P5, PT, R5, RZ, PT ;
  has_guard_pred = 0
  opcode = ISETP.NE.AND/ISETP
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 5
--op[1].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 7
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 5
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[4].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 7
instruction size is 4
Instr 890 @ 0x37a0 (14240) - UMOV UR4, URZ ;
  has_guard_pred = 0
  opcode = UMOV/UMOV
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = UREG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 4
  prop = 
--op[1].type = UREG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 63
  prop = 
instruction size is 4
Instr 891 @ 0x37b0 (14256) - @P0 SHF.L.U64.HI R28, R20.reuse, R7.reuse, R21.reuse ;
  has_guard_pred = 1
  guard_pred_num = 0
  guard_pred_negated = 0
  guard_pred_uniform = 0
  opcode = SHF.L.U64.HI/SHF
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 8
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 8
  num = 28
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 8
  num = 20
  prop = .reuse
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 8
  num = 7
  prop = .reuse
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 8
  num = 21
  prop = .reuse
instruction size is 8
Instr 892 @ 0x37c0 (14272) - @P0 SHF.L.U32 R29, R20.reuse, R7, RZ ;
  has_guard_pred = 1
  guard_pred_num = 0
  guard_pred_negated = 0
  guard_pred_uniform = 0
  opcode = SHF.L.U32/SHF
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 29
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 20
  prop = .reuse
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 7
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
instruction size is 4
Instr 893 @ 0x37d0 (14288) - @P0 SHF.R.U64 R30, R20, R9.reuse, R21 ;
  has_guard_pred = 1
  guard_pred_num = 0
  guard_pred_negated = 0
  guard_pred_uniform = 0
  opcode = SHF.R.U64/SHF
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 8
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 8
  num = 30
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 8
  num = 20
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 8
  num = 9
  prop = .reuse
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 8
  num = 21
  prop = 
instruction size is 8
Instr 894 @ 0x37e0 (14304) - @P0 SHF.R.U64 R22, R22, R9.reuse, R23.reuse ;
  has_guard_pred = 1
  guard_pred_num = 0
  guard_pred_negated = 0
  guard_pred_uniform = 0
  opcode = SHF.R.U64/SHF
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 8
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 8
  num = 22
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 8
  num = 22
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 8
  num = 9
  prop = .reuse
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 8
  num = 23
  prop = .reuse
instruction size is 8
Instr 895 @ 0x37f0 (14320) - @P0 SHF.R.U32.HI R23, RZ, R9, R23 ;
  has_guard_pred = 1
  guard_pred_num = 0
  guard_pred_negated = 0
  guard_pred_uniform = 0
  opcode = SHF.R.U32.HI/SHF
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 23
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 9
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 23
  prop = 
instruction size is 4
Instr 896 @ 0x3800 (14336) - @P0 SHF.L.U32 R25, R10, R7, RZ ;
  has_guard_pred = 1
  guard_pred_num = 0
  guard_pred_negated = 0
  guard_pred_uniform = 0
  opcode = SHF.L.U32/SHF
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 25
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 10
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 7
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
instruction size is 4
Instr 897 @ 0x3810 (14352) - @P0 SHF.R.U32.HI R9, RZ, R9, R21 ;
  has_guard_pred = 1
  guard_pred_num = 0
  guard_pred_negated = 0
  guard_pred_uniform = 0
  opcode = SHF.R.U32.HI/SHF
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 9
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 9
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 21
  prop = 
instruction size is 4
Instr 898 @ 0x3820 (14368) - @P0 LOP3.LUT R21, R23, R28, RZ, 0xfc, !PT ;
  has_guard_pred = 1
  guard_pred_num = 0
  guard_pred_negated = 0
  guard_pred_uniform = 0
  opcode = LOP3.LUT/LOP3
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 21
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 23
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 28
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[4].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0xfc
--op[5].type = PRED
  is_neg/is_not/abs = 0/1/0
  size = 1
  num = 7
instruction size is 4
Instr 899 @ 0x3830 (14384) - @P0 LOP3.LUT R20, R22, R29, RZ, 0xfc, !PT ;
  has_guard_pred = 1
  guard_pred_num = 0
  guard_pred_negated = 0
  guard_pred_uniform = 0
  opcode = LOP3.LUT/LOP3
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 20
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 22
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 29
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[4].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0xfc
--op[5].type = PRED
  is_neg/is_not/abs = 0/1/0
  size = 1
  num = 7
instruction size is 4
Instr 900 @ 0x3840 (14400) - @P0 SHF.L.U64.HI R28, R10, R7, R11 ;
  has_guard_pred = 1
  guard_pred_num = 0
  guard_pred_negated = 0
  guard_pred_uniform = 0
  opcode = SHF.L.U64.HI/SHF
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 8
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 8
  num = 28
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 8
  num = 10
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 8
  num = 7
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 8
  num = 11
  prop = 
instruction size is 8
Instr 901 @ 0x3850 (14416) - @P0 LOP3.LUT R10, R25, R30, RZ, 0xfc, !PT ;
  has_guard_pred = 1
  guard_pred_num = 0
  guard_pred_negated = 0
  guard_pred_uniform = 0
  opcode = LOP3.LUT/LOP3
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 10
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 25
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 30
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[4].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0xfc
--op[5].type = PRED
  is_neg/is_not/abs = 0/1/0
  size = 1
  num = 7
instruction size is 4
Instr 902 @ 0x3860 (14432) - SHF.L.U64.HI R22, R20.reuse, 0x2, R21.reuse ;
  has_guard_pred = 0
  opcode = SHF.L.U64.HI/SHF
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 8
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 8
  num = 22
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 8
  num = 20
  prop = .reuse
--op[2].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x2
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 8
  num = 21
  prop = .reuse
instruction size is 8
Instr 903 @ 0x3870 (14448) - IMAD.SHL.U32 R20, R20, 0x4, RZ ;
  has_guard_pred = 0
  opcode = IMAD.SHL.U32/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 20
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 20
  prop = 
--op[2].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x4
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
instruction size is 4
Instr 904 @ 0x3880 (14464) - SHF.R.U32.HI R21, RZ, 0x1e, R21 ;
  has_guard_pred = 0
  opcode = SHF.R.U32.HI/SHF
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 21
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x1e
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 21
  prop = 
instruction size is 4
Instr 905 @ 0x3890 (14480) - IMAD.SHL.U32 R24, R10, 0x4, RZ ;
  has_guard_pred = 0
  opcode = IMAD.SHL.U32/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 24
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 10
  prop = 
--op[2].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x4
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
instruction size is 4
Instr 906 @ 0x38a0 (14496) - @P0 LOP3.LUT R11, R28, R9, RZ, 0xfc, !PT ;
  has_guard_pred = 1
  guard_pred_num = 0
  guard_pred_negated = 0
  guard_pred_uniform = 0
  opcode = LOP3.LUT/LOP3
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 11
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 28
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 9
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[4].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0xfc
--op[5].type = PRED
  is_neg/is_not/abs = 0/1/0
  size = 1
  num = 7
instruction size is 4
Instr 907 @ 0x38b0 (14512) - IADD3 RZ, P0, RZ, -R20, RZ ;
  has_guard_pred = 0
  opcode = IADD3/IADD3
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[1].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 0
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 1/0/0
  size = 4
  num = 20
  prop = 
--op[4].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
instruction size is 4
Instr 908 @ 0x38c0 (14528) - LOP3.LUT R7, RZ, R22, RZ, 0x33, !PT ;
  has_guard_pred = 0
  opcode = LOP3.LUT/LOP3
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 7
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 22
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[4].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x33
--op[5].type = PRED
  is_neg/is_not/abs = 0/1/0
  size = 1
  num = 7
instruction size is 4
Instr 909 @ 0x38d0 (14544) - LOP3.LUT R24, R21, R24, RZ, 0xfc, !PT ;
  has_guard_pred = 0
  opcode = LOP3.LUT/LOP3
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 24
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 21
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 24
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[4].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0xfc
--op[5].type = PRED
  is_neg/is_not/abs = 0/1/0
  size = 1
  num = 7
instruction size is 4
Instr 910 @ 0x38e0 (14560) - IADD3.X R21, P0, RZ, R7, RZ, P0, !PT ;
  has_guard_pred = 0
  opcode = IADD3.X/IADD3
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 21
  prop = 
--op[1].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 0
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 7
  prop = 
--op[4].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[5].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 0
--op[6].type = PRED
  is_neg/is_not/abs = 0/1/0
  size = 1
  num = 7
instruction size is 4
Instr 911 @ 0x38f0 (14576) - SHF.L.U64.HI R28, R10, 0x2, R11.reuse ;
  has_guard_pred = 0
  opcode = SHF.L.U64.HI/SHF
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 8
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 8
  num = 28
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 8
  num = 10
  prop = 
--op[2].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x2
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 8
  num = 11
  prop = .reuse
instruction size is 8
Instr 912 @ 0x3900 (14592) - LOP3.LUT R7, RZ, R24, RZ, 0x33, !PT ;
  has_guard_pred = 0
  opcode = LOP3.LUT/LOP3
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 7
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 24
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[4].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x33
--op[5].type = PRED
  is_neg/is_not/abs = 0/1/0
  size = 1
  num = 7
instruction size is 4
Instr 913 @ 0x3910 (14608) - SHF.R.U32.HI R10, RZ, 0x1d, R11 ;
  has_guard_pred = 0
  opcode = SHF.R.U32.HI/SHF
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 10
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x1d
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 11
  prop = 
instruction size is 4
Instr 914 @ 0x3920 (14624) - LOP3.LUT R9, RZ, R28, RZ, 0x33, !PT ;
  has_guard_pred = 0
  opcode = LOP3.LUT/LOP3
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 9
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 28
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[4].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x33
--op[5].type = PRED
  is_neg/is_not/abs = 0/1/0
  size = 1
  num = 7
instruction size is 4
Instr 915 @ 0x3930 (14640) - IADD3.X R7, P1, RZ, R7, RZ, P0, !PT ;
  has_guard_pred = 0
  opcode = IADD3.X/IADD3
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 7
  prop = 
--op[1].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 1
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 7
  prop = 
--op[4].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[5].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 0
--op[6].type = PRED
  is_neg/is_not/abs = 0/1/0
  size = 1
  num = 7
instruction size is 4
Instr 916 @ 0x3940 (14656) - LOP3.LUT R10, R10, 0x1, RZ, 0xc0, !PT ;
  has_guard_pred = 0
  opcode = LOP3.LUT/LOP3
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 10
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 10
  prop = 
--op[2].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x1
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[4].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0xc0
--op[5].type = PRED
  is_neg/is_not/abs = 0/1/0
  size = 1
  num = 7
instruction size is 4
Instr 917 @ 0x3950 (14672) - IMAD.X R9, RZ, RZ, R9, P1 ;
  has_guard_pred = 0
  opcode = IMAD.X/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 9
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 9
  prop = 
--op[4].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 1
instruction size is 4
Instr 918 @ 0x3960 (14688) - ISETP.NE.AND P0, PT, R10, RZ, PT ;
  has_guard_pred = 0
  opcode = ISETP.NE.AND/ISETP
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 0
--op[1].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 7
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 10
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[4].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 7
instruction size is 4
Instr 919 @ 0x3970 (14704) - SEL R9, R28, R9, !P0 ;
  has_guard_pred = 0
  opcode = SEL/SEL
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 9
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 28
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 9
  prop = 
--op[3].type = PRED
  is_neg/is_not/abs = 0/1/0
  size = 1
  num = 0
instruction size is 4
Instr 920 @ 0x3980 (14720) - SEL R24, R24, R7, !P0 ;
  has_guard_pred = 0
  opcode = SEL/SEL
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 24
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 24
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 7
  prop = 
--op[3].type = PRED
  is_neg/is_not/abs = 0/1/0
  size = 1
  num = 0
instruction size is 4
Instr 921 @ 0x3990 (14736) - ISETP.NE.U32.AND P1, PT, R9, RZ, PT ;
  has_guard_pred = 0
  opcode = ISETP.NE.U32.AND/ISETP
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 1
--op[1].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 7
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 9
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[4].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 7
instruction size is 4
Instr 922 @ 0x39a0 (14752) - SEL R23, R24, R9, !P1 ;
  has_guard_pred = 0
  opcode = SEL/SEL
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 23
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 24
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 9
  prop = 
--op[3].type = PRED
  is_neg/is_not/abs = 0/1/0
  size = 1
  num = 1
instruction size is 4
Instr 923 @ 0x39b0 (14768) - FLO.U32 R23, R23 ;
  has_guard_pred = 0
  opcode = FLO.U32/FLO
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 23
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 23
  prop = 
instruction size is 4
Instr 924 @ 0x39c0 (14784) - IADD3 R25, -R23.reuse, 0x1f, RZ ;
  has_guard_pred = 0
  opcode = IADD3/IADD3
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 25
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 1/0/0
  size = 4
  num = 23
  prop = .reuse
--op[2].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x1f
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
instruction size is 4
Instr 925 @ 0x39d0 (14800) - IADD3 R7, -R23, 0x3f, RZ ;
  has_guard_pred = 0
  opcode = IADD3/IADD3
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 7
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 1/0/0
  size = 4
  num = 23
  prop = 
--op[2].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x3f
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
instruction size is 4
Instr 926 @ 0x39e0 (14816) - @P1 IMAD.MOV R7, RZ, RZ, R25 ;
  has_guard_pred = 1
  guard_pred_num = 1
  guard_pred_negated = 0
  guard_pred_uniform = 0
  opcode = IMAD.MOV/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 7
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 25
  prop = 
instruction size is 4
Instr 927 @ 0x39f0 (14832) - ISETP.NE.U32.AND P1, PT, R7, RZ, PT ;
  has_guard_pred = 0
  opcode = ISETP.NE.U32.AND/ISETP
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 1
--op[1].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 7
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 7
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[4].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 7
instruction size is 4
Instr 928 @ 0x3a00 (14848) - ISETP.NE.AND.EX P1, PT, RZ, RZ, PT, P1 ;
  has_guard_pred = 0
  opcode = ISETP.NE.AND.EX/ISETP
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 1
--op[1].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 7
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[4].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 7
--op[5].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 1
instruction size is 4
Instr 929 @ 0x3a10 (14864) - @P0 IMAD.MOV R20, RZ, RZ, -R20 ;
  has_guard_pred = 1
  guard_pred_num = 0
  guard_pred_negated = 0
  guard_pred_uniform = 0
  opcode = IMAD.MOV/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 20
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 1/0/0
  size = 4
  num = 20
  prop = 
instruction size is 4
Instr 930 @ 0x3a20 (14880) - SEL R22, R22, R21, !P0 ;
  has_guard_pred = 0
  opcode = SEL/SEL
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 22
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 22
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 21
  prop = 
--op[3].type = PRED
  is_neg/is_not/abs = 0/1/0
  size = 1
  num = 0
instruction size is 4
Instr 931 @ 0x3a30 (14896) - IADD3 R21, -R7, 0x40, RZ ;
  has_guard_pred = 0
  opcode = IADD3/IADD3
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 21
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 1/0/0
  size = 4
  num = 7
  prop = 
--op[2].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x40
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
instruction size is 4
Instr 932 @ 0x3a40 (14912) - SHF.L.U32 R25, R24, R7, RZ ;
  has_guard_pred = 0
  opcode = SHF.L.U32/SHF
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 25
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 24
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 7
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
instruction size is 4
Instr 933 @ 0x3a50 (14928) - SHF.R.U64 R20, R20, R21, R22 ;
  has_guard_pred = 0
  opcode = SHF.R.U64/SHF
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 8
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 8
  num = 20
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 8
  num = 20
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 8
  num = 21
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 8
  num = 22
  prop = 
instruction size is 8
Instr 934 @ 0x3a60 (14944) - SHF.L.U64.HI R27, R24, R7, R9 ;
  has_guard_pred = 0
  opcode = SHF.L.U64.HI/SHF
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 8
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 8
  num = 27
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 8
  num = 24
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 8
  num = 7
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 8
  num = 9
  prop = 
instruction size is 8
Instr 935 @ 0x3a70 (14960) - @P1 LOP3.LUT R24, R20, R25, RZ, 0xfc, !PT ;
  has_guard_pred = 1
  guard_pred_num = 1
  guard_pred_negated = 0
  guard_pred_uniform = 0
  opcode = LOP3.LUT/LOP3
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 24
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 20
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 25
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[4].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0xfc
--op[5].type = PRED
  is_neg/is_not/abs = 0/1/0
  size = 1
  num = 7
instruction size is 4
Instr 936 @ 0x3a80 (14976) - SHF.R.U32.HI R20, RZ, R21, R22 ;
  has_guard_pred = 0
  opcode = SHF.R.U32.HI/SHF
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 20
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 21
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 22
  prop = 
instruction size is 4
Instr 937 @ 0x3a90 (14992) - IMAD.WIDE.U32 R22, R24, 0x2168c235, RZ ;
  has_guard_pred = 0
  opcode = IMAD.WIDE.U32/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 22
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 24
  prop = 
--op[2].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x2168c235
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
instruction size is 4
Instr 938 @ 0x3aa0 (15008) - @P1 LOP3.LUT R9, R20, R27, RZ, 0xfc, !PT ;
  has_guard_pred = 1
  guard_pred_num = 1
  guard_pred_negated = 0
  guard_pred_uniform = 0
  opcode = LOP3.LUT/LOP3
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 9
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 20
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 27
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[4].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0xfc
--op[5].type = PRED
  is_neg/is_not/abs = 0/1/0
  size = 1
  num = 7
instruction size is 4
Instr 939 @ 0x3ab0 (15024) - MOV R21, RZ ;
  has_guard_pred = 0
  opcode = MOV/MOV
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 21
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
instruction size is 4
Instr 940 @ 0x3ac0 (15040) - IMAD.MOV.U32 R20, RZ, RZ, R23 ;
  has_guard_pred = 0
  opcode = IMAD.MOV.U32/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 20
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 23
  prop = 
instruction size is 4
Instr 941 @ 0x3ad0 (15056) - IMAD.WIDE.U32 R20, R24, -0x36f0255e, R20 ;
  has_guard_pred = 0
  opcode = IMAD.WIDE.U32/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 20
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 24
  prop = 
--op[2].type = IMM_UINT64
  is_neg/is_not/abs = 1/0/0
  size = 8
  value = 0xffffffffc90fdaa2
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 20
  prop = 
instruction size is 4
Instr 942 @ 0x3ae0 (15072) - IMAD.HI.U32 R23, R9, -0x36f0255e, RZ ;
  has_guard_pred = 0
  opcode = IMAD.HI.U32/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 23
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 9
  prop = 
--op[2].type = IMM_UINT64
  is_neg/is_not/abs = 1/0/0
  size = 8
  value = 0xffffffffc90fdaa2
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
instruction size is 4
Instr 943 @ 0x3af0 (15088) - IMAD.WIDE.U32 R20, P1, R9, 0x2168c235, R20 ;
  has_guard_pred = 0
  opcode = IMAD.WIDE.U32/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 20
  prop = 
--op[1].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 1
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 9
  prop = 
--op[3].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x2168c235
--op[4].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 20
  prop = 
instruction size is 4
Instr 944 @ 0x3b00 (15104) - IMAD R25, R9, -0x36f0255e, RZ ;
  has_guard_pred = 0
  opcode = IMAD/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 25
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 9
  prop = 
--op[2].type = IMM_UINT64
  is_neg/is_not/abs = 1/0/0
  size = 8
  value = 0xffffffffc90fdaa2
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
instruction size is 4
Instr 945 @ 0x3b10 (15120) - IADD3 RZ, P4, R22, R22, RZ ;
  has_guard_pred = 0
  opcode = IADD3/IADD3
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[1].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 4
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 22
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 22
  prop = 
--op[4].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
instruction size is 4
Instr 946 @ 0x3b20 (15136) - IMAD.X R9, RZ, RZ, R23, P1 ;
  has_guard_pred = 0
  opcode = IMAD.X/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 9
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 23
  prop = 
--op[4].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 1
instruction size is 4
Instr 947 @ 0x3b30 (15152) - IADD3 R21, P1, R25, R21, RZ ;
  has_guard_pred = 0
  opcode = IADD3/IADD3
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 21
  prop = 
--op[1].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 1
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 25
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 21
  prop = 
--op[4].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
instruction size is 4
Instr 948 @ 0x3b40 (15168) - IADD3.X RZ, P4, R20, R20, RZ, P4, !PT ;
  has_guard_pred = 0
  opcode = IADD3.X/IADD3
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[1].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 4
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 20
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 20
  prop = 
--op[4].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[5].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 4
--op[6].type = PRED
  is_neg/is_not/abs = 0/1/0
  size = 1
  num = 7
instruction size is 4
Instr 949 @ 0x3b50 (15184) - IMAD.X R9, RZ, RZ, R9, P1 ;
  has_guard_pred = 0
  opcode = IMAD.X/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 9
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 9
  prop = 
--op[4].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 1
instruction size is 4
Instr 950 @ 0x3b60 (15200) - ISETP.GT.U32.AND P1, PT, R21.reuse, RZ, PT ;
  has_guard_pred = 0
  opcode = ISETP.GT.U32.AND/ISETP
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 1
--op[1].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 7
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 21
  prop = .reuse
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[4].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 7
instruction size is 4
Instr 951 @ 0x3b70 (15216) - IADD3.X R20, P4, R21, R21, RZ, P4, !PT ;
  has_guard_pred = 0
  opcode = IADD3.X/IADD3
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 20
  prop = 
--op[1].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 4
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 21
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 21
  prop = 
--op[4].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[5].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 4
--op[6].type = PRED
  is_neg/is_not/abs = 0/1/0
  size = 1
  num = 7
instruction size is 4
Instr 952 @ 0x3b80 (15232) - ISETP.GT.AND.EX P1, PT, R9, RZ, PT, P1 ;
  has_guard_pred = 0
  opcode = ISETP.GT.AND.EX/ISETP
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 1
--op[1].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 7
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 9
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[4].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 7
--op[5].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 1
instruction size is 4
Instr 953 @ 0x3b90 (15248) - IMAD.X R22, R9, 0x1, R9, P4 ;
  has_guard_pred = 0
  opcode = IMAD.X/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 22
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 9
  prop = 
--op[2].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x1
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 9
  prop = 
--op[4].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 4
instruction size is 4
Instr 954 @ 0x3ba0 (15264) - SEL R20, R20, R21, P1 ;
  has_guard_pred = 0
  opcode = SEL/SEL
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 20
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 20
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 21
  prop = 
--op[3].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 1
instruction size is 4
Instr 955 @ 0x3bb0 (15280) - LEA.HI R10, R11, R10, RZ, 0x2 ;
  has_guard_pred = 0
  opcode = LEA.HI/LEA
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 10
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 11
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 10
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[4].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x2
instruction size is 4
Instr 956 @ 0x3bc0 (15296) - SEL R22, R22, R9, P1 ;
  has_guard_pred = 0
  opcode = SEL/SEL
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 22
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 22
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 9
  prop = 
--op[3].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 1
instruction size is 4
Instr 957 @ 0x3bd0 (15312) - IADD3 R9, P4, R20, 0x1, RZ ;
  has_guard_pred = 0
  opcode = IADD3/IADD3
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 9
  prop = 
--op[1].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 4
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 20
  prop = 
--op[3].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x1
--op[4].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
instruction size is 4
Instr 958 @ 0x3be0 (15328) - IMAD.MOV R11, RZ, RZ, -R10 ;
  has_guard_pred = 0
  opcode = IMAD.MOV/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 11
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 1/0/0
  size = 4
  num = 10
  prop = 
instruction size is 4
Instr 959 @ 0x3bf0 (15344) - IMAD.X R20, RZ, RZ, R22, P4 ;
  has_guard_pred = 0
  opcode = IMAD.X/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 20
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 22
  prop = 
--op[4].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 4
instruction size is 4
Instr 960 @ 0x3c00 (15360) - IADD3 R21, R6, -c[0x0][0x20], RZ ;
  has_guard_pred = 0
  opcode = IADD3/IADD3
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 21
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 6
  prop = 
--op[2].type = CBANK
  is_neg/is_not/abs = 1/0/0
  size = 4
  id = 0
  has_imm_offset = 1
  imm_offset = 32
  has_reg_offset = 0
  reg_offset = 0
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
instruction size is 4
Instr 961 @ 0x3c10 (15376) - @P5 IMAD.MOV.U32 R10, RZ, RZ, R11 ;
  has_guard_pred = 1
  guard_pred_num = 5
  guard_pred_negated = 0
  guard_pred_uniform = 0
  opcode = IMAD.MOV.U32/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 10
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 11
  prop = 
instruction size is 4
Instr 962 @ 0x3c20 (15392) - SHF.R.U64 R9, R9, 0xa, R20 ;
  has_guard_pred = 0
  opcode = SHF.R.U64/SHF
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 8
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 8
  num = 9
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 8
  num = 9
  prop = 
--op[2].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0xa
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 8
  num = 20
  prop = 
instruction size is 8
Instr 963 @ 0x3c30 (15408) - STL [R21], R10 ;
  has_guard_pred = 0
  opcode = STL/STL
  memop = LOCAL
  format = INT32
  load/store = 0/1
  size = 4
  is_extended = 0
--op[0].type = MREF
  is_neg/is_not/abs = 0/0/0
  size = 4
  has_ra = 1
  ra_num = 21
  ra_mod = NO_MOD
  has_ur = 0
  ur_num = 0
  ur_mod = NO_MOD
  has_imm = 0
  imm = 0
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 10
  prop = 
instruction size is 4
Instr 964 @ 0x3c40 (15424) - IADD3 R9, P4, R9, 0x1, RZ ;
  has_guard_pred = 0
  opcode = IADD3/IADD3
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 9
  prop = 
--op[1].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 4
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 9
  prop = 
--op[3].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x1
--op[4].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
instruction size is 4
Instr 965 @ 0x3c50 (15440) - SEL R22, RZ, 0x1, !P1 ;
  has_guard_pred = 0
  opcode = SEL/SEL
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 22
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x1
--op[3].type = PRED
  is_neg/is_not/abs = 0/1/0
  size = 1
  num = 1
instruction size is 4
Instr 966 @ 0x3c60 (15456) - LEA.HI.X R20, R20, RZ, RZ, 0x16, P4 ;
  has_guard_pred = 0
  opcode = LEA.HI.X/LEA
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 20
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 20
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[4].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x16
--op[5].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 4
instruction size is 4
Instr 967 @ 0x3c70 (15472) - IMAD.IADD R11, R22, 0x1, R7 ;
  has_guard_pred = 0
  opcode = IMAD.IADD/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 11
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 22
  prop = 
--op[2].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x1
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 7
  prop = 
instruction size is 4
Instr 968 @ 0x3c80 (15488) - SHF.R.U64 R7, R9, 0x1, R20.reuse ;
  has_guard_pred = 0
  opcode = SHF.R.U64/SHF
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 8
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 8
  num = 7
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 8
  num = 9
  prop = 
--op[2].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x1
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 8
  num = 20
  prop = .reuse
instruction size is 8
Instr 969 @ 0x3c90 (15504) - SHF.R.U32.HI R20, RZ, 0x1, R20 ;
  has_guard_pred = 0
  opcode = SHF.R.U32.HI/SHF
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 20
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x1
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 20
  prop = 
instruction size is 4
Instr 970 @ 0x3ca0 (15520) - IMAD.SHL.U32 R9, R11, 0x100000, RZ ;
  has_guard_pred = 0
  opcode = IMAD.SHL.U32/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 9
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 11
  prop = 
--op[2].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x100000
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
instruction size is 4
Instr 971 @ 0x3cb0 (15536) - IADD3 R29, P1, P4, R7, -UR4, RZ ;
  has_guard_pred = 0
  opcode = IADD3/IADD3
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 29
  prop = 
--op[1].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 1
--op[2].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 4
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 7
  prop = 
--op[4].type = UREG
  is_neg/is_not/abs = 1/0/0
  size = 4
  num = 4
  prop = 
--op[5].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
instruction size is 4
Instr 972 @ 0x3cc0 (15552) - @P0 LOP3.LUT R5, R5, 0x80000000, RZ, 0x3c, !PT ;
  has_guard_pred = 1
  guard_pred_num = 0
  guard_pred_negated = 0
  guard_pred_uniform = 0
  opcode = LOP3.LUT/LOP3
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 5
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 5
  prop = 
--op[2].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x80000000
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[4].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x3c
--op[5].type = PRED
  is_neg/is_not/abs = 0/1/0
  size = 1
  num = 7
instruction size is 4
Instr 973 @ 0x3cd0 (15568) - IADD3.X R20, R20, 0x3fe00000, ~R9, P1, P4 ;
  has_guard_pred = 0
  opcode = IADD3.X/IADD3
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 20
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 20
  prop = 
--op[2].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x3fe00000
--op[3].type = REG
  is_neg/is_not/abs = 0/1/0
  size = 4
  num = 9
  prop = 
--op[4].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 1
--op[5].type = PRED
  is_neg/is_not/abs = 0/0/0
  size = 1
  num = 4
instruction size is 4
Instr 974 @ 0x3ce0 (15584) - LOP3.LUT R5, R20, R5, RZ, 0xfc, !PT ;
  has_guard_pred = 0
  opcode = LOP3.LUT/LOP3
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 5
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 20
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 5
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[4].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0xfc
--op[5].type = PRED
  is_neg/is_not/abs = 0/1/0
  size = 1
  num = 7
instruction size is 4
Instr 975 @ 0x3cf0 (15600) - IMAD.MOV.U32 R27, RZ, RZ, 0x0 ;
  has_guard_pred = 0
  opcode = IMAD.MOV.U32/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 27
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x0
instruction size is 4
Instr 976 @ 0x3d00 (15616) - IMAD.MOV.U32 R10, RZ, RZ, R29 ;
  has_guard_pred = 0
  opcode = IMAD.MOV.U32/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 10
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 29
  prop = 
instruction size is 4
Instr 977 @ 0x3d10 (15632) - IMAD.MOV.U32 R11, RZ, RZ, R5 ;
  has_guard_pred = 0
  opcode = IMAD.MOV.U32/IMAD
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 11
  prop = 
--op[1].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[2].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 255
  prop = 
--op[3].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 5
  prop = 
instruction size is 4
Instr 978 @ 0x3d20 (15648) - RET.REL.NODEC R26 0x0 ;
  has_guard_pred = 0
  opcode = RET.REL.NODEC/RET
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = REG
  is_neg/is_not/abs = 0/0/0
  size = 4
  num = 26
  prop =  0x0
instruction size is 4
Instr 979 @ 0x3d30 (15664) - BRA 0x3d30;
  has_guard_pred = 0
  opcode = BRA/BRA
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
--op[0].type = IMM_UINT64
  is_neg/is_not/abs = 0/0/0
  size = 8
  value = 0x3d30
instruction size is 4
Instr 980 @ 0x3d40 (15680) - NOP;
  has_guard_pred = 0
  opcode = NOP/NOP
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
instruction size is 4
Instr 981 @ 0x3d50 (15696) - NOP;
  has_guard_pred = 0
  opcode = NOP/NOP
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
instruction size is 4
Instr 982 @ 0x3d60 (15712) - NOP;
  has_guard_pred = 0
  opcode = NOP/NOP
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
instruction size is 4
Instr 983 @ 0x3d70 (15728) - NOP;
  has_guard_pred = 0
  opcode = NOP/NOP
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
instruction size is 4
Instr 984 @ 0x3d80 (15744) - NOP;
  has_guard_pred = 0
  opcode = NOP/NOP
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
instruction size is 4
Instr 985 @ 0x3d90 (15760) - NOP;
  has_guard_pred = 0
  opcode = NOP/NOP
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
instruction size is 4
Instr 986 @ 0x3da0 (15776) - NOP;
  has_guard_pred = 0
  opcode = NOP/NOP
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
instruction size is 4
Instr 987 @ 0x3db0 (15792) - NOP;
  has_guard_pred = 0
  opcode = NOP/NOP
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
instruction size is 4
Instr 988 @ 0x3dc0 (15808) - NOP;
  has_guard_pred = 0
  opcode = NOP/NOP
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
instruction size is 4
Instr 989 @ 0x3dd0 (15824) - NOP;
  has_guard_pred = 0
  opcode = NOP/NOP
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
instruction size is 4
Instr 990 @ 0x3de0 (15840) - NOP;
  has_guard_pred = 0
  opcode = NOP/NOP
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
instruction size is 4
Instr 991 @ 0x3df0 (15856) - NOP;
  has_guard_pred = 0
  opcode = NOP/NOP
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
instruction size is 4
Instr 992 @ 0x3e00 (15872) - NOP;
  has_guard_pred = 0
  opcode = NOP/NOP
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
instruction size is 4
Instr 993 @ 0x3e10 (15888) - NOP;
  has_guard_pred = 0
  opcode = NOP/NOP
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
instruction size is 4
Instr 994 @ 0x3e20 (15904) - NOP;
  has_guard_pred = 0
  opcode = NOP/NOP
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
instruction size is 4
Instr 995 @ 0x3e30 (15920) - NOP;
  has_guard_pred = 0
  opcode = NOP/NOP
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
instruction size is 4
Instr 996 @ 0x3e40 (15936) - NOP;
  has_guard_pred = 0
  opcode = NOP/NOP
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
instruction size is 4
Instr 997 @ 0x3e50 (15952) - NOP;
  has_guard_pred = 0
  opcode = NOP/NOP
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
instruction size is 4
Instr 998 @ 0x3e60 (15968) - NOP;
  has_guard_pred = 0
  opcode = NOP/NOP
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
instruction size is 4
Instr 999 @ 0x3e70 (15984) - NOP;
  has_guard_pred = 0
  opcode = NOP/NOP
  memop = NONE
  format = NO_FORMAT
  load/store = 0/0
  size = 4
instruction size is 4
0.11
kernel 0 - compute(double, double, int, double, double, double, double*, double, double, double, double, double, double, double) - #thread-blocks 1,  kernel instructions 35, total instructions 35
  BRA = 2
  BSSY = 1
  BSYNC = 1
  CALL.ABS.NOINC = 1
  CALL.REL.NOINC = 0
  CS2R = 0
  DADD = 0
  DFMA = 5
  DFMA.RM = 0
  DFMA.RP = 0
  DMUL = 1
  DSETP.GT.AND = 1
  DSETP.GTU.AND = 0
  DSETP.NE.AND = 0
  DSETP.NEU.AND = 0
  EXIT = 1
  F2I.F64 = 0
  FFMA = 1
  FLO.U32 = 0
  FRND.F64.FLOOR = 0
  FSEL = 0
  FSETP.GEU.AND = 0
  FSETP.GT.AND = 1
  FSETP.GTU.AND = 1
  I2F.F64 = 0
  IADD3 = 3
  IADD3.X = 1
  IMAD = 0
  IMAD.HI.U32 = 0
  IMAD.IADD = 0
  IMAD.MOV = 0
  IMAD.MOV.U32 = 7
  IMAD.SHL.U32 = 0
  IMAD.U32 = 2
  IMAD.WIDE = 0
  IMAD.WIDE.U32 = 0
  IMAD.X = 0
  ISETP.EQ.AND = 0
  ISETP.GE.AND = 0
  ISETP.GE.U32.AND = 0
  ISETP.GT.AND = 0
  ISETP.GT.AND.EX = 0
  ISETP.GT.U32.AND = 0
  ISETP.NE.AND = 0
  ISETP.NE.AND.EX = 0
  ISETP.NE.U32.AND = 0
  LDG.E.64.CONSTANT = 0
  LDL = 0
  LDL.64 = 0
  LEA = 0
  LEA.HI = 0
  LEA.HI.X = 0
  LOP3.LUT = 0
  MOV = 2
  MUFU.RCP64H = 1
  MUFU.RSQ64H = 0
  NOP = 0
  R2P = 0
  RET.REL.NODEC = 0
  SEL = 0
  SHF.L.U32 = 0
  SHF.L.U64.HI = 0
  SHF.R.S32.HI = 0
  SHF.R.U32.HI = 0
  SHF.R.U64 = 0
  STG.E.64 = 0
  STL = 0
  STL.64 = 1
  ULDC.64 = 0
  UMOV = 2
instr_opcode_to_num_map.size() is 70
